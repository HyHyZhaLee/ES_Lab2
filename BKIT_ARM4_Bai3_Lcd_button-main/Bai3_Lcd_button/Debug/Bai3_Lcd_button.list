
Bai3_Lcd_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006ee4  08004548  08004548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b42c  0800b42c  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800b42c  0800b42c  0001b42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b434  0800b434  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b434  0800b434  0001b434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b438  0800b438  0001b438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800b43c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          0000016c  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000190  20000190  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ffc9  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c03  00000000  00000000  0003001d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f10  00000000  00000000  00032c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d90  00000000  00000000  00033b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000229ff  00000000  00000000  000348c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000124f9  00000000  00000000  000572bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccd98  00000000  00000000  000697b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00136550  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c88  00000000  00000000  001365a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004530 	.word	0x08004530

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08004530 	.word	0x08004530

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2108      	movs	r1, #8
 80004e4:	4802      	ldr	r0, [pc, #8]	; (80004f0 <button_init+0x14>)
 80004e6:	f002 f977 	bl	80027d8 <HAL_GPIO_WritePin>
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40020c00 	.word	0x40020c00

080004f4 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2108      	movs	r1, #8
 80004fe:	482f      	ldr	r0, [pc, #188]	; (80005bc <button_Scan+0xc8>)
 8000500:	f002 f96a 	bl	80027d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000504:	2201      	movs	r2, #1
 8000506:	2108      	movs	r1, #8
 8000508:	482c      	ldr	r0, [pc, #176]	; (80005bc <button_Scan+0xc8>)
 800050a:	f002 f965 	bl	80027d8 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 800050e:	230a      	movs	r3, #10
 8000510:	2202      	movs	r2, #2
 8000512:	492b      	ldr	r1, [pc, #172]	; (80005c0 <button_Scan+0xcc>)
 8000514:	482b      	ldr	r0, [pc, #172]	; (80005c4 <button_Scan+0xd0>)
 8000516:	f002 fe66 	bl	80031e6 <HAL_SPI_Receive>
	  int button_index = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800051e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000522:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000524:	2300      	movs	r3, #0
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	e03f      	b.n	80005aa <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2b00      	cmp	r3, #0
 800052e:	db06      	blt.n	800053e <button_Scan+0x4a>
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b03      	cmp	r3, #3
 8000534:	dc03      	bgt.n	800053e <button_Scan+0x4a>
			  button_index = i + 4;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	3304      	adds	r3, #4
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	e018      	b.n	8000570 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2b03      	cmp	r3, #3
 8000542:	dd07      	ble.n	8000554 <button_Scan+0x60>
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b07      	cmp	r3, #7
 8000548:	dc04      	bgt.n	8000554 <button_Scan+0x60>
			  button_index = 7 - i;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	f1c3 0307 	rsb	r3, r3, #7
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	e00d      	b.n	8000570 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2b07      	cmp	r3, #7
 8000558:	dd06      	ble.n	8000568 <button_Scan+0x74>
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2b0b      	cmp	r3, #11
 800055e:	dc03      	bgt.n	8000568 <button_Scan+0x74>
			  button_index = i + 4;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	3304      	adds	r3, #4
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	e003      	b.n	8000570 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f1c3 0317 	rsb	r3, r3, #23
 800056e:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000570:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <button_Scan+0xcc>)
 8000572:	881a      	ldrh	r2, [r3, #0]
 8000574:	897b      	ldrh	r3, [r7, #10]
 8000576:	4013      	ands	r3, r2
 8000578:	b29b      	uxth	r3, r3
 800057a:	2b00      	cmp	r3, #0
 800057c:	d005      	beq.n	800058a <button_Scan+0x96>
 800057e:	4a12      	ldr	r2, [pc, #72]	; (80005c8 <button_Scan+0xd4>)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	2100      	movs	r1, #0
 8000584:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000588:	e009      	b.n	800059e <button_Scan+0xaa>
		  else button_count[button_index]++;
 800058a:	4a0f      	ldr	r2, [pc, #60]	; (80005c8 <button_Scan+0xd4>)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000592:	3301      	adds	r3, #1
 8000594:	b299      	uxth	r1, r3
 8000596:	4a0c      	ldr	r2, [pc, #48]	; (80005c8 <button_Scan+0xd4>)
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 800059e:	897b      	ldrh	r3, [r7, #10]
 80005a0:	085b      	lsrs	r3, r3, #1
 80005a2:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3301      	adds	r3, #1
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2b0f      	cmp	r3, #15
 80005ae:	ddbc      	ble.n	800052a <button_Scan+0x36>
	  }
}
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40020c00 	.word	0x40020c00
 80005c0:	20000060 	.word	0x20000060
 80005c4:	200000ec 	.word	0x200000ec
 80005c8:	20000040 	.word	0x20000040

080005cc <fsm_for_input_processing>:
int temp_yellow_duration = YELLOW_DURATION;
int temp_green_duration = GREEN_DURATION;

int counter;

void fsm_for_input_processing(){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	if(button_count[0] == 1){
 80005d0:	4b44      	ldr	r3, [pc, #272]	; (80006e4 <fsm_for_input_processing+0x118>)
 80005d2:	881b      	ldrh	r3, [r3, #0]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d117      	bne.n	8000608 <fsm_for_input_processing+0x3c>
		INPUT_STATUS++;
 80005d8:	4b43      	ldr	r3, [pc, #268]	; (80006e8 <fsm_for_input_processing+0x11c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	3301      	adds	r3, #1
 80005de:	4a42      	ldr	r2, [pc, #264]	; (80006e8 <fsm_for_input_processing+0x11c>)
 80005e0:	6013      	str	r3, [r2, #0]
		if(INPUT_STATUS>INPUT_GREEN) INPUT_STATUS = INPUT_AUTO;
 80005e2:	4b41      	ldr	r3, [pc, #260]	; (80006e8 <fsm_for_input_processing+0x11c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b08      	cmp	r3, #8
 80005e8:	dd02      	ble.n	80005f0 <fsm_for_input_processing+0x24>
 80005ea:	4b3f      	ldr	r3, [pc, #252]	; (80006e8 <fsm_for_input_processing+0x11c>)
 80005ec:	2205      	movs	r2, #5
 80005ee:	601a      	str	r2, [r3, #0]
		temp_red_duration = red_duration;
 80005f0:	4b3e      	ldr	r3, [pc, #248]	; (80006ec <fsm_for_input_processing+0x120>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a3e      	ldr	r2, [pc, #248]	; (80006f0 <fsm_for_input_processing+0x124>)
 80005f6:	6013      	str	r3, [r2, #0]
		temp_yellow_duration = yellow_duration;
 80005f8:	4b3e      	ldr	r3, [pc, #248]	; (80006f4 <fsm_for_input_processing+0x128>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a3e      	ldr	r2, [pc, #248]	; (80006f8 <fsm_for_input_processing+0x12c>)
 80005fe:	6013      	str	r3, [r2, #0]
		temp_green_duration = green_duration;
 8000600:	4b3e      	ldr	r3, [pc, #248]	; (80006fc <fsm_for_input_processing+0x130>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a3e      	ldr	r2, [pc, #248]	; (8000700 <fsm_for_input_processing+0x134>)
 8000606:	6013      	str	r3, [r2, #0]
	}
	if(button_count[2] == 1){
 8000608:	4b36      	ldr	r3, [pc, #216]	; (80006e4 <fsm_for_input_processing+0x118>)
 800060a:	889b      	ldrh	r3, [r3, #4]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d117      	bne.n	8000640 <fsm_for_input_processing+0x74>
		INPUT_STATUS++;
 8000610:	4b35      	ldr	r3, [pc, #212]	; (80006e8 <fsm_for_input_processing+0x11c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	3301      	adds	r3, #1
 8000616:	4a34      	ldr	r2, [pc, #208]	; (80006e8 <fsm_for_input_processing+0x11c>)
 8000618:	6013      	str	r3, [r2, #0]
		if(INPUT_STATUS>INPUT_GREEN) INPUT_STATUS = INPUT_AUTO;
 800061a:	4b33      	ldr	r3, [pc, #204]	; (80006e8 <fsm_for_input_processing+0x11c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b08      	cmp	r3, #8
 8000620:	dd02      	ble.n	8000628 <fsm_for_input_processing+0x5c>
 8000622:	4b31      	ldr	r3, [pc, #196]	; (80006e8 <fsm_for_input_processing+0x11c>)
 8000624:	2205      	movs	r2, #5
 8000626:	601a      	str	r2, [r3, #0]
		red_duration = temp_red_duration;
 8000628:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <fsm_for_input_processing+0x124>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a2f      	ldr	r2, [pc, #188]	; (80006ec <fsm_for_input_processing+0x120>)
 800062e:	6013      	str	r3, [r2, #0]
		yellow_duration = temp_yellow_duration;
 8000630:	4b31      	ldr	r3, [pc, #196]	; (80006f8 <fsm_for_input_processing+0x12c>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a2f      	ldr	r2, [pc, #188]	; (80006f4 <fsm_for_input_processing+0x128>)
 8000636:	6013      	str	r3, [r2, #0]
		green_duration = temp_green_duration;
 8000638:	4b31      	ldr	r3, [pc, #196]	; (8000700 <fsm_for_input_processing+0x134>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a2f      	ldr	r2, [pc, #188]	; (80006fc <fsm_for_input_processing+0x130>)
 800063e:	6013      	str	r3, [r2, #0]
	}
	switch(INPUT_STATUS){
 8000640:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <fsm_for_input_processing+0x11c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b08      	cmp	r3, #8
 8000646:	d84b      	bhi.n	80006e0 <fsm_for_input_processing+0x114>
 8000648:	a201      	add	r2, pc, #4	; (adr r2, 8000650 <fsm_for_input_processing+0x84>)
 800064a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064e:	bf00      	nop
 8000650:	08000675 	.word	0x08000675
 8000654:	080006e1 	.word	0x080006e1
 8000658:	080006e1 	.word	0x080006e1
 800065c:	080006e1 	.word	0x080006e1
 8000660:	080006e1 	.word	0x080006e1
 8000664:	0800067d 	.word	0x0800067d
 8000668:	08000683 	.word	0x08000683
 800066c:	0800069f 	.word	0x0800069f
 8000670:	080006bb 	.word	0x080006bb
		case INIT:
			INPUT_STATUS = INPUT_AUTO;
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <fsm_for_input_processing+0x11c>)
 8000676:	2205      	movs	r2, #5
 8000678:	601a      	str	r2, [r3, #0]
			break;
 800067a:	e031      	b.n	80006e0 <fsm_for_input_processing+0x114>
		case INPUT_AUTO:
			fsm_automatic_run();
 800067c:	f000 f842 	bl	8000704 <fsm_automatic_run>
			break;
 8000680:	e02e      	b.n	80006e0 <fsm_for_input_processing+0x114>
		case INPUT_RED:
			toggleLED(RED);
 8000682:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000686:	f000 f9f1 	bl	8000a6c <toggleLED>
			if(button_count[1] == 1) temp_red_duration++;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <fsm_for_input_processing+0x118>)
 800068c:	885b      	ldrh	r3, [r3, #2]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d121      	bne.n	80006d6 <fsm_for_input_processing+0x10a>
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <fsm_for_input_processing+0x124>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	3301      	adds	r3, #1
 8000698:	4a15      	ldr	r2, [pc, #84]	; (80006f0 <fsm_for_input_processing+0x124>)
 800069a:	6013      	str	r3, [r2, #0]
			break;
 800069c:	e01b      	b.n	80006d6 <fsm_for_input_processing+0x10a>
		case INPUT_YELLOW:
			toggleLED(YELLOW);
 800069e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80006a2:	f000 f9e3 	bl	8000a6c <toggleLED>
			if(button_count[1] == 1) temp_yellow_duration++;
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <fsm_for_input_processing+0x118>)
 80006a8:	885b      	ldrh	r3, [r3, #2]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d115      	bne.n	80006da <fsm_for_input_processing+0x10e>
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <fsm_for_input_processing+0x12c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	3301      	adds	r3, #1
 80006b4:	4a10      	ldr	r2, [pc, #64]	; (80006f8 <fsm_for_input_processing+0x12c>)
 80006b6:	6013      	str	r3, [r2, #0]
			break;
 80006b8:	e00f      	b.n	80006da <fsm_for_input_processing+0x10e>
		case INPUT_GREEN:
			toggleLED(GREEN);
 80006ba:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80006be:	f000 f9d5 	bl	8000a6c <toggleLED>
			if(button_count[1] == 1) temp_green_duration++;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <fsm_for_input_processing+0x118>)
 80006c4:	885b      	ldrh	r3, [r3, #2]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d109      	bne.n	80006de <fsm_for_input_processing+0x112>
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <fsm_for_input_processing+0x134>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	3301      	adds	r3, #1
 80006d0:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <fsm_for_input_processing+0x134>)
 80006d2:	6013      	str	r3, [r2, #0]
			break;
 80006d4:	e003      	b.n	80006de <fsm_for_input_processing+0x112>
			break;
 80006d6:	bf00      	nop
 80006d8:	e002      	b.n	80006e0 <fsm_for_input_processing+0x114>
			break;
 80006da:	bf00      	nop
 80006dc:	e000      	b.n	80006e0 <fsm_for_input_processing+0x114>
			break;
 80006de:	bf00      	nop
	}

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000040 	.word	0x20000040
 80006e8:	20000064 	.word	0x20000064
 80006ec:	20000000 	.word	0x20000000
 80006f0:	2000000c 	.word	0x2000000c
 80006f4:	20000004 	.word	0x20000004
 80006f8:	20000010 	.word	0x20000010
 80006fc:	20000008 	.word	0x20000008
 8000700:	20000014 	.word	0x20000014

08000704 <fsm_automatic_run>:
void fsm_automatic_run() {
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
    switch (AUTO_STATUS) {
 8000708:	4b41      	ldr	r3, [pc, #260]	; (8000810 <fsm_automatic_run+0x10c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b04      	cmp	r3, #4
 800070e:	d86f      	bhi.n	80007f0 <fsm_automatic_run+0xec>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <fsm_automatic_run+0x14>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	0800072d 	.word	0x0800072d
 800071c:	08000753 	.word	0x08000753
 8000720:	08000777 	.word	0x08000777
 8000724:	0800079b 	.word	0x0800079b
 8000728:	080007bf 	.word	0x080007bf
        case INIT:
        	setTimer(1000, 0);
 800072c:	2100      	movs	r1, #0
 800072e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000732:	f001 fb07 	bl	8001d44 <setTimer>
        	AUTO_STATUS = RED_GREEN;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <fsm_automatic_run+0x10c>)
 8000738:	2201      	movs	r2, #1
 800073a:	601a      	str	r2, [r3, #0]
        	counter = green_duration;
 800073c:	4b35      	ldr	r3, [pc, #212]	; (8000814 <fsm_automatic_run+0x110>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a35      	ldr	r2, [pc, #212]	; (8000818 <fsm_automatic_run+0x114>)
 8000742:	6013      	str	r3, [r2, #0]
        	displayTraffic(RED, GREEN);
 8000744:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8000748:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800074c:	f000 f86a 	bl	8000824 <displayTraffic>
        	break;
 8000750:	e04e      	b.n	80007f0 <fsm_automatic_run+0xec>
        case RED_GREEN:
        	if(counter<0){
 8000752:	4b31      	ldr	r3, [pc, #196]	; (8000818 <fsm_automatic_run+0x114>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	da43      	bge.n	80007e2 <fsm_automatic_run+0xde>
        		AUTO_STATUS = RED_YELLOW;
 800075a:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <fsm_automatic_run+0x10c>)
 800075c:	2202      	movs	r2, #2
 800075e:	601a      	str	r2, [r3, #0]
        		counter = yellow_duration;
 8000760:	4b2e      	ldr	r3, [pc, #184]	; (800081c <fsm_automatic_run+0x118>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a2c      	ldr	r2, [pc, #176]	; (8000818 <fsm_automatic_run+0x114>)
 8000766:	6013      	str	r3, [r2, #0]
            	displayTraffic(RED, YELLOW);
 8000768:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 800076c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000770:	f000 f858 	bl	8000824 <displayTraffic>
        	}
        	break;
 8000774:	e035      	b.n	80007e2 <fsm_automatic_run+0xde>
        case RED_YELLOW:
			if(counter<0){
 8000776:	4b28      	ldr	r3, [pc, #160]	; (8000818 <fsm_automatic_run+0x114>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	da33      	bge.n	80007e6 <fsm_automatic_run+0xe2>
				AUTO_STATUS = GREEN_RED;
 800077e:	4b24      	ldr	r3, [pc, #144]	; (8000810 <fsm_automatic_run+0x10c>)
 8000780:	2203      	movs	r2, #3
 8000782:	601a      	str	r2, [r3, #0]
				counter = green_duration;
 8000784:	4b23      	ldr	r3, [pc, #140]	; (8000814 <fsm_automatic_run+0x110>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a23      	ldr	r2, [pc, #140]	; (8000818 <fsm_automatic_run+0x114>)
 800078a:	6013      	str	r3, [r2, #0]
            	displayTraffic(GREEN, RED);
 800078c:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8000790:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000794:	f000 f846 	bl	8000824 <displayTraffic>
			}
			break;
 8000798:	e025      	b.n	80007e6 <fsm_automatic_run+0xe2>
        case GREEN_RED:
			if(counter<0){
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <fsm_automatic_run+0x114>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	da23      	bge.n	80007ea <fsm_automatic_run+0xe6>
				AUTO_STATUS = YELLOW_RED;
 80007a2:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <fsm_automatic_run+0x10c>)
 80007a4:	2204      	movs	r2, #4
 80007a6:	601a      	str	r2, [r3, #0]
				counter = yellow_duration;
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <fsm_automatic_run+0x118>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a1a      	ldr	r2, [pc, #104]	; (8000818 <fsm_automatic_run+0x114>)
 80007ae:	6013      	str	r3, [r2, #0]
				displayTraffic(YELLOW, RED);
 80007b0:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80007b4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80007b8:	f000 f834 	bl	8000824 <displayTraffic>
			}
			break;
 80007bc:	e015      	b.n	80007ea <fsm_automatic_run+0xe6>
        case YELLOW_RED:
			if(counter<0){
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <fsm_automatic_run+0x114>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	da13      	bge.n	80007ee <fsm_automatic_run+0xea>
				AUTO_STATUS = RED_GREEN;
 80007c6:	4b12      	ldr	r3, [pc, #72]	; (8000810 <fsm_automatic_run+0x10c>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	601a      	str	r2, [r3, #0]
				counter = green_duration;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <fsm_automatic_run+0x110>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a11      	ldr	r2, [pc, #68]	; (8000818 <fsm_automatic_run+0x114>)
 80007d2:	6013      	str	r3, [r2, #0]
				displayTraffic(RED, GREEN);
 80007d4:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80007d8:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80007dc:	f000 f822 	bl	8000824 <displayTraffic>
			}
			break;
 80007e0:	e005      	b.n	80007ee <fsm_automatic_run+0xea>
        	break;
 80007e2:	bf00      	nop
 80007e4:	e004      	b.n	80007f0 <fsm_automatic_run+0xec>
			break;
 80007e6:	bf00      	nop
 80007e8:	e002      	b.n	80007f0 <fsm_automatic_run+0xec>
			break;
 80007ea:	bf00      	nop
 80007ec:	e000      	b.n	80007f0 <fsm_automatic_run+0xec>
			break;
 80007ee:	bf00      	nop

    }
    if(flag_timer[0]){
 80007f0:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <fsm_automatic_run+0x11c>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d009      	beq.n	800080c <fsm_automatic_run+0x108>
    	setTimer(1000,0);
 80007f8:	2100      	movs	r1, #0
 80007fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007fe:	f001 faa1 	bl	8001d44 <setTimer>
    	counter--;
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <fsm_automatic_run+0x114>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	3b01      	subs	r3, #1
 8000808:	4a03      	ldr	r2, [pc, #12]	; (8000818 <fsm_automatic_run+0x114>)
 800080a:	6013      	str	r3, [r2, #0]
    }
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000068 	.word	0x20000068
 8000814:	20000008 	.word	0x20000008
 8000818:	2000006c 	.word	0x2000006c
 800081c:	20000004 	.word	0x20000004
 8000820:	200000d4 	.word	0x200000d4

08000824 <displayTraffic>:




void displayTraffic(int led1, int led2) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af04      	add	r7, sp, #16
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
	lcd_Clear(WHITE);
 800082e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000832:	f000 fc45 	bl	80010c0 <lcd_Clear>
    lcd_Fill(0, 0, 240, 20, BLUE);
 8000836:	231f      	movs	r3, #31
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	2314      	movs	r3, #20
 800083c:	22f0      	movs	r2, #240	; 0xf0
 800083e:	2100      	movs	r1, #0
 8000840:	2000      	movs	r0, #0
 8000842:	f000 fc6f 	bl	8001124 <lcd_Fill>
    lcd_StrCenter(0, 2, "BKHCM_LAB3", WHITE, BLUE, 16, 1);
 8000846:	2301      	movs	r3, #1
 8000848:	9302      	str	r3, [sp, #8]
 800084a:	2310      	movs	r3, #16
 800084c:	9301      	str	r3, [sp, #4]
 800084e:	231f      	movs	r3, #31
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000856:	4a83      	ldr	r2, [pc, #524]	; (8000a64 <displayTraffic+0x240>)
 8000858:	2102      	movs	r1, #2
 800085a:	2000      	movs	r0, #0
 800085c:	f001 f950 	bl	8001b00 <lcd_StrCenter>
    lcd_ShowPicture(80, 115, 90, 90, gImage_logo);
 8000860:	4b81      	ldr	r3, [pc, #516]	; (8000a68 <displayTraffic+0x244>)
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	235a      	movs	r3, #90	; 0x5a
 8000866:	225a      	movs	r2, #90	; 0x5a
 8000868:	2173      	movs	r1, #115	; 0x73
 800086a:	2050      	movs	r0, #80	; 0x50
 800086c:	f000 fe12 	bl	8001494 <lcd_ShowPicture>

    // Horizontal (led1)
    lcd_DrawCircle(88, 85, RED, 15, 0);
 8000870:	2300      	movs	r3, #0
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	230f      	movs	r3, #15
 8000876:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800087a:	2155      	movs	r1, #85	; 0x55
 800087c:	2058      	movs	r0, #88	; 0x58
 800087e:	f001 f86e 	bl	800195e <lcd_DrawCircle>
    lcd_DrawCircle(152, 85, GREEN, 15, 0);
 8000882:	2300      	movs	r3, #0
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	230f      	movs	r3, #15
 8000888:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800088c:	2155      	movs	r1, #85	; 0x55
 800088e:	2098      	movs	r0, #152	; 0x98
 8000890:	f001 f865 	bl	800195e <lcd_DrawCircle>
    lcd_DrawCircle(120, 85, YELLOW, 15, 0);
 8000894:	2300      	movs	r3, #0
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	230f      	movs	r3, #15
 800089a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800089e:	2155      	movs	r1, #85	; 0x55
 80008a0:	2078      	movs	r0, #120	; 0x78
 80008a2:	f001 f85c 	bl	800195e <lcd_DrawCircle>

    lcd_DrawCircle(88, 235, RED, 15, 0);
 80008a6:	2300      	movs	r3, #0
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	230f      	movs	r3, #15
 80008ac:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80008b0:	21eb      	movs	r1, #235	; 0xeb
 80008b2:	2058      	movs	r0, #88	; 0x58
 80008b4:	f001 f853 	bl	800195e <lcd_DrawCircle>
    lcd_DrawCircle(152, 235, GREEN, 15, 0);
 80008b8:	2300      	movs	r3, #0
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	230f      	movs	r3, #15
 80008be:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80008c2:	21eb      	movs	r1, #235	; 0xeb
 80008c4:	2098      	movs	r0, #152	; 0x98
 80008c6:	f001 f84a 	bl	800195e <lcd_DrawCircle>
    lcd_DrawCircle(120, 235, YELLOW, 15, 0);
 80008ca:	2300      	movs	r3, #0
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	230f      	movs	r3, #15
 80008d0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80008d4:	21eb      	movs	r1, #235	; 0xeb
 80008d6:	2078      	movs	r0, #120	; 0x78
 80008d8:	f001 f841 	bl	800195e <lcd_DrawCircle>

    // Vertical (led2)
    lcd_DrawCircle(44, 128, RED, 15, 0);
 80008dc:	2300      	movs	r3, #0
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	230f      	movs	r3, #15
 80008e2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80008e6:	2180      	movs	r1, #128	; 0x80
 80008e8:	202c      	movs	r0, #44	; 0x2c
 80008ea:	f001 f838 	bl	800195e <lcd_DrawCircle>
    lcd_DrawCircle(44, 160, YELLOW, 15, 0);
 80008ee:	2300      	movs	r3, #0
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	230f      	movs	r3, #15
 80008f4:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80008f8:	21a0      	movs	r1, #160	; 0xa0
 80008fa:	202c      	movs	r0, #44	; 0x2c
 80008fc:	f001 f82f 	bl	800195e <lcd_DrawCircle>
    lcd_DrawCircle(44, 192, GREEN, 15, 0);
 8000900:	2300      	movs	r3, #0
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	230f      	movs	r3, #15
 8000906:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800090a:	21c0      	movs	r1, #192	; 0xc0
 800090c:	202c      	movs	r0, #44	; 0x2c
 800090e:	f001 f826 	bl	800195e <lcd_DrawCircle>

    lcd_DrawCircle(196, 128, RED, 15, 0);
 8000912:	2300      	movs	r3, #0
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	230f      	movs	r3, #15
 8000918:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800091c:	2180      	movs	r1, #128	; 0x80
 800091e:	20c4      	movs	r0, #196	; 0xc4
 8000920:	f001 f81d 	bl	800195e <lcd_DrawCircle>
    lcd_DrawCircle(196, 160, YELLOW, 15, 0);
 8000924:	2300      	movs	r3, #0
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	230f      	movs	r3, #15
 800092a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800092e:	21a0      	movs	r1, #160	; 0xa0
 8000930:	20c4      	movs	r0, #196	; 0xc4
 8000932:	f001 f814 	bl	800195e <lcd_DrawCircle>
    lcd_DrawCircle(196, 192, GREEN, 15, 0);
 8000936:	2300      	movs	r3, #0
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	230f      	movs	r3, #15
 800093c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000940:	21c0      	movs	r1, #192	; 0xc0
 8000942:	20c4      	movs	r0, #196	; 0xc4
 8000944:	f001 f80b 	bl	800195e <lcd_DrawCircle>

    if (led1 == RED) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 800094e:	d112      	bne.n	8000976 <displayTraffic+0x152>
        lcd_DrawCircle(88, 85, RED, 15, 1);
 8000950:	2301      	movs	r3, #1
 8000952:	9300      	str	r3, [sp, #0]
 8000954:	230f      	movs	r3, #15
 8000956:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800095a:	2155      	movs	r1, #85	; 0x55
 800095c:	2058      	movs	r0, #88	; 0x58
 800095e:	f000 fffe 	bl	800195e <lcd_DrawCircle>
        lcd_DrawCircle(88, 235, RED, 15, 1);
 8000962:	2301      	movs	r3, #1
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	230f      	movs	r3, #15
 8000968:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800096c:	21eb      	movs	r1, #235	; 0xeb
 800096e:	2058      	movs	r0, #88	; 0x58
 8000970:	f000 fff5 	bl	800195e <lcd_DrawCircle>
 8000974:	e02d      	b.n	80009d2 <displayTraffic+0x1ae>
    } else if (led1 == YELLOW) {
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800097c:	4293      	cmp	r3, r2
 800097e:	d112      	bne.n	80009a6 <displayTraffic+0x182>
        lcd_DrawCircle(120, 85, YELLOW, 15, 1);
 8000980:	2301      	movs	r3, #1
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	230f      	movs	r3, #15
 8000986:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800098a:	2155      	movs	r1, #85	; 0x55
 800098c:	2078      	movs	r0, #120	; 0x78
 800098e:	f000 ffe6 	bl	800195e <lcd_DrawCircle>
        lcd_DrawCircle(120, 235, YELLOW, 15, 1);
 8000992:	2301      	movs	r3, #1
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	230f      	movs	r3, #15
 8000998:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800099c:	21eb      	movs	r1, #235	; 0xeb
 800099e:	2078      	movs	r0, #120	; 0x78
 80009a0:	f000 ffdd 	bl	800195e <lcd_DrawCircle>
 80009a4:	e015      	b.n	80009d2 <displayTraffic+0x1ae>
    } else if (led1 == GREEN) {
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 80009ac:	d111      	bne.n	80009d2 <displayTraffic+0x1ae>
        lcd_DrawCircle(152, 85, GREEN, 15, 1);
 80009ae:	2301      	movs	r3, #1
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	230f      	movs	r3, #15
 80009b4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80009b8:	2155      	movs	r1, #85	; 0x55
 80009ba:	2098      	movs	r0, #152	; 0x98
 80009bc:	f000 ffcf 	bl	800195e <lcd_DrawCircle>
        lcd_DrawCircle(152, 235, GREEN, 15, 1);
 80009c0:	2301      	movs	r3, #1
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	230f      	movs	r3, #15
 80009c6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80009ca:	21eb      	movs	r1, #235	; 0xeb
 80009cc:	2098      	movs	r0, #152	; 0x98
 80009ce:	f000 ffc6 	bl	800195e <lcd_DrawCircle>
    }

    // Check led2 and update the circles accordingly
    if (led2 == RED) {
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 80009d8:	d112      	bne.n	8000a00 <displayTraffic+0x1dc>
        lcd_DrawCircle(44, 128, RED, 15, 1);
 80009da:	2301      	movs	r3, #1
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	230f      	movs	r3, #15
 80009e0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80009e4:	2180      	movs	r1, #128	; 0x80
 80009e6:	202c      	movs	r0, #44	; 0x2c
 80009e8:	f000 ffb9 	bl	800195e <lcd_DrawCircle>
        lcd_DrawCircle(196, 128, RED, 15, 1);
 80009ec:	2301      	movs	r3, #1
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	230f      	movs	r3, #15
 80009f2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80009f6:	2180      	movs	r1, #128	; 0x80
 80009f8:	20c4      	movs	r0, #196	; 0xc4
 80009fa:	f000 ffb0 	bl	800195e <lcd_DrawCircle>
        lcd_DrawCircle(196, 160, YELLOW, 15, 1);
    } else if (led2 == GREEN) {
        lcd_DrawCircle(44, 192, GREEN, 15, 1);
        lcd_DrawCircle(196, 192, GREEN, 15, 1);
    }
}
 80009fe:	e02d      	b.n	8000a5c <displayTraffic+0x238>
    } else if (led2 == YELLOW) {
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d112      	bne.n	8000a30 <displayTraffic+0x20c>
        lcd_DrawCircle(44, 160, YELLOW, 15, 1);
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	230f      	movs	r3, #15
 8000a10:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000a14:	21a0      	movs	r1, #160	; 0xa0
 8000a16:	202c      	movs	r0, #44	; 0x2c
 8000a18:	f000 ffa1 	bl	800195e <lcd_DrawCircle>
        lcd_DrawCircle(196, 160, YELLOW, 15, 1);
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	230f      	movs	r3, #15
 8000a22:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000a26:	21a0      	movs	r1, #160	; 0xa0
 8000a28:	20c4      	movs	r0, #196	; 0xc4
 8000a2a:	f000 ff98 	bl	800195e <lcd_DrawCircle>
}
 8000a2e:	e015      	b.n	8000a5c <displayTraffic+0x238>
    } else if (led2 == GREEN) {
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 8000a36:	d111      	bne.n	8000a5c <displayTraffic+0x238>
        lcd_DrawCircle(44, 192, GREEN, 15, 1);
 8000a38:	2301      	movs	r3, #1
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000a42:	21c0      	movs	r1, #192	; 0xc0
 8000a44:	202c      	movs	r0, #44	; 0x2c
 8000a46:	f000 ff8a 	bl	800195e <lcd_DrawCircle>
        lcd_DrawCircle(196, 192, GREEN, 15, 1);
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	9300      	str	r3, [sp, #0]
 8000a4e:	230f      	movs	r3, #15
 8000a50:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000a54:	21c0      	movs	r1, #192	; 0xc0
 8000a56:	20c4      	movs	r0, #196	; 0xc4
 8000a58:	f000 ff81 	bl	800195e <lcd_DrawCircle>
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	08004548 	.word	0x08004548
 8000a68:	080074d4 	.word	0x080074d4

08000a6c <toggleLED>:
int toggle_state = 0, toggle_check = 0;
void toggleLED(int led){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af04      	add	r7, sp, #16
 8000a72:	6078      	str	r0, [r7, #4]
	if(flag_timer[1]){
 8000a74:	4b6a      	ldr	r3, [pc, #424]	; (8000c20 <toggleLED+0x1b4>)
 8000a76:	885b      	ldrh	r3, [r3, #2]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d00d      	beq.n	8000a98 <toggleLED+0x2c>
		setTimer(1000,1);
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a82:	f001 f95f 	bl	8001d44 <setTimer>
		toggle_state = 1-toggle_state;
 8000a86:	4b67      	ldr	r3, [pc, #412]	; (8000c24 <toggleLED+0x1b8>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f1c3 0301 	rsb	r3, r3, #1
 8000a8e:	4a65      	ldr	r2, [pc, #404]	; (8000c24 <toggleLED+0x1b8>)
 8000a90:	6013      	str	r3, [r2, #0]
		toggle_check = 0;
 8000a92:	4b65      	ldr	r3, [pc, #404]	; (8000c28 <toggleLED+0x1bc>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
	}
	if(toggle_check) return;
 8000a98:	4b63      	ldr	r3, [pc, #396]	; (8000c28 <toggleLED+0x1bc>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	f040 80ba 	bne.w	8000c16 <toggleLED+0x1aa>
	if(toggle_state){
 8000aa2:	4b60      	ldr	r3, [pc, #384]	; (8000c24 <toggleLED+0x1b8>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d024      	beq.n	8000af4 <toggleLED+0x88>
		if(led == RED) displayTraffic(RED, RED);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 8000ab0:	d106      	bne.n	8000ac0 <toggleLED+0x54>
 8000ab2:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8000ab6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000aba:	f7ff feb3 	bl	8000824 <displayTraffic>
 8000abe:	e015      	b.n	8000aec <toggleLED+0x80>
		else if(led == YELLOW) displayTraffic(YELLOW, YELLOW);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d106      	bne.n	8000ad8 <toggleLED+0x6c>
 8000aca:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8000ace:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8000ad2:	f7ff fea7 	bl	8000824 <displayTraffic>
 8000ad6:	e009      	b.n	8000aec <toggleLED+0x80>
		else if(led == GREEN) displayTraffic(GREEN, GREEN);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 8000ade:	d105      	bne.n	8000aec <toggleLED+0x80>
 8000ae0:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8000ae4:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000ae8:	f7ff fe9c 	bl	8000824 <displayTraffic>
		toggle_check = 1;
 8000aec:	4b4e      	ldr	r3, [pc, #312]	; (8000c28 <toggleLED+0x1bc>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	601a      	str	r2, [r3, #0]
		return;
 8000af2:	e091      	b.n	8000c18 <toggleLED+0x1ac>
	}
	lcd_Clear(WHITE);
 8000af4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000af8:	f000 fae2 	bl	80010c0 <lcd_Clear>
    lcd_Fill(0, 0, 240, 20, BLUE);
 8000afc:	231f      	movs	r3, #31
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	2314      	movs	r3, #20
 8000b02:	22f0      	movs	r2, #240	; 0xf0
 8000b04:	2100      	movs	r1, #0
 8000b06:	2000      	movs	r0, #0
 8000b08:	f000 fb0c 	bl	8001124 <lcd_Fill>
    lcd_StrCenter(0, 2, "BKHCM_LAB3", WHITE, BLUE, 16, 1);
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	9302      	str	r3, [sp, #8]
 8000b10:	2310      	movs	r3, #16
 8000b12:	9301      	str	r3, [sp, #4]
 8000b14:	231f      	movs	r3, #31
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b1c:	4a43      	ldr	r2, [pc, #268]	; (8000c2c <toggleLED+0x1c0>)
 8000b1e:	2102      	movs	r1, #2
 8000b20:	2000      	movs	r0, #0
 8000b22:	f000 ffed 	bl	8001b00 <lcd_StrCenter>
    lcd_ShowPicture(80, 115, 90, 90, gImage_logo);
 8000b26:	4b42      	ldr	r3, [pc, #264]	; (8000c30 <toggleLED+0x1c4>)
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	235a      	movs	r3, #90	; 0x5a
 8000b2c:	225a      	movs	r2, #90	; 0x5a
 8000b2e:	2173      	movs	r1, #115	; 0x73
 8000b30:	2050      	movs	r0, #80	; 0x50
 8000b32:	f000 fcaf 	bl	8001494 <lcd_ShowPicture>

    // Horizontal (led1)
    lcd_DrawCircle(88, 85, RED, 15, 0);
 8000b36:	2300      	movs	r3, #0
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000b40:	2155      	movs	r1, #85	; 0x55
 8000b42:	2058      	movs	r0, #88	; 0x58
 8000b44:	f000 ff0b 	bl	800195e <lcd_DrawCircle>
    lcd_DrawCircle(152, 85, GREEN, 15, 0);
 8000b48:	2300      	movs	r3, #0
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000b52:	2155      	movs	r1, #85	; 0x55
 8000b54:	2098      	movs	r0, #152	; 0x98
 8000b56:	f000 ff02 	bl	800195e <lcd_DrawCircle>
    lcd_DrawCircle(120, 85, YELLOW, 15, 0);
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	230f      	movs	r3, #15
 8000b60:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000b64:	2155      	movs	r1, #85	; 0x55
 8000b66:	2078      	movs	r0, #120	; 0x78
 8000b68:	f000 fef9 	bl	800195e <lcd_DrawCircle>

    lcd_DrawCircle(88, 235, RED, 15, 0);
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	230f      	movs	r3, #15
 8000b72:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000b76:	21eb      	movs	r1, #235	; 0xeb
 8000b78:	2058      	movs	r0, #88	; 0x58
 8000b7a:	f000 fef0 	bl	800195e <lcd_DrawCircle>
    lcd_DrawCircle(152, 235, GREEN, 15, 0);
 8000b7e:	2300      	movs	r3, #0
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	230f      	movs	r3, #15
 8000b84:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000b88:	21eb      	movs	r1, #235	; 0xeb
 8000b8a:	2098      	movs	r0, #152	; 0x98
 8000b8c:	f000 fee7 	bl	800195e <lcd_DrawCircle>
    lcd_DrawCircle(120, 235, YELLOW, 15, 0);
 8000b90:	2300      	movs	r3, #0
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	230f      	movs	r3, #15
 8000b96:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000b9a:	21eb      	movs	r1, #235	; 0xeb
 8000b9c:	2078      	movs	r0, #120	; 0x78
 8000b9e:	f000 fede 	bl	800195e <lcd_DrawCircle>

    // Vertical (led2)
    lcd_DrawCircle(44, 128, RED, 15, 0);
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	230f      	movs	r3, #15
 8000ba8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000bac:	2180      	movs	r1, #128	; 0x80
 8000bae:	202c      	movs	r0, #44	; 0x2c
 8000bb0:	f000 fed5 	bl	800195e <lcd_DrawCircle>
    lcd_DrawCircle(44, 160, YELLOW, 15, 0);
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	230f      	movs	r3, #15
 8000bba:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000bbe:	21a0      	movs	r1, #160	; 0xa0
 8000bc0:	202c      	movs	r0, #44	; 0x2c
 8000bc2:	f000 fecc 	bl	800195e <lcd_DrawCircle>
    lcd_DrawCircle(44, 192, GREEN, 15, 0);
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	230f      	movs	r3, #15
 8000bcc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000bd0:	21c0      	movs	r1, #192	; 0xc0
 8000bd2:	202c      	movs	r0, #44	; 0x2c
 8000bd4:	f000 fec3 	bl	800195e <lcd_DrawCircle>

    lcd_DrawCircle(196, 128, RED, 15, 0);
 8000bd8:	2300      	movs	r3, #0
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	230f      	movs	r3, #15
 8000bde:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000be2:	2180      	movs	r1, #128	; 0x80
 8000be4:	20c4      	movs	r0, #196	; 0xc4
 8000be6:	f000 feba 	bl	800195e <lcd_DrawCircle>
    lcd_DrawCircle(196, 160, YELLOW, 15, 0);
 8000bea:	2300      	movs	r3, #0
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	230f      	movs	r3, #15
 8000bf0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000bf4:	21a0      	movs	r1, #160	; 0xa0
 8000bf6:	20c4      	movs	r0, #196	; 0xc4
 8000bf8:	f000 feb1 	bl	800195e <lcd_DrawCircle>
    lcd_DrawCircle(196, 192, GREEN, 15, 0);
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	230f      	movs	r3, #15
 8000c02:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000c06:	21c0      	movs	r1, #192	; 0xc0
 8000c08:	20c4      	movs	r0, #196	; 0xc4
 8000c0a:	f000 fea8 	bl	800195e <lcd_DrawCircle>
    toggle_check = 1;
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <toggleLED+0x1bc>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	e000      	b.n	8000c18 <toggleLED+0x1ac>
	if(toggle_check) return;
 8000c16:	bf00      	nop
}
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200000d4 	.word	0x200000d4
 8000c24:	20000070 	.word	0x20000070
 8000c28:	20000074 	.word	0x20000074
 8000c2c:	08004548 	.word	0x08004548
 8000c30:	080074d4 	.word	0x080074d4

08000c34 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08e      	sub	sp, #56	; 0x38
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]
 8000c4a:	615a      	str	r2, [r3, #20]
 8000c4c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
 8000c5c:	615a      	str	r2, [r3, #20]
 8000c5e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000c60:	4b2f      	ldr	r3, [pc, #188]	; (8000d20 <MX_FSMC_Init+0xec>)
 8000c62:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000c66:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000c68:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <MX_FSMC_Init+0xec>)
 8000c6a:	4a2e      	ldr	r2, [pc, #184]	; (8000d24 <MX_FSMC_Init+0xf0>)
 8000c6c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000c6e:	4b2c      	ldr	r3, [pc, #176]	; (8000d20 <MX_FSMC_Init+0xec>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000c74:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <MX_FSMC_Init+0xec>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000c7a:	4b29      	ldr	r3, [pc, #164]	; (8000d20 <MX_FSMC_Init+0xec>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000c80:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <MX_FSMC_Init+0xec>)
 8000c82:	2210      	movs	r2, #16
 8000c84:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000c86:	4b26      	ldr	r3, [pc, #152]	; (8000d20 <MX_FSMC_Init+0xec>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000c8c:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <MX_FSMC_Init+0xec>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000c92:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <MX_FSMC_Init+0xec>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000c98:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <MX_FSMC_Init+0xec>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000c9e:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <MX_FSMC_Init+0xec>)
 8000ca0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ca4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <MX_FSMC_Init+0xec>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000cac:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <MX_FSMC_Init+0xec>)
 8000cae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <MX_FSMC_Init+0xec>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <MX_FSMC_Init+0xec>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <MX_FSMC_Init+0xec>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000cc6:	230f      	movs	r3, #15
 8000cc8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000cca:	230f      	movs	r3, #15
 8000ccc:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000cce:	233c      	movs	r3, #60	; 0x3c
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000cd6:	2310      	movs	r3, #16
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000cda:	2311      	movs	r3, #17
 8000cdc:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000ce2:	2308      	movs	r3, #8
 8000ce4:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000ce6:	230f      	movs	r3, #15
 8000ce8:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000cea:	2309      	movs	r3, #9
 8000cec:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000cf2:	2310      	movs	r3, #16
 8000cf4:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000cf6:	2311      	movs	r3, #17
 8000cf8:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000cfe:	463a      	mov	r2, r7
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4619      	mov	r1, r3
 8000d06:	4806      	ldr	r0, [pc, #24]	; (8000d20 <MX_FSMC_Init+0xec>)
 8000d08:	f002 fe50 	bl	80039ac <HAL_SRAM_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000d12:	f001 f807 	bl	8001d24 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000d16:	bf00      	nop
 8000d18:	3738      	adds	r7, #56	; 0x38
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000078 	.word	0x20000078
 8000d24:	a0000104 	.word	0xa0000104

08000d28 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <HAL_FSMC_MspInit+0x88>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d131      	bne.n	8000da8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <HAL_FSMC_MspInit+0x88>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	603b      	str	r3, [r7, #0]
 8000d4e:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <HAL_FSMC_MspInit+0x8c>)
 8000d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d52:	4a18      	ldr	r2, [pc, #96]	; (8000db4 <HAL_FSMC_MspInit+0x8c>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6393      	str	r3, [r2, #56]	; 0x38
 8000d5a:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <HAL_FSMC_MspInit+0x8c>)
 8000d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000d66:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000d6a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000d78:	230c      	movs	r3, #12
 8000d7a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <HAL_FSMC_MspInit+0x90>)
 8000d82:	f001 fb8d 	bl	80024a0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000d86:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000d8a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000d98:	230c      	movs	r3, #12
 8000d9a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4806      	ldr	r0, [pc, #24]	; (8000dbc <HAL_FSMC_MspInit+0x94>)
 8000da2:	f001 fb7d 	bl	80024a0 <HAL_GPIO_Init>
 8000da6:	e000      	b.n	8000daa <HAL_FSMC_MspInit+0x82>
    return;
 8000da8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200000c8 	.word	0x200000c8
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	40020c00 	.word	0x40020c00

08000dc0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000dc8:	f7ff ffae 	bl	8000d28 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08c      	sub	sp, #48	; 0x30
 8000dd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
 8000de8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
 8000dee:	4b6f      	ldr	r3, [pc, #444]	; (8000fac <MX_GPIO_Init+0x1d8>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a6e      	ldr	r2, [pc, #440]	; (8000fac <MX_GPIO_Init+0x1d8>)
 8000df4:	f043 0310 	orr.w	r3, r3, #16
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b6c      	ldr	r3, [pc, #432]	; (8000fac <MX_GPIO_Init+0x1d8>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0310 	and.w	r3, r3, #16
 8000e02:	61bb      	str	r3, [r7, #24]
 8000e04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	4b68      	ldr	r3, [pc, #416]	; (8000fac <MX_GPIO_Init+0x1d8>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a67      	ldr	r2, [pc, #412]	; (8000fac <MX_GPIO_Init+0x1d8>)
 8000e10:	f043 0304 	orr.w	r3, r3, #4
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b65      	ldr	r3, [pc, #404]	; (8000fac <MX_GPIO_Init+0x1d8>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0304 	and.w	r3, r3, #4
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	4b61      	ldr	r3, [pc, #388]	; (8000fac <MX_GPIO_Init+0x1d8>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a60      	ldr	r2, [pc, #384]	; (8000fac <MX_GPIO_Init+0x1d8>)
 8000e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b5e      	ldr	r3, [pc, #376]	; (8000fac <MX_GPIO_Init+0x1d8>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b5a      	ldr	r3, [pc, #360]	; (8000fac <MX_GPIO_Init+0x1d8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a59      	ldr	r2, [pc, #356]	; (8000fac <MX_GPIO_Init+0x1d8>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b57      	ldr	r3, [pc, #348]	; (8000fac <MX_GPIO_Init+0x1d8>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	4b53      	ldr	r3, [pc, #332]	; (8000fac <MX_GPIO_Init+0x1d8>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a52      	ldr	r2, [pc, #328]	; (8000fac <MX_GPIO_Init+0x1d8>)
 8000e64:	f043 0308 	orr.w	r3, r3, #8
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b50      	ldr	r3, [pc, #320]	; (8000fac <MX_GPIO_Init+0x1d8>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0308 	and.w	r3, r3, #8
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	4b4c      	ldr	r3, [pc, #304]	; (8000fac <MX_GPIO_Init+0x1d8>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a4b      	ldr	r2, [pc, #300]	; (8000fac <MX_GPIO_Init+0x1d8>)
 8000e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b49      	ldr	r3, [pc, #292]	; (8000fac <MX_GPIO_Init+0x1d8>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	603b      	str	r3, [r7, #0]
 8000e96:	4b45      	ldr	r3, [pc, #276]	; (8000fac <MX_GPIO_Init+0x1d8>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a44      	ldr	r2, [pc, #272]	; (8000fac <MX_GPIO_Init+0x1d8>)
 8000e9c:	f043 0302 	orr.w	r3, r3, #2
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b42      	ldr	r3, [pc, #264]	; (8000fac <MX_GPIO_Init+0x1d8>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2170      	movs	r1, #112	; 0x70
 8000eb2:	483f      	ldr	r0, [pc, #252]	; (8000fb0 <MX_GPIO_Init+0x1dc>)
 8000eb4:	f001 fc90 	bl	80027d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ebe:	483d      	ldr	r0, [pc, #244]	; (8000fb4 <MX_GPIO_Init+0x1e0>)
 8000ec0:	f001 fc8a 	bl	80027d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2140      	movs	r1, #64	; 0x40
 8000ec8:	483b      	ldr	r0, [pc, #236]	; (8000fb8 <MX_GPIO_Init+0x1e4>)
 8000eca:	f001 fc85 	bl	80027d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed4:	4839      	ldr	r0, [pc, #228]	; (8000fbc <MX_GPIO_Init+0x1e8>)
 8000ed6:	f001 fc7f 	bl	80027d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2108      	movs	r1, #8
 8000ede:	4838      	ldr	r0, [pc, #224]	; (8000fc0 <MX_GPIO_Init+0x1ec>)
 8000ee0:	f001 fc7a 	bl	80027d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000ee4:	2370      	movs	r3, #112	; 0x70
 8000ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	4619      	mov	r1, r3
 8000efa:	482d      	ldr	r0, [pc, #180]	; (8000fb0 <MX_GPIO_Init+0x1dc>)
 8000efc:	f001 fad0 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000f00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	4619      	mov	r1, r3
 8000f18:	4826      	ldr	r0, [pc, #152]	; (8000fb4 <MX_GPIO_Init+0x1e0>)
 8000f1a:	f001 fac1 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000f1e:	23c0      	movs	r3, #192	; 0xc0
 8000f20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f22:	2300      	movs	r3, #0
 8000f24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4822      	ldr	r0, [pc, #136]	; (8000fbc <MX_GPIO_Init+0x1e8>)
 8000f32:	f001 fab5 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000f36:	2330      	movs	r3, #48	; 0x30
 8000f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	4619      	mov	r1, r3
 8000f48:	481a      	ldr	r0, [pc, #104]	; (8000fb4 <MX_GPIO_Init+0x1e0>)
 8000f4a:	f001 faa9 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000f4e:	2340      	movs	r3, #64	; 0x40
 8000f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	4814      	ldr	r0, [pc, #80]	; (8000fb8 <MX_GPIO_Init+0x1e4>)
 8000f66:	f001 fa9b 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000f6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	4619      	mov	r1, r3
 8000f82:	480e      	ldr	r0, [pc, #56]	; (8000fbc <MX_GPIO_Init+0x1e8>)
 8000f84:	f001 fa8c 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000f88:	2308      	movs	r3, #8
 8000f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4808      	ldr	r0, [pc, #32]	; (8000fc0 <MX_GPIO_Init+0x1ec>)
 8000fa0:	f001 fa7e 	bl	80024a0 <HAL_GPIO_Init>

}
 8000fa4:	bf00      	nop
 8000fa6:	3730      	adds	r7, #48	; 0x30
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	40021800 	.word	0x40021800
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	40020c00 	.word	0x40020c00

08000fc4 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000fce:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <LCD_WR_REG+0x1c>)
 8000fd0:	88fb      	ldrh	r3, [r7, #6]
 8000fd2:	8013      	strh	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	600ffffe 	.word	0x600ffffe

08000fe4 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000fee:	4a04      	ldr	r2, [pc, #16]	; (8001000 <LCD_WR_DATA+0x1c>)
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	8053      	strh	r3, [r2, #2]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	600ffffe 	.word	0x600ffffe

08001004 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <LCD_RD_DATA+0x20>)
 800100c:	885b      	ldrh	r3, [r3, #2]
 800100e:	b29b      	uxth	r3, r3
 8001010:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	b29b      	uxth	r3, r3
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	600ffffe 	.word	0x600ffffe

08001028 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4604      	mov	r4, r0
 8001030:	4608      	mov	r0, r1
 8001032:	4611      	mov	r1, r2
 8001034:	461a      	mov	r2, r3
 8001036:	4623      	mov	r3, r4
 8001038:	80fb      	strh	r3, [r7, #6]
 800103a:	4603      	mov	r3, r0
 800103c:	80bb      	strh	r3, [r7, #4]
 800103e:	460b      	mov	r3, r1
 8001040:	807b      	strh	r3, [r7, #2]
 8001042:	4613      	mov	r3, r2
 8001044:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001046:	202a      	movs	r0, #42	; 0x2a
 8001048:	f7ff ffbc 	bl	8000fc4 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	0a1b      	lsrs	r3, r3, #8
 8001050:	b29b      	uxth	r3, r3
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ffc6 	bl	8000fe4 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	b29b      	uxth	r3, r3
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ffc0 	bl	8000fe4 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001064:	887b      	ldrh	r3, [r7, #2]
 8001066:	0a1b      	lsrs	r3, r3, #8
 8001068:	b29b      	uxth	r3, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ffba 	bl	8000fe4 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001070:	887b      	ldrh	r3, [r7, #2]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	b29b      	uxth	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ffb4 	bl	8000fe4 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 800107c:	202b      	movs	r0, #43	; 0x2b
 800107e:	f7ff ffa1 	bl	8000fc4 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001082:	88bb      	ldrh	r3, [r7, #4]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	b29b      	uxth	r3, r3
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ffab 	bl	8000fe4 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800108e:	88bb      	ldrh	r3, [r7, #4]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	b29b      	uxth	r3, r3
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ffa5 	bl	8000fe4 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800109a:	883b      	ldrh	r3, [r7, #0]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	b29b      	uxth	r3, r3
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff9f 	bl	8000fe4 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80010a6:	883b      	ldrh	r3, [r7, #0]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff99 	bl	8000fe4 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80010b2:	202c      	movs	r0, #44	; 0x2c
 80010b4:	f7ff ff86 	bl	8000fc4 <LCD_WR_REG>
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd90      	pop	{r4, r7, pc}

080010c0 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <lcd_Clear+0x60>)
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <lcd_Clear+0x60>)
 80010d4:	885b      	ldrh	r3, [r3, #2]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	b29b      	uxth	r3, r3
 80010da:	2100      	movs	r1, #0
 80010dc:	2000      	movs	r0, #0
 80010de:	f7ff ffa3 	bl	8001028 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	81fb      	strh	r3, [r7, #14]
 80010e6:	e011      	b.n	800110c <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 80010e8:	2300      	movs	r3, #0
 80010ea:	81bb      	strh	r3, [r7, #12]
 80010ec:	e006      	b.n	80010fc <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ff77 	bl	8000fe4 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80010f6:	89bb      	ldrh	r3, [r7, #12]
 80010f8:	3301      	adds	r3, #1
 80010fa:	81bb      	strh	r3, [r7, #12]
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <lcd_Clear+0x60>)
 80010fe:	885b      	ldrh	r3, [r3, #2]
 8001100:	89ba      	ldrh	r2, [r7, #12]
 8001102:	429a      	cmp	r2, r3
 8001104:	d3f3      	bcc.n	80010ee <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8001106:	89fb      	ldrh	r3, [r7, #14]
 8001108:	3301      	adds	r3, #1
 800110a:	81fb      	strh	r3, [r7, #14]
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <lcd_Clear+0x60>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	89fa      	ldrh	r2, [r7, #14]
 8001112:	429a      	cmp	r2, r3
 8001114:	d3e8      	bcc.n	80010e8 <lcd_Clear+0x28>
		}
	}
}
 8001116:	bf00      	nop
 8001118:	bf00      	nop
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200000cc 	.word	0x200000cc

08001124 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8001124:	b590      	push	{r4, r7, lr}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	4604      	mov	r4, r0
 800112c:	4608      	mov	r0, r1
 800112e:	4611      	mov	r1, r2
 8001130:	461a      	mov	r2, r3
 8001132:	4623      	mov	r3, r4
 8001134:	80fb      	strh	r3, [r7, #6]
 8001136:	4603      	mov	r3, r0
 8001138:	80bb      	strh	r3, [r7, #4]
 800113a:	460b      	mov	r3, r1
 800113c:	807b      	strh	r3, [r7, #2]
 800113e:	4613      	mov	r3, r2
 8001140:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8001142:	887b      	ldrh	r3, [r7, #2]
 8001144:	3b01      	subs	r3, #1
 8001146:	b29a      	uxth	r2, r3
 8001148:	883b      	ldrh	r3, [r7, #0]
 800114a:	3b01      	subs	r3, #1
 800114c:	b29b      	uxth	r3, r3
 800114e:	88b9      	ldrh	r1, [r7, #4]
 8001150:	88f8      	ldrh	r0, [r7, #6]
 8001152:	f7ff ff69 	bl	8001028 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8001156:	88bb      	ldrh	r3, [r7, #4]
 8001158:	81fb      	strh	r3, [r7, #14]
 800115a:	e010      	b.n	800117e <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	81bb      	strh	r3, [r7, #12]
 8001160:	e006      	b.n	8001170 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8001162:	8c3b      	ldrh	r3, [r7, #32]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff3d 	bl	8000fe4 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 800116a:	89bb      	ldrh	r3, [r7, #12]
 800116c:	3301      	adds	r3, #1
 800116e:	81bb      	strh	r3, [r7, #12]
 8001170:	89ba      	ldrh	r2, [r7, #12]
 8001172:	887b      	ldrh	r3, [r7, #2]
 8001174:	429a      	cmp	r2, r3
 8001176:	d3f4      	bcc.n	8001162 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8001178:	89fb      	ldrh	r3, [r7, #14]
 800117a:	3301      	adds	r3, #1
 800117c:	81fb      	strh	r3, [r7, #14]
 800117e:	89fa      	ldrh	r2, [r7, #14]
 8001180:	883b      	ldrh	r3, [r7, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d3ea      	bcc.n	800115c <lcd_Fill+0x38>
		}
	}
}
 8001186:	bf00      	nop
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bd90      	pop	{r4, r7, pc}

08001190 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	80fb      	strh	r3, [r7, #6]
 800119a:	460b      	mov	r3, r1
 800119c:	80bb      	strh	r3, [r7, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80011a2:	88bb      	ldrh	r3, [r7, #4]
 80011a4:	88fa      	ldrh	r2, [r7, #6]
 80011a6:	88b9      	ldrh	r1, [r7, #4]
 80011a8:	88f8      	ldrh	r0, [r7, #6]
 80011aa:	f7ff ff3d 	bl	8001028 <lcd_AddressSet>
	LCD_WR_DATA(color);
 80011ae:	887b      	ldrh	r3, [r7, #2]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff17 	bl	8000fe4 <LCD_WR_DATA>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b087      	sub	sp, #28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4604      	mov	r4, r0
 80011c8:	4608      	mov	r0, r1
 80011ca:	4611      	mov	r1, r2
 80011cc:	461a      	mov	r2, r3
 80011ce:	4623      	mov	r3, r4
 80011d0:	80fb      	strh	r3, [r7, #6]
 80011d2:	4603      	mov	r3, r0
 80011d4:	80bb      	strh	r3, [r7, #4]
 80011d6:	460b      	mov	r3, r1
 80011d8:	70fb      	strb	r3, [r7, #3]
 80011da:	4613      	mov	r3, r2
 80011dc:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80011de:	2300      	movs	r3, #0
 80011e0:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80011e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011ea:	085b      	lsrs	r3, r3, #1
 80011ec:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	08db      	lsrs	r3, r3, #3
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	461a      	mov	r2, r3
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	f003 0307 	and.w	r3, r3, #7
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	bf14      	ite	ne
 8001202:	2301      	movne	r3, #1
 8001204:	2300      	moveq	r3, #0
 8001206:	b2db      	uxtb	r3, r3
 8001208:	4413      	add	r3, r2
 800120a:	b29a      	uxth	r2, r3
 800120c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001210:	b29b      	uxth	r3, r3
 8001212:	fb12 f303 	smulbb	r3, r2, r3
 8001216:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	3b20      	subs	r3, #32
 800121c:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	b29a      	uxth	r2, r3
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	4413      	add	r3, r2
 8001226:	b29b      	uxth	r3, r3
 8001228:	3b01      	subs	r3, #1
 800122a:	b29c      	uxth	r4, r3
 800122c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001230:	b29a      	uxth	r2, r3
 8001232:	88bb      	ldrh	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	b29b      	uxth	r3, r3
 8001238:	3b01      	subs	r3, #1
 800123a:	b29b      	uxth	r3, r3
 800123c:	88b9      	ldrh	r1, [r7, #4]
 800123e:	88f8      	ldrh	r0, [r7, #6]
 8001240:	4622      	mov	r2, r4
 8001242:	f7ff fef1 	bl	8001028 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001246:	2300      	movs	r3, #0
 8001248:	827b      	strh	r3, [r7, #18]
 800124a:	e07a      	b.n	8001342 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 800124c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001250:	2b0c      	cmp	r3, #12
 8001252:	d028      	beq.n	80012a6 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001254:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001258:	2b10      	cmp	r3, #16
 800125a:	d108      	bne.n	800126e <lcd_ShowChar+0xae>
 800125c:	78fa      	ldrb	r2, [r7, #3]
 800125e:	8a7b      	ldrh	r3, [r7, #18]
 8001260:	493c      	ldr	r1, [pc, #240]	; (8001354 <lcd_ShowChar+0x194>)
 8001262:	0112      	lsls	r2, r2, #4
 8001264:	440a      	add	r2, r1
 8001266:	4413      	add	r3, r2
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	75fb      	strb	r3, [r7, #23]
 800126c:	e01b      	b.n	80012a6 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 800126e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001272:	2b18      	cmp	r3, #24
 8001274:	d10b      	bne.n	800128e <lcd_ShowChar+0xce>
 8001276:	78fa      	ldrb	r2, [r7, #3]
 8001278:	8a79      	ldrh	r1, [r7, #18]
 800127a:	4837      	ldr	r0, [pc, #220]	; (8001358 <lcd_ShowChar+0x198>)
 800127c:	4613      	mov	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4413      	add	r3, r2
 8001282:	011b      	lsls	r3, r3, #4
 8001284:	4403      	add	r3, r0
 8001286:	440b      	add	r3, r1
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	75fb      	strb	r3, [r7, #23]
 800128c:	e00b      	b.n	80012a6 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 800128e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001292:	2b20      	cmp	r3, #32
 8001294:	d15a      	bne.n	800134c <lcd_ShowChar+0x18c>
 8001296:	78fa      	ldrb	r2, [r7, #3]
 8001298:	8a7b      	ldrh	r3, [r7, #18]
 800129a:	4930      	ldr	r1, [pc, #192]	; (800135c <lcd_ShowChar+0x19c>)
 800129c:	0192      	lsls	r2, r2, #6
 800129e:	440a      	add	r2, r1
 80012a0:	4413      	add	r3, r2
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	75bb      	strb	r3, [r7, #22]
 80012aa:	e044      	b.n	8001336 <lcd_ShowChar+0x176>
		{
			if(!mode)
 80012ac:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d120      	bne.n	80012f6 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80012b4:	7dfa      	ldrb	r2, [r7, #23]
 80012b6:	7dbb      	ldrb	r3, [r7, #22]
 80012b8:	fa42 f303 	asr.w	r3, r2, r3
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d004      	beq.n	80012ce <lcd_ShowChar+0x10e>
 80012c4:	883b      	ldrh	r3, [r7, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fe8c 	bl	8000fe4 <LCD_WR_DATA>
 80012cc:	e003      	b.n	80012d6 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80012ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fe87 	bl	8000fe4 <LCD_WR_DATA>
				m++;
 80012d6:	7d7b      	ldrb	r3, [r7, #21]
 80012d8:	3301      	adds	r3, #1
 80012da:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80012dc:	7d7b      	ldrb	r3, [r7, #21]
 80012de:	7bfa      	ldrb	r2, [r7, #15]
 80012e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80012e4:	fb01 f202 	mul.w	r2, r1, r2
 80012e8:	1a9b      	subs	r3, r3, r2
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d11f      	bne.n	8001330 <lcd_ShowChar+0x170>
				{
					m=0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	757b      	strb	r3, [r7, #21]
					break;
 80012f4:	e022      	b.n	800133c <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80012f6:	7dfa      	ldrb	r2, [r7, #23]
 80012f8:	7dbb      	ldrb	r3, [r7, #22]
 80012fa:	fa42 f303 	asr.w	r3, r2, r3
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d005      	beq.n	8001312 <lcd_ShowChar+0x152>
 8001306:	883a      	ldrh	r2, [r7, #0]
 8001308:	88b9      	ldrh	r1, [r7, #4]
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff3f 	bl	8001190 <lcd_DrawPoint>
				x++;
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	3301      	adds	r3, #1
 8001316:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001318:	88fa      	ldrh	r2, [r7, #6]
 800131a:	8a3b      	ldrh	r3, [r7, #16]
 800131c:	1ad2      	subs	r2, r2, r3
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	429a      	cmp	r2, r3
 8001322:	d105      	bne.n	8001330 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001324:	8a3b      	ldrh	r3, [r7, #16]
 8001326:	80fb      	strh	r3, [r7, #6]
					y++;
 8001328:	88bb      	ldrh	r3, [r7, #4]
 800132a:	3301      	adds	r3, #1
 800132c:	80bb      	strh	r3, [r7, #4]
					break;
 800132e:	e005      	b.n	800133c <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001330:	7dbb      	ldrb	r3, [r7, #22]
 8001332:	3301      	adds	r3, #1
 8001334:	75bb      	strb	r3, [r7, #22]
 8001336:	7dbb      	ldrb	r3, [r7, #22]
 8001338:	2b07      	cmp	r3, #7
 800133a:	d9b7      	bls.n	80012ac <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 800133c:	8a7b      	ldrh	r3, [r7, #18]
 800133e:	3301      	adds	r3, #1
 8001340:	827b      	strh	r3, [r7, #18]
 8001342:	8a7a      	ldrh	r2, [r7, #18]
 8001344:	89bb      	ldrh	r3, [r7, #12]
 8001346:	429a      	cmp	r2, r3
 8001348:	d380      	bcc.n	800124c <lcd_ShowChar+0x8c>
 800134a:	e000      	b.n	800134e <lcd_ShowChar+0x18e>
		else return;
 800134c:	bf00      	nop
				}
			}
		}
	}
}
 800134e:	371c      	adds	r7, #28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd90      	pop	{r4, r7, pc}
 8001354:	08004554 	.word	0x08004554
 8001358:	08004b44 	.word	0x08004b44
 800135c:	08005d14 	.word	0x08005d14

08001360 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	460a      	mov	r2, r1
 800136a:	71fb      	strb	r3, [r7, #7]
 800136c:	4613      	mov	r3, r2
 800136e:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001370:	2301      	movs	r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001374:	e004      	b.n	8001380 <mypow+0x20>
 8001376:	79fa      	ldrb	r2, [r7, #7]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	fb02 f303 	mul.w	r3, r2, r3
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	79bb      	ldrb	r3, [r7, #6]
 8001382:	1e5a      	subs	r2, r3, #1
 8001384:	71ba      	strb	r2, [r7, #6]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f5      	bne.n	8001376 <mypow+0x16>
	return result;
 800138a:	68fb      	ldr	r3, [r7, #12]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af04      	add	r7, sp, #16
 800139e:	4604      	mov	r4, r0
 80013a0:	4608      	mov	r0, r1
 80013a2:	4611      	mov	r1, r2
 80013a4:	461a      	mov	r2, r3
 80013a6:	4623      	mov	r3, r4
 80013a8:	80fb      	strh	r3, [r7, #6]
 80013aa:	4603      	mov	r3, r0
 80013ac:	80bb      	strh	r3, [r7, #4]
 80013ae:	460b      	mov	r3, r1
 80013b0:	807b      	strh	r3, [r7, #2]
 80013b2:	4613      	mov	r3, r2
 80013b4:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 80013ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013be:	085b      	lsrs	r3, r3, #1
 80013c0:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 80013c2:	2300      	movs	r3, #0
 80013c4:	73fb      	strb	r3, [r7, #15]
 80013c6:	e059      	b.n	800147c <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80013c8:	887c      	ldrh	r4, [r7, #2]
 80013ca:	787a      	ldrb	r2, [r7, #1]
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	3b01      	subs	r3, #1
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	4619      	mov	r1, r3
 80013d8:	200a      	movs	r0, #10
 80013da:	f7ff ffc1 	bl	8001360 <mypow>
 80013de:	4603      	mov	r3, r0
 80013e0:	fbb4 f1f3 	udiv	r1, r4, r3
 80013e4:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <lcd_ShowIntNum+0xf8>)
 80013e6:	fba3 2301 	umull	r2, r3, r3, r1
 80013ea:	08da      	lsrs	r2, r3, #3
 80013ec:	4613      	mov	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	1aca      	subs	r2, r1, r3
 80013f6:	4613      	mov	r3, r2
 80013f8:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80013fa:	7bbb      	ldrb	r3, [r7, #14]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d121      	bne.n	8001444 <lcd_ShowIntNum+0xac>
 8001400:	7bfa      	ldrb	r2, [r7, #15]
 8001402:	787b      	ldrb	r3, [r7, #1]
 8001404:	3b01      	subs	r3, #1
 8001406:	429a      	cmp	r2, r3
 8001408:	da1c      	bge.n	8001444 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 800140a:	7b3b      	ldrb	r3, [r7, #12]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d117      	bne.n	8001440 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	b29a      	uxth	r2, r3
 8001414:	7b7b      	ldrb	r3, [r7, #13]
 8001416:	b29b      	uxth	r3, r3
 8001418:	fb12 f303 	smulbb	r3, r2, r3
 800141c:	b29a      	uxth	r2, r3
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	4413      	add	r3, r2
 8001422:	b298      	uxth	r0, r3
 8001424:	8c3a      	ldrh	r2, [r7, #32]
 8001426:	88b9      	ldrh	r1, [r7, #4]
 8001428:	2300      	movs	r3, #0
 800142a:	9302      	str	r3, [sp, #8]
 800142c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001430:	9301      	str	r3, [sp, #4]
 8001432:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	4613      	mov	r3, r2
 8001438:	2220      	movs	r2, #32
 800143a:	f7ff fec1 	bl	80011c0 <lcd_ShowChar>
				continue;
 800143e:	e01a      	b.n	8001476 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001440:	2301      	movs	r3, #1
 8001442:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	b29a      	uxth	r2, r3
 8001448:	7b7b      	ldrb	r3, [r7, #13]
 800144a:	b29b      	uxth	r3, r3
 800144c:	fb12 f303 	smulbb	r3, r2, r3
 8001450:	b29a      	uxth	r2, r3
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	4413      	add	r3, r2
 8001456:	b298      	uxth	r0, r3
 8001458:	7b3b      	ldrb	r3, [r7, #12]
 800145a:	3330      	adds	r3, #48	; 0x30
 800145c:	b2da      	uxtb	r2, r3
 800145e:	8c3c      	ldrh	r4, [r7, #32]
 8001460:	88b9      	ldrh	r1, [r7, #4]
 8001462:	2300      	movs	r3, #0
 8001464:	9302      	str	r3, [sp, #8]
 8001466:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800146a:	9301      	str	r3, [sp, #4]
 800146c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	4623      	mov	r3, r4
 8001472:	f7ff fea5 	bl	80011c0 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	3301      	adds	r3, #1
 800147a:	73fb      	strb	r3, [r7, #15]
 800147c:	7bfa      	ldrb	r2, [r7, #15]
 800147e:	787b      	ldrb	r3, [r7, #1]
 8001480:	429a      	cmp	r2, r3
 8001482:	d3a1      	bcc.n	80013c8 <lcd_ShowIntNum+0x30>
	}
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	bd90      	pop	{r4, r7, pc}
 800148e:	bf00      	nop
 8001490:	cccccccd 	.word	0xcccccccd

08001494 <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b087      	sub	sp, #28
 8001498:	af00      	add	r7, sp, #0
 800149a:	4604      	mov	r4, r0
 800149c:	4608      	mov	r0, r1
 800149e:	4611      	mov	r1, r2
 80014a0:	461a      	mov	r2, r3
 80014a2:	4623      	mov	r3, r4
 80014a4:	80fb      	strh	r3, [r7, #6]
 80014a6:	4603      	mov	r3, r0
 80014a8:	80bb      	strh	r3, [r7, #4]
 80014aa:	460b      	mov	r3, r1
 80014ac:	807b      	strh	r3, [r7, #2]
 80014ae:	4613      	mov	r3, r2
 80014b0:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 80014b6:	88fa      	ldrh	r2, [r7, #6]
 80014b8:	887b      	ldrh	r3, [r7, #2]
 80014ba:	4413      	add	r3, r2
 80014bc:	b29b      	uxth	r3, r3
 80014be:	3b01      	subs	r3, #1
 80014c0:	b29c      	uxth	r4, r3
 80014c2:	88ba      	ldrh	r2, [r7, #4]
 80014c4:	883b      	ldrh	r3, [r7, #0]
 80014c6:	4413      	add	r3, r2
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	3b01      	subs	r3, #1
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	88b9      	ldrh	r1, [r7, #4]
 80014d0:	88f8      	ldrh	r0, [r7, #6]
 80014d2:	4622      	mov	r2, r4
 80014d4:	f7ff fda8 	bl	8001028 <lcd_AddressSet>
	for(i=0;i<length;i++)
 80014d8:	2300      	movs	r3, #0
 80014da:	82fb      	strh	r3, [r7, #22]
 80014dc:	e027      	b.n	800152e <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 80014de:	2300      	movs	r3, #0
 80014e0:	82bb      	strh	r3, [r7, #20]
 80014e2:	e01d      	b.n	8001520 <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014ea:	4413      	add	r3, r2
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	3301      	adds	r3, #1
 80014f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014f8:	4413      	add	r3, r2
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	b21a      	sxth	r2, r3
 8001504:	7bbb      	ldrb	r3, [r7, #14]
 8001506:	b21b      	sxth	r3, r3
 8001508:	4313      	orrs	r3, r2
 800150a:	b21b      	sxth	r3, r3
 800150c:	b29b      	uxth	r3, r3
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fd68 	bl	8000fe4 <LCD_WR_DATA>
			k++;
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	3301      	adds	r3, #1
 8001518:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 800151a:	8abb      	ldrh	r3, [r7, #20]
 800151c:	3301      	adds	r3, #1
 800151e:	82bb      	strh	r3, [r7, #20]
 8001520:	8aba      	ldrh	r2, [r7, #20]
 8001522:	883b      	ldrh	r3, [r7, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d3dd      	bcc.n	80014e4 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8001528:	8afb      	ldrh	r3, [r7, #22]
 800152a:	3301      	adds	r3, #1
 800152c:	82fb      	strh	r3, [r7, #22]
 800152e:	8afa      	ldrh	r2, [r7, #22]
 8001530:	887b      	ldrh	r3, [r7, #2]
 8001532:	429a      	cmp	r2, r3
 8001534:	d3d3      	bcc.n	80014de <lcd_ShowPicture+0x4a>
		}
	}
}
 8001536:	bf00      	nop
 8001538:	bf00      	nop
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd90      	pop	{r4, r7, pc}

08001540 <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	091b      	lsrs	r3, r3, #4
 800154e:	b2db      	uxtb	r3, r3
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d007      	beq.n	800156a <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <lcd_SetDir+0x44>)
 800155c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001560:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <lcd_SetDir+0x44>)
 8001564:	22f0      	movs	r2, #240	; 0xf0
 8001566:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001568:	e006      	b.n	8001578 <lcd_SetDir+0x38>
		lcddev.width=240;
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <lcd_SetDir+0x44>)
 800156c:	22f0      	movs	r2, #240	; 0xf0
 800156e:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <lcd_SetDir+0x44>)
 8001572:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001576:	805a      	strh	r2, [r3, #2]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	200000cc 	.word	0x200000cc

08001588 <lcd_init>:


void lcd_init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001592:	48aa      	ldr	r0, [pc, #680]	; (800183c <lcd_init+0x2b4>)
 8001594:	f001 f920 	bl	80027d8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001598:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800159c:	f000 fe4a 	bl	8002234 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80015a0:	2201      	movs	r2, #1
 80015a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a6:	48a5      	ldr	r0, [pc, #660]	; (800183c <lcd_init+0x2b4>)
 80015a8:	f001 f916 	bl	80027d8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80015ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015b0:	f000 fe40 	bl	8002234 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 80015b4:	2000      	movs	r0, #0
 80015b6:	f7ff ffc3 	bl	8001540 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80015ba:	20d3      	movs	r0, #211	; 0xd3
 80015bc:	f7ff fd02 	bl	8000fc4 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80015c0:	f7ff fd20 	bl	8001004 <LCD_RD_DATA>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b9d      	ldr	r3, [pc, #628]	; (8001840 <lcd_init+0x2b8>)
 80015ca:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80015cc:	f7ff fd1a 	bl	8001004 <LCD_RD_DATA>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b9a      	ldr	r3, [pc, #616]	; (8001840 <lcd_init+0x2b8>)
 80015d6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80015d8:	f7ff fd14 	bl	8001004 <LCD_RD_DATA>
 80015dc:	4603      	mov	r3, r0
 80015de:	461a      	mov	r2, r3
 80015e0:	4b97      	ldr	r3, [pc, #604]	; (8001840 <lcd_init+0x2b8>)
 80015e2:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80015e4:	4b96      	ldr	r3, [pc, #600]	; (8001840 <lcd_init+0x2b8>)
 80015e6:	889b      	ldrh	r3, [r3, #4]
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	4b94      	ldr	r3, [pc, #592]	; (8001840 <lcd_init+0x2b8>)
 80015ee:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80015f0:	f7ff fd08 	bl	8001004 <LCD_RD_DATA>
 80015f4:	4603      	mov	r3, r0
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b91      	ldr	r3, [pc, #580]	; (8001840 <lcd_init+0x2b8>)
 80015fa:	889b      	ldrh	r3, [r3, #4]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	b29a      	uxth	r2, r3
 8001600:	4b8f      	ldr	r3, [pc, #572]	; (8001840 <lcd_init+0x2b8>)
 8001602:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001604:	20cf      	movs	r0, #207	; 0xcf
 8001606:	f7ff fcdd 	bl	8000fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800160a:	2000      	movs	r0, #0
 800160c:	f7ff fcea 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001610:	20c1      	movs	r0, #193	; 0xc1
 8001612:	f7ff fce7 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001616:	2030      	movs	r0, #48	; 0x30
 8001618:	f7ff fce4 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 800161c:	20ed      	movs	r0, #237	; 0xed
 800161e:	f7ff fcd1 	bl	8000fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001622:	2064      	movs	r0, #100	; 0x64
 8001624:	f7ff fcde 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001628:	2003      	movs	r0, #3
 800162a:	f7ff fcdb 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800162e:	2012      	movs	r0, #18
 8001630:	f7ff fcd8 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001634:	2081      	movs	r0, #129	; 0x81
 8001636:	f7ff fcd5 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800163a:	20e8      	movs	r0, #232	; 0xe8
 800163c:	f7ff fcc2 	bl	8000fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001640:	2085      	movs	r0, #133	; 0x85
 8001642:	f7ff fccf 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001646:	2010      	movs	r0, #16
 8001648:	f7ff fccc 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 800164c:	207a      	movs	r0, #122	; 0x7a
 800164e:	f7ff fcc9 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001652:	20cb      	movs	r0, #203	; 0xcb
 8001654:	f7ff fcb6 	bl	8000fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001658:	2039      	movs	r0, #57	; 0x39
 800165a:	f7ff fcc3 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800165e:	202c      	movs	r0, #44	; 0x2c
 8001660:	f7ff fcc0 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001664:	2000      	movs	r0, #0
 8001666:	f7ff fcbd 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800166a:	2034      	movs	r0, #52	; 0x34
 800166c:	f7ff fcba 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001670:	2002      	movs	r0, #2
 8001672:	f7ff fcb7 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001676:	20f7      	movs	r0, #247	; 0xf7
 8001678:	f7ff fca4 	bl	8000fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 800167c:	2020      	movs	r0, #32
 800167e:	f7ff fcb1 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001682:	20ea      	movs	r0, #234	; 0xea
 8001684:	f7ff fc9e 	bl	8000fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001688:	2000      	movs	r0, #0
 800168a:	f7ff fcab 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800168e:	2000      	movs	r0, #0
 8001690:	f7ff fca8 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001694:	20c0      	movs	r0, #192	; 0xc0
 8001696:	f7ff fc95 	bl	8000fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800169a:	201b      	movs	r0, #27
 800169c:	f7ff fca2 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80016a0:	20c1      	movs	r0, #193	; 0xc1
 80016a2:	f7ff fc8f 	bl	8000fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80016a6:	2001      	movs	r0, #1
 80016a8:	f7ff fc9c 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80016ac:	20c5      	movs	r0, #197	; 0xc5
 80016ae:	f7ff fc89 	bl	8000fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80016b2:	2030      	movs	r0, #48	; 0x30
 80016b4:	f7ff fc96 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80016b8:	2030      	movs	r0, #48	; 0x30
 80016ba:	f7ff fc93 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80016be:	20c7      	movs	r0, #199	; 0xc7
 80016c0:	f7ff fc80 	bl	8000fc4 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80016c4:	20b7      	movs	r0, #183	; 0xb7
 80016c6:	f7ff fc8d 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80016ca:	2036      	movs	r0, #54	; 0x36
 80016cc:	f7ff fc7a 	bl	8000fc4 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 80016d0:	2008      	movs	r0, #8
 80016d2:	f7ff fc87 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80016d6:	203a      	movs	r0, #58	; 0x3a
 80016d8:	f7ff fc74 	bl	8000fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80016dc:	2055      	movs	r0, #85	; 0x55
 80016de:	f7ff fc81 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80016e2:	20b1      	movs	r0, #177	; 0xb1
 80016e4:	f7ff fc6e 	bl	8000fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80016e8:	2000      	movs	r0, #0
 80016ea:	f7ff fc7b 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80016ee:	201a      	movs	r0, #26
 80016f0:	f7ff fc78 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80016f4:	20b6      	movs	r0, #182	; 0xb6
 80016f6:	f7ff fc65 	bl	8000fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80016fa:	200a      	movs	r0, #10
 80016fc:	f7ff fc72 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001700:	20a2      	movs	r0, #162	; 0xa2
 8001702:	f7ff fc6f 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001706:	20f2      	movs	r0, #242	; 0xf2
 8001708:	f7ff fc5c 	bl	8000fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800170c:	2000      	movs	r0, #0
 800170e:	f7ff fc69 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001712:	2026      	movs	r0, #38	; 0x26
 8001714:	f7ff fc56 	bl	8000fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001718:	2001      	movs	r0, #1
 800171a:	f7ff fc63 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800171e:	20e0      	movs	r0, #224	; 0xe0
 8001720:	f7ff fc50 	bl	8000fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001724:	200f      	movs	r0, #15
 8001726:	f7ff fc5d 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800172a:	202a      	movs	r0, #42	; 0x2a
 800172c:	f7ff fc5a 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001730:	2028      	movs	r0, #40	; 0x28
 8001732:	f7ff fc57 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001736:	2008      	movs	r0, #8
 8001738:	f7ff fc54 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 800173c:	200e      	movs	r0, #14
 800173e:	f7ff fc51 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001742:	2008      	movs	r0, #8
 8001744:	f7ff fc4e 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001748:	2054      	movs	r0, #84	; 0x54
 800174a:	f7ff fc4b 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800174e:	20a9      	movs	r0, #169	; 0xa9
 8001750:	f7ff fc48 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001754:	2043      	movs	r0, #67	; 0x43
 8001756:	f7ff fc45 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800175a:	200a      	movs	r0, #10
 800175c:	f7ff fc42 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001760:	200f      	movs	r0, #15
 8001762:	f7ff fc3f 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001766:	2000      	movs	r0, #0
 8001768:	f7ff fc3c 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800176c:	2000      	movs	r0, #0
 800176e:	f7ff fc39 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001772:	2000      	movs	r0, #0
 8001774:	f7ff fc36 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001778:	2000      	movs	r0, #0
 800177a:	f7ff fc33 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800177e:	20e1      	movs	r0, #225	; 0xe1
 8001780:	f7ff fc20 	bl	8000fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001784:	2000      	movs	r0, #0
 8001786:	f7ff fc2d 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800178a:	2015      	movs	r0, #21
 800178c:	f7ff fc2a 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001790:	2017      	movs	r0, #23
 8001792:	f7ff fc27 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001796:	2007      	movs	r0, #7
 8001798:	f7ff fc24 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800179c:	2011      	movs	r0, #17
 800179e:	f7ff fc21 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80017a2:	2006      	movs	r0, #6
 80017a4:	f7ff fc1e 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80017a8:	202b      	movs	r0, #43	; 0x2b
 80017aa:	f7ff fc1b 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80017ae:	2056      	movs	r0, #86	; 0x56
 80017b0:	f7ff fc18 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80017b4:	203c      	movs	r0, #60	; 0x3c
 80017b6:	f7ff fc15 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80017ba:	2005      	movs	r0, #5
 80017bc:	f7ff fc12 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80017c0:	2010      	movs	r0, #16
 80017c2:	f7ff fc0f 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80017c6:	200f      	movs	r0, #15
 80017c8:	f7ff fc0c 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80017cc:	203f      	movs	r0, #63	; 0x3f
 80017ce:	f7ff fc09 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80017d2:	203f      	movs	r0, #63	; 0x3f
 80017d4:	f7ff fc06 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80017d8:	200f      	movs	r0, #15
 80017da:	f7ff fc03 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80017de:	202b      	movs	r0, #43	; 0x2b
 80017e0:	f7ff fbf0 	bl	8000fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80017e4:	2000      	movs	r0, #0
 80017e6:	f7ff fbfd 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80017ea:	2000      	movs	r0, #0
 80017ec:	f7ff fbfa 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80017f0:	2001      	movs	r0, #1
 80017f2:	f7ff fbf7 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80017f6:	203f      	movs	r0, #63	; 0x3f
 80017f8:	f7ff fbf4 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80017fc:	202a      	movs	r0, #42	; 0x2a
 80017fe:	f7ff fbe1 	bl	8000fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001802:	2000      	movs	r0, #0
 8001804:	f7ff fbee 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001808:	2000      	movs	r0, #0
 800180a:	f7ff fbeb 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800180e:	2000      	movs	r0, #0
 8001810:	f7ff fbe8 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001814:	20ef      	movs	r0, #239	; 0xef
 8001816:	f7ff fbe5 	bl	8000fe4 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800181a:	2011      	movs	r0, #17
 800181c:	f7ff fbd2 	bl	8000fc4 <LCD_WR_REG>
	HAL_Delay(120);
 8001820:	2078      	movs	r0, #120	; 0x78
 8001822:	f000 fd07 	bl	8002234 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001826:	2029      	movs	r0, #41	; 0x29
 8001828:	f7ff fbcc 	bl	8000fc4 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 800182c:	2201      	movs	r2, #1
 800182e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001832:	4804      	ldr	r0, [pc, #16]	; (8001844 <lcd_init+0x2bc>)
 8001834:	f000 ffd0 	bl	80027d8 <HAL_GPIO_WritePin>
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40020800 	.word	0x40020800
 8001840:	200000cc 	.word	0x200000cc
 8001844:	40020000 	.word	0x40020000

08001848 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	b29a      	uxth	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	b29b      	uxth	r3, r3
 800185e:	4413      	add	r3, r2
 8001860:	b298      	uxth	r0, r3
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	b29a      	uxth	r2, r3
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	b29b      	uxth	r3, r3
 800186a:	4413      	add	r3, r2
 800186c:	b29b      	uxth	r3, r3
 800186e:	8b3a      	ldrh	r2, [r7, #24]
 8001870:	4619      	mov	r1, r3
 8001872:	f7ff fc8d 	bl	8001190 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	b29a      	uxth	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	b29b      	uxth	r3, r3
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	b298      	uxth	r0, r3
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	b29a      	uxth	r2, r3
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	b29b      	uxth	r3, r3
 800188a:	4413      	add	r3, r2
 800188c:	b29b      	uxth	r3, r3
 800188e:	8b3a      	ldrh	r2, [r7, #24]
 8001890:	4619      	mov	r1, r3
 8001892:	f7ff fc7d 	bl	8001190 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	b29a      	uxth	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	b29b      	uxth	r3, r3
 800189e:	4413      	add	r3, r2
 80018a0:	b298      	uxth	r0, r3
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	8b3a      	ldrh	r2, [r7, #24]
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7ff fc6d 	bl	8001190 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	b298      	uxth	r0, r3
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	8b3a      	ldrh	r2, [r7, #24]
 80018d0:	4619      	mov	r1, r3
 80018d2:	f7ff fc5d 	bl	8001190 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	b29a      	uxth	r2, r3
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	4413      	add	r3, r2
 80018e0:	b298      	uxth	r0, r3
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	4413      	add	r3, r2
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	8b3a      	ldrh	r2, [r7, #24]
 80018f0:	4619      	mov	r1, r3
 80018f2:	f7ff fc4d 	bl	8001190 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	b298      	uxth	r0, r3
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	b29a      	uxth	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	b29b      	uxth	r3, r3
 800190a:	4413      	add	r3, r2
 800190c:	b29b      	uxth	r3, r3
 800190e:	8b3a      	ldrh	r2, [r7, #24]
 8001910:	4619      	mov	r1, r3
 8001912:	f7ff fc3d 	bl	8001190 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	b29a      	uxth	r2, r3
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b29b      	uxth	r3, r3
 800191e:	4413      	add	r3, r2
 8001920:	b298      	uxth	r0, r3
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	b29a      	uxth	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	b29b      	uxth	r3, r3
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	b29b      	uxth	r3, r3
 800192e:	8b3a      	ldrh	r2, [r7, #24]
 8001930:	4619      	mov	r1, r3
 8001932:	f7ff fc2d 	bl	8001190 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	b29a      	uxth	r2, r3
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	b29b      	uxth	r3, r3
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	b298      	uxth	r0, r3
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	b29a      	uxth	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	b29b      	uxth	r3, r3
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	b29b      	uxth	r3, r3
 800194e:	8b3a      	ldrh	r2, [r7, #24]
 8001950:	4619      	mov	r1, r3
 8001952:	f7ff fc1d 	bl	8001190 <lcd_DrawPoint>
}
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b08a      	sub	sp, #40	; 0x28
 8001962:	af02      	add	r7, sp, #8
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	603b      	str	r3, [r7, #0]
 800196a:	4613      	mov	r3, r2
 800196c:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	f1c3 0303 	rsb	r3, r3, #3
 800197e:	613b      	str	r3, [r7, #16]


	if (fill)
 8001980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001982:	2b00      	cmp	r3, #0
 8001984:	d04f      	beq.n	8001a26 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8001986:	e029      	b.n	80019dc <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	e00a      	b.n	80019a4 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	69fa      	ldr	r2, [r7, #28]
 8001996:	68b9      	ldr	r1, [r7, #8]
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f7ff ff55 	bl	8001848 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	3301      	adds	r3, #1
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	ddf0      	ble.n	800198e <lcd_DrawCircle+0x30>

			if (d < 0) {
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	da06      	bge.n	80019c0 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	009a      	lsls	r2, r3, #2
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	4413      	add	r3, r2
 80019ba:	3306      	adds	r3, #6
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	e00a      	b.n	80019d6 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 80019c0:	69fa      	ldr	r2, [r7, #28]
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	009a      	lsls	r2, r3, #2
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	4413      	add	r3, r2
 80019cc:	330a      	adds	r3, #10
 80019ce:	613b      	str	r3, [r7, #16]
				y--;
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	61bb      	str	r3, [r7, #24]
			}
			x++;
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3301      	adds	r3, #1
 80019da:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80019dc:	69fa      	ldr	r2, [r7, #28]
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	ddd1      	ble.n	8001988 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 80019e4:	e023      	b.n	8001a2e <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	69fa      	ldr	r2, [r7, #28]
 80019ee:	68b9      	ldr	r1, [r7, #8]
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f7ff ff29 	bl	8001848 <_draw_circle_8>
			if (d < 0) {
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	da06      	bge.n	8001a0a <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	009a      	lsls	r2, r3, #2
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4413      	add	r3, r2
 8001a04:	3306      	adds	r3, #6
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	e00a      	b.n	8001a20 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	009a      	lsls	r2, r3, #2
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	4413      	add	r3, r2
 8001a16:	330a      	adds	r3, #10
 8001a18:	613b      	str	r3, [r7, #16]
				y--;
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	61bb      	str	r3, [r7, #24]
			x++;
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	3301      	adds	r3, #1
 8001a24:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001a26:	69fa      	ldr	r2, [r7, #28]
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	dddb      	ble.n	80019e6 <lcd_DrawCircle+0x88>
}
 8001a2e:	bf00      	nop
 8001a30:	3720      	adds	r7, #32
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001a38:	b590      	push	{r4, r7, lr}
 8001a3a:	b08b      	sub	sp, #44	; 0x2c
 8001a3c:	af04      	add	r7, sp, #16
 8001a3e:	60ba      	str	r2, [r7, #8]
 8001a40:	461a      	mov	r2, r3
 8001a42:	4603      	mov	r3, r0
 8001a44:	81fb      	strh	r3, [r7, #14]
 8001a46:	460b      	mov	r3, r1
 8001a48:	81bb      	strh	r3, [r7, #12]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001a4e:	89fb      	ldrh	r3, [r7, #14]
 8001a50:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001a56:	e048      	b.n	8001aea <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001a58:	7dfb      	ldrb	r3, [r7, #23]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d145      	bne.n	8001aea <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001a5e:	89fa      	ldrh	r2, [r7, #14]
 8001a60:	4b26      	ldr	r3, [pc, #152]	; (8001afc <lcd_ShowStr+0xc4>)
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a6a:	085b      	lsrs	r3, r3, #1
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	1acb      	subs	r3, r1, r3
 8001a70:	429a      	cmp	r2, r3
 8001a72:	dc3f      	bgt.n	8001af4 <lcd_ShowStr+0xbc>
 8001a74:	89ba      	ldrh	r2, [r7, #12]
 8001a76:	4b21      	ldr	r3, [pc, #132]	; (8001afc <lcd_ShowStr+0xc4>)
 8001a78:	885b      	ldrh	r3, [r3, #2]
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a80:	1acb      	subs	r3, r1, r3
 8001a82:	429a      	cmp	r2, r3
 8001a84:	dc36      	bgt.n	8001af4 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b80      	cmp	r3, #128	; 0x80
 8001a8c:	d902      	bls.n	8001a94 <lcd_ShowStr+0x5c>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	75fb      	strb	r3, [r7, #23]
 8001a92:	e02a      	b.n	8001aea <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b0d      	cmp	r3, #13
 8001a9a:	d10b      	bne.n	8001ab4 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001a9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	89bb      	ldrh	r3, [r7, #12]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001aa8:	8abb      	ldrh	r3, [r7, #20]
 8001aaa:	81fb      	strh	r3, [r7, #14]
					str++;
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	e017      	b.n	8001ae4 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	88fc      	ldrh	r4, [r7, #6]
 8001aba:	89b9      	ldrh	r1, [r7, #12]
 8001abc:	89f8      	ldrh	r0, [r7, #14]
 8001abe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ac2:	9302      	str	r3, [sp, #8]
 8001ac4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ac8:	9301      	str	r3, [sp, #4]
 8001aca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	4623      	mov	r3, r4
 8001ad0:	f7ff fb76 	bl	80011c0 <lcd_ShowChar>
					x+=sizey/2;
 8001ad4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ad8:	085b      	lsrs	r3, r3, #1
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	89fb      	ldrh	r3, [r7, #14]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1b2      	bne.n	8001a58 <lcd_ShowStr+0x20>
 8001af2:	e000      	b.n	8001af6 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001af4:	bf00      	nop
			}
		}
	}
}
 8001af6:	371c      	adds	r7, #28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd90      	pop	{r4, r7, pc}
 8001afc:	200000cc 	.word	0x200000cc

08001b00 <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	; 0x28
 8001b04:	af04      	add	r7, sp, #16
 8001b06:	60ba      	str	r2, [r7, #8]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	81fb      	strh	r3, [r7, #14]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	81bb      	strh	r3, [r7, #12]
 8001b12:	4613      	mov	r3, r2
 8001b14:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8001b16:	68b8      	ldr	r0, [r7, #8]
 8001b18:	f7fe fb56 	bl	80001c8 <strlen>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <lcd_StrCenter+0x60>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	8afb      	ldrh	r3, [r7, #22]
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	0fda      	lsrs	r2, r3, #31
 8001b2e:	4413      	add	r3, r2
 8001b30:	105b      	asrs	r3, r3, #1
 8001b32:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8001b34:	89fa      	ldrh	r2, [r7, #14]
 8001b36:	8abb      	ldrh	r3, [r7, #20]
 8001b38:	4413      	add	r3, r2
 8001b3a:	b298      	uxth	r0, r3
 8001b3c:	88fa      	ldrh	r2, [r7, #6]
 8001b3e:	89b9      	ldrh	r1, [r7, #12]
 8001b40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b44:	9302      	str	r3, [sp, #8]
 8001b46:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b4a:	9301      	str	r3, [sp, #4]
 8001b4c:	8c3b      	ldrh	r3, [r7, #32]
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	4613      	mov	r3, r2
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	f7ff ff70 	bl	8001a38 <lcd_ShowStr>
}
 8001b58:	bf00      	nop
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	200000cc 	.word	0x200000cc

08001b64 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001b68:	2201      	movs	r2, #1
 8001b6a:	2140      	movs	r1, #64	; 0x40
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <led7_init+0x14>)
 8001b6e:	f000 fe33 	bl	80027d8 <HAL_GPIO_WritePin>
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40021800 	.word	0x40021800

08001b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b80:	f000 fae6 	bl	8002150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b84:	f000 f81a 	bl	8001bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b88:	f7ff f924 	bl	8000dd4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001b8c:	f000 fa44 	bl	8002018 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001b90:	f000 f956 	bl	8001e40 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001b94:	f7ff f84e 	bl	8000c34 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001b98:	f000 f87a 	bl	8001c90 <system_init>
  lcd_Clear(WHITE);
 8001b9c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ba0:	f7ff fa8e 	bl	80010c0 <lcd_Clear>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#include "global.h"
  timerBegin(1000);
 8001ba4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ba8:	f000 f922 	bl	8001df0 <timerBegin>
  while (1)
  {
//	  while(!flag_timer[2]);
//	  flag_timer[2] = 0;
	  button_Scan();
 8001bac:	f7fe fca2 	bl	80004f4 <button_Scan>
	  test_button();
 8001bb0:	f000 f890 	bl	8001cd4 <test_button>
	  fsm_for_input_processing();
 8001bb4:	f7fe fd0a 	bl	80005cc <fsm_for_input_processing>
  {
 8001bb8:	e7f8      	b.n	8001bac <main+0x30>
	...

08001bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b094      	sub	sp, #80	; 0x50
 8001bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bc2:	f107 0320 	add.w	r3, r7, #32
 8001bc6:	2230      	movs	r2, #48	; 0x30
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f002 fca8 	bl	8004520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd0:	f107 030c 	add.w	r3, r7, #12
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be0:	2300      	movs	r3, #0
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	4b28      	ldr	r3, [pc, #160]	; (8001c88 <SystemClock_Config+0xcc>)
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	4a27      	ldr	r2, [pc, #156]	; (8001c88 <SystemClock_Config+0xcc>)
 8001bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bee:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf0:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <SystemClock_Config+0xcc>)
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <SystemClock_Config+0xd0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a21      	ldr	r2, [pc, #132]	; (8001c8c <SystemClock_Config+0xd0>)
 8001c06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <SystemClock_Config+0xd0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c20:	2310      	movs	r3, #16
 8001c22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c24:	2302      	movs	r3, #2
 8001c26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c2c:	2308      	movs	r3, #8
 8001c2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c30:	23a8      	movs	r3, #168	; 0xa8
 8001c32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c34:	2302      	movs	r3, #2
 8001c36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c38:	2304      	movs	r3, #4
 8001c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c3c:	f107 0320 	add.w	r3, r7, #32
 8001c40:	4618      	mov	r0, r3
 8001c42:	f000 fde3 	bl	800280c <HAL_RCC_OscConfig>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c4c:	f000 f86a 	bl	8001d24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c50:	230f      	movs	r3, #15
 8001c52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c54:	2302      	movs	r3, #2
 8001c56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c5c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001c62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	2105      	movs	r1, #5
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f001 f844 	bl	8002cfc <HAL_RCC_ClockConfig>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c7a:	f000 f853 	bl	8001d24 <Error_Handler>
  }
}
 8001c7e:	bf00      	nop
 8001c80:	3750      	adds	r7, #80	; 0x50
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40007000 	.word	0x40007000

08001c90 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2120      	movs	r1, #32
 8001c98:	480d      	ldr	r0, [pc, #52]	; (8001cd0 <system_init+0x40>)
 8001c9a:	f000 fd9d 	bl	80027d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2140      	movs	r1, #64	; 0x40
 8001ca2:	480b      	ldr	r0, [pc, #44]	; (8001cd0 <system_init+0x40>)
 8001ca4:	f000 fd98 	bl	80027d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2110      	movs	r1, #16
 8001cac:	4808      	ldr	r0, [pc, #32]	; (8001cd0 <system_init+0x40>)
 8001cae:	f000 fd93 	bl	80027d8 <HAL_GPIO_WritePin>
	  timer_init();
 8001cb2:	f000 f83d 	bl	8001d30 <timer_init>
	  led7_init();
 8001cb6:	f7ff ff55 	bl	8001b64 <led7_init>
	  button_init();
 8001cba:	f7fe fc0f 	bl	80004dc <button_init>
	  lcd_init();
 8001cbe:	f7ff fc63 	bl	8001588 <lcd_init>
	  setTimer(50,2);
 8001cc2:	2102      	movs	r1, #2
 8001cc4:	2032      	movs	r0, #50	; 0x32
 8001cc6:	f000 f83d 	bl	8001d44 <setTimer>
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <test_button>:
	led7_SetDigit(0, 0, 0);
	led7_SetDigit(5, 1, 0);
	led7_SetDigit(4, 2, 0);
	led7_SetDigit(7, 3, 0);
}
void test_button(){
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af04      	add	r7, sp, #16
	for(int i = 0; i < 16; i++){
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	e017      	b.n	8001d10 <test_button+0x3c>
		if(button_count[i] == 1){
 8001ce0:	4a0f      	ldr	r2, [pc, #60]	; (8001d20 <test_button+0x4c>)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d10e      	bne.n	8001d0a <test_button+0x36>
			lcd_ShowIntNum(140, 105, i, 2, BRED, WHITE, 32);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	2320      	movs	r3, #32
 8001cf2:	9302      	str	r3, [sp, #8]
 8001cf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cf8:	9301      	str	r3, [sp, #4]
 8001cfa:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2302      	movs	r3, #2
 8001d02:	2169      	movs	r1, #105	; 0x69
 8001d04:	208c      	movs	r0, #140	; 0x8c
 8001d06:	f7ff fb47 	bl	8001398 <lcd_ShowIntNum>
	for(int i = 0; i < 16; i++){
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	607b      	str	r3, [r7, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b0f      	cmp	r3, #15
 8001d14:	dde4      	ble.n	8001ce0 <test_button+0xc>
		}
	}
}
 8001d16:	bf00      	nop
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000040 	.word	0x20000040

08001d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d28:	b672      	cpsid	i
}
 8001d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d2c:	e7fe      	b.n	8001d2c <Error_Handler+0x8>
	...

08001d30 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <timer_init+0x10>)
 8001d36:	f001 fecd 	bl	8003ad4 <HAL_TIM_Base_Start_IT>
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000144 	.word	0x20000144

08001d44 <setTimer>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer(uint16_t duration, int ID){
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	6039      	str	r1, [r7, #0]
 8001d4e:	80fb      	strh	r3, [r7, #6]
	timer_MUL[ID] = duration/TIMER_CYCLE;
 8001d50:	490b      	ldr	r1, [pc, #44]	; (8001d80 <setTimer+0x3c>)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	timer_counter[ID] = timer_MUL[ID];
 8001d5a:	4a09      	ldr	r2, [pc, #36]	; (8001d80 <setTimer+0x3c>)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001d62:	4a08      	ldr	r2, [pc, #32]	; (8001d84 <setTimer+0x40>)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	flag_timer[ID] = 0;
 8001d6a:	4a07      	ldr	r2, [pc, #28]	; (8001d88 <setTimer+0x44>)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	2100      	movs	r1, #0
 8001d70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	200000e4 	.word	0x200000e4
 8001d84:	200000dc 	.word	0x200000dc
 8001d88:	200000d4 	.word	0x200000d4

08001d8c <timerRun>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void timerRun(){
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
	for(int i = 0; i<MAX_TIMER;i++){
 8001d92:	2300      	movs	r3, #0
 8001d94:	607b      	str	r3, [r7, #4]
 8001d96:	e01d      	b.n	8001dd4 <timerRun+0x48>
		if(timer_counter[i] > 0){
 8001d98:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <timerRun+0x5c>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d014      	beq.n	8001dce <timerRun+0x42>
			timer_counter[i]--;
 8001da4:	4a10      	ldr	r2, [pc, #64]	; (8001de8 <timerRun+0x5c>)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	b299      	uxth	r1, r3
 8001db0:	4a0d      	ldr	r2, [pc, #52]	; (8001de8 <timerRun+0x5c>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(timer_counter[i] <= 0) {
 8001db8:	4a0b      	ldr	r2, [pc, #44]	; (8001de8 <timerRun+0x5c>)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d104      	bne.n	8001dce <timerRun+0x42>
				flag_timer[i] = 1;
 8001dc4:	4a09      	ldr	r2, [pc, #36]	; (8001dec <timerRun+0x60>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2101      	movs	r1, #1
 8001dca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i<MAX_TIMER;i++){
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	ddde      	ble.n	8001d98 <timerRun+0xc>
			}
		}
	}
}
 8001dda:	bf00      	nop
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	200000dc 	.word	0x200000dc
 8001dec:	200000d4 	.word	0x200000d4

08001df0 <timerBegin>:
void timerBegin(uint16_t duration){
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i<MAX_TIMER;i++) setTimer(duration, i);
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	e007      	b.n	8001e10 <timerBegin+0x20>
 8001e00:	88fb      	ldrh	r3, [r7, #6]
 8001e02:	68f9      	ldr	r1, [r7, #12]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff9d 	bl	8001d44 <setTimer>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	ddf4      	ble.n	8001e00 <timerBegin+0x10>
}
 8001e16:	bf00      	nop
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e30:	d101      	bne.n	8001e36 <HAL_TIM_PeriodElapsedCallback+0x16>
		timerRun();
 8001e32:	f7ff ffab 	bl	8001d8c <timerRun>
		// 1ms interrupt here
	}
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e44:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <MX_SPI1_Init+0x64>)
 8001e46:	4a18      	ldr	r2, [pc, #96]	; (8001ea8 <MX_SPI1_Init+0x68>)
 8001e48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e4a:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <MX_SPI1_Init+0x64>)
 8001e4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e52:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <MX_SPI1_Init+0x64>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <MX_SPI1_Init+0x64>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e5e:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <MX_SPI1_Init+0x64>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <MX_SPI1_Init+0x64>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <MX_SPI1_Init+0x64>)
 8001e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e72:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <MX_SPI1_Init+0x64>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e78:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <MX_SPI1_Init+0x64>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e7e:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <MX_SPI1_Init+0x64>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e84:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <MX_SPI1_Init+0x64>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <MX_SPI1_Init+0x64>)
 8001e8c:	220a      	movs	r2, #10
 8001e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e90:	4804      	ldr	r0, [pc, #16]	; (8001ea4 <MX_SPI1_Init+0x64>)
 8001e92:	f001 f91f 	bl	80030d4 <HAL_SPI_Init>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e9c:	f7ff ff42 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	200000ec 	.word	0x200000ec
 8001ea8:	40013000 	.word	0x40013000

08001eac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08a      	sub	sp, #40	; 0x28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a19      	ldr	r2, [pc, #100]	; (8001f30 <HAL_SPI_MspInit+0x84>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d12b      	bne.n	8001f26 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <HAL_SPI_MspInit+0x88>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	4a17      	ldr	r2, [pc, #92]	; (8001f34 <HAL_SPI_MspInit+0x88>)
 8001ed8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001edc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <HAL_SPI_MspInit+0x88>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <HAL_SPI_MspInit+0x88>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a10      	ldr	r2, [pc, #64]	; (8001f34 <HAL_SPI_MspInit+0x88>)
 8001ef4:	f043 0302 	orr.w	r3, r3, #2
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <HAL_SPI_MspInit+0x88>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001f06:	2338      	movs	r3, #56	; 0x38
 8001f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f12:	2303      	movs	r3, #3
 8001f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f16:	2305      	movs	r3, #5
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1a:	f107 0314 	add.w	r3, r7, #20
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4805      	ldr	r0, [pc, #20]	; (8001f38 <HAL_SPI_MspInit+0x8c>)
 8001f22:	f000 fabd 	bl	80024a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001f26:	bf00      	nop
 8001f28:	3728      	adds	r7, #40	; 0x28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40013000 	.word	0x40013000
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40020400 	.word	0x40020400

08001f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	4a0f      	ldr	r2, [pc, #60]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f50:	6453      	str	r3, [r2, #68]	; 0x44
 8001f52:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	603b      	str	r3, [r7, #0]
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	4a08      	ldr	r2, [pc, #32]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800

08001f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <NMI_Handler+0x4>

08001f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f96:	e7fe      	b.n	8001f96 <HardFault_Handler+0x4>

08001f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <MemManage_Handler+0x4>

08001f9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa2:	e7fe      	b.n	8001fa2 <BusFault_Handler+0x4>

08001fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <UsageFault_Handler+0x4>

08001faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd8:	f000 f90c 	bl	80021f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fe4:	4802      	ldr	r0, [pc, #8]	; (8001ff0 <TIM2_IRQHandler+0x10>)
 8001fe6:	f001 fde5 	bl	8003bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000144 	.word	0x20000144

08001ff4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <SystemInit+0x20>)
 8001ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffe:	4a05      	ldr	r2, [pc, #20]	; (8002014 <SystemInit+0x20>)
 8002000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002004:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800201e:	f107 0308 	add.w	r3, r7, #8
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800202c:	463b      	mov	r3, r7
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002034:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <MX_TIM2_Init+0x94>)
 8002036:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800203a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 800203c:	4b1b      	ldr	r3, [pc, #108]	; (80020ac <MX_TIM2_Init+0x94>)
 800203e:	f240 3247 	movw	r2, #839	; 0x347
 8002042:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002044:	4b19      	ldr	r3, [pc, #100]	; (80020ac <MX_TIM2_Init+0x94>)
 8002046:	2200      	movs	r2, #0
 8002048:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800204a:	4b18      	ldr	r3, [pc, #96]	; (80020ac <MX_TIM2_Init+0x94>)
 800204c:	2263      	movs	r2, #99	; 0x63
 800204e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002050:	4b16      	ldr	r3, [pc, #88]	; (80020ac <MX_TIM2_Init+0x94>)
 8002052:	2200      	movs	r2, #0
 8002054:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <MX_TIM2_Init+0x94>)
 8002058:	2200      	movs	r2, #0
 800205a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800205c:	4813      	ldr	r0, [pc, #76]	; (80020ac <MX_TIM2_Init+0x94>)
 800205e:	f001 fce9 	bl	8003a34 <HAL_TIM_Base_Init>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002068:	f7ff fe5c 	bl	8001d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800206c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002070:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002072:	f107 0308 	add.w	r3, r7, #8
 8002076:	4619      	mov	r1, r3
 8002078:	480c      	ldr	r0, [pc, #48]	; (80020ac <MX_TIM2_Init+0x94>)
 800207a:	f001 fea3 	bl	8003dc4 <HAL_TIM_ConfigClockSource>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002084:	f7ff fe4e 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002088:	2300      	movs	r3, #0
 800208a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002090:	463b      	mov	r3, r7
 8002092:	4619      	mov	r1, r3
 8002094:	4805      	ldr	r0, [pc, #20]	; (80020ac <MX_TIM2_Init+0x94>)
 8002096:	f002 f8bf 	bl	8004218 <HAL_TIMEx_MasterConfigSynchronization>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80020a0:	f7ff fe40 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020a4:	bf00      	nop
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20000144 	.word	0x20000144

080020b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c0:	d115      	bne.n	80020ee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <HAL_TIM_Base_MspInit+0x48>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	4a0b      	ldr	r2, [pc, #44]	; (80020f8 <HAL_TIM_Base_MspInit+0x48>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6413      	str	r3, [r2, #64]	; 0x40
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_TIM_Base_MspInit+0x48>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	201c      	movs	r0, #28
 80020e4:	f000 f9a5 	bl	8002432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020e8:	201c      	movs	r0, #28
 80020ea:	f000 f9be 	bl	800246a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800

080020fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002134 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002100:	480d      	ldr	r0, [pc, #52]	; (8002138 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002102:	490e      	ldr	r1, [pc, #56]	; (800213c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002104:	4a0e      	ldr	r2, [pc, #56]	; (8002140 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002108:	e002      	b.n	8002110 <LoopCopyDataInit>

0800210a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800210a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800210c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210e:	3304      	adds	r3, #4

08002110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002114:	d3f9      	bcc.n	800210a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002116:	4a0b      	ldr	r2, [pc, #44]	; (8002144 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002118:	4c0b      	ldr	r4, [pc, #44]	; (8002148 <LoopFillZerobss+0x26>)
  movs r3, #0
 800211a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800211c:	e001      	b.n	8002122 <LoopFillZerobss>

0800211e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002120:	3204      	adds	r2, #4

08002122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002124:	d3fb      	bcc.n	800211e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002126:	f7ff ff65 	bl	8001ff4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800212a:	f002 f9d5 	bl	80044d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800212e:	f7ff fd25 	bl	8001b7c <main>
  bx  lr    
 8002132:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002134:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800213c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8002140:	0800b43c 	.word	0x0800b43c
  ldr r2, =_sbss
 8002144:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8002148:	20000190 	.word	0x20000190

0800214c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800214c:	e7fe      	b.n	800214c <ADC_IRQHandler>
	...

08002150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002154:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <HAL_Init+0x40>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0d      	ldr	r2, [pc, #52]	; (8002190 <HAL_Init+0x40>)
 800215a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800215e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_Init+0x40>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <HAL_Init+0x40>)
 8002166:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800216a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <HAL_Init+0x40>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a07      	ldr	r2, [pc, #28]	; (8002190 <HAL_Init+0x40>)
 8002172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002176:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002178:	2003      	movs	r0, #3
 800217a:	f000 f94f 	bl	800241c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800217e:	200f      	movs	r0, #15
 8002180:	f000 f808 	bl	8002194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002184:	f7ff feda 	bl	8001f3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40023c00 	.word	0x40023c00

08002194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_InitTick+0x54>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_InitTick+0x58>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	4619      	mov	r1, r3
 80021a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 f967 	bl	8002486 <HAL_SYSTICK_Config>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e00e      	b.n	80021e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b0f      	cmp	r3, #15
 80021c6:	d80a      	bhi.n	80021de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c8:	2200      	movs	r2, #0
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295
 80021d0:	f000 f92f 	bl	8002432 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d4:	4a06      	ldr	r2, [pc, #24]	; (80021f0 <HAL_InitTick+0x5c>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	e000      	b.n	80021e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000018 	.word	0x20000018
 80021ec:	20000020 	.word	0x20000020
 80021f0:	2000001c 	.word	0x2000001c

080021f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_IncTick+0x20>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_IncTick+0x24>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4413      	add	r3, r2
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_IncTick+0x24>)
 8002206:	6013      	str	r3, [r2, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000020 	.word	0x20000020
 8002218:	2000018c 	.word	0x2000018c

0800221c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return uwTick;
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <HAL_GetTick+0x14>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	2000018c 	.word	0x2000018c

08002234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800223c:	f7ff ffee 	bl	800221c <HAL_GetTick>
 8002240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224c:	d005      	beq.n	800225a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <HAL_Delay+0x44>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4413      	add	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800225a:	bf00      	nop
 800225c:	f7ff ffde 	bl	800221c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	429a      	cmp	r2, r3
 800226a:	d8f7      	bhi.n	800225c <HAL_Delay+0x28>
  {
  }
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000020 	.word	0x20000020

0800227c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800228c:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002298:	4013      	ands	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ae:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	60d3      	str	r3, [r2, #12]
}
 80022b4:	bf00      	nop
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c8:	4b04      	ldr	r3, [pc, #16]	; (80022dc <__NVIC_GetPriorityGrouping+0x18>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	0a1b      	lsrs	r3, r3, #8
 80022ce:	f003 0307 	and.w	r3, r3, #7
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	db0b      	blt.n	800230a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	f003 021f 	and.w	r2, r3, #31
 80022f8:	4907      	ldr	r1, [pc, #28]	; (8002318 <__NVIC_EnableIRQ+0x38>)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	2001      	movs	r0, #1
 8002302:	fa00 f202 	lsl.w	r2, r0, r2
 8002306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	e000e100 	.word	0xe000e100

0800231c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	6039      	str	r1, [r7, #0]
 8002326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232c:	2b00      	cmp	r3, #0
 800232e:	db0a      	blt.n	8002346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	b2da      	uxtb	r2, r3
 8002334:	490c      	ldr	r1, [pc, #48]	; (8002368 <__NVIC_SetPriority+0x4c>)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	0112      	lsls	r2, r2, #4
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	440b      	add	r3, r1
 8002340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002344:	e00a      	b.n	800235c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4908      	ldr	r1, [pc, #32]	; (800236c <__NVIC_SetPriority+0x50>)
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	3b04      	subs	r3, #4
 8002354:	0112      	lsls	r2, r2, #4
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	440b      	add	r3, r1
 800235a:	761a      	strb	r2, [r3, #24]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000e100 	.word	0xe000e100
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002370:	b480      	push	{r7}
 8002372:	b089      	sub	sp, #36	; 0x24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f1c3 0307 	rsb	r3, r3, #7
 800238a:	2b04      	cmp	r3, #4
 800238c:	bf28      	it	cs
 800238e:	2304      	movcs	r3, #4
 8002390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3304      	adds	r3, #4
 8002396:	2b06      	cmp	r3, #6
 8002398:	d902      	bls.n	80023a0 <NVIC_EncodePriority+0x30>
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3b03      	subs	r3, #3
 800239e:	e000      	b.n	80023a2 <NVIC_EncodePriority+0x32>
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a4:	f04f 32ff 	mov.w	r2, #4294967295
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43da      	mvns	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	401a      	ands	r2, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b8:	f04f 31ff 	mov.w	r1, #4294967295
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	43d9      	mvns	r1, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c8:	4313      	orrs	r3, r2
         );
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3724      	adds	r7, #36	; 0x24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e8:	d301      	bcc.n	80023ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ea:	2301      	movs	r3, #1
 80023ec:	e00f      	b.n	800240e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ee:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <SysTick_Config+0x40>)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023f6:	210f      	movs	r1, #15
 80023f8:	f04f 30ff 	mov.w	r0, #4294967295
 80023fc:	f7ff ff8e 	bl	800231c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <SysTick_Config+0x40>)
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002406:	4b04      	ldr	r3, [pc, #16]	; (8002418 <SysTick_Config+0x40>)
 8002408:	2207      	movs	r2, #7
 800240a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	e000e010 	.word	0xe000e010

0800241c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff ff29 	bl	800227c <__NVIC_SetPriorityGrouping>
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002432:	b580      	push	{r7, lr}
 8002434:	b086      	sub	sp, #24
 8002436:	af00      	add	r7, sp, #0
 8002438:	4603      	mov	r3, r0
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
 800243e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002444:	f7ff ff3e 	bl	80022c4 <__NVIC_GetPriorityGrouping>
 8002448:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	6978      	ldr	r0, [r7, #20]
 8002450:	f7ff ff8e 	bl	8002370 <NVIC_EncodePriority>
 8002454:	4602      	mov	r2, r0
 8002456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800245a:	4611      	mov	r1, r2
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff5d 	bl	800231c <__NVIC_SetPriority>
}
 8002462:	bf00      	nop
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	4603      	mov	r3, r0
 8002472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff ff31 	bl	80022e0 <__NVIC_EnableIRQ>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff ffa2 	bl	80023d8 <SysTick_Config>
 8002494:	4603      	mov	r3, r0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	e16b      	b.n	8002794 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024bc:	2201      	movs	r2, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	f040 815a 	bne.w	800278e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d005      	beq.n	80024f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d130      	bne.n	8002554 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	2203      	movs	r2, #3
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4013      	ands	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002528:	2201      	movs	r2, #1
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	f003 0201 	and.w	r2, r3, #1
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	2b03      	cmp	r3, #3
 800255e:	d017      	beq.n	8002590 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	2203      	movs	r2, #3
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d123      	bne.n	80025e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	08da      	lsrs	r2, r3, #3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3208      	adds	r2, #8
 80025a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	220f      	movs	r2, #15
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	08da      	lsrs	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3208      	adds	r2, #8
 80025de:	69b9      	ldr	r1, [r7, #24]
 80025e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	2203      	movs	r2, #3
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 0203 	and.w	r2, r3, #3
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80b4 	beq.w	800278e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	4b60      	ldr	r3, [pc, #384]	; (80027ac <HAL_GPIO_Init+0x30c>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	4a5f      	ldr	r2, [pc, #380]	; (80027ac <HAL_GPIO_Init+0x30c>)
 8002630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002634:	6453      	str	r3, [r2, #68]	; 0x44
 8002636:	4b5d      	ldr	r3, [pc, #372]	; (80027ac <HAL_GPIO_Init+0x30c>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002642:	4a5b      	ldr	r2, [pc, #364]	; (80027b0 <HAL_GPIO_Init+0x310>)
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	089b      	lsrs	r3, r3, #2
 8002648:	3302      	adds	r3, #2
 800264a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	220f      	movs	r2, #15
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a52      	ldr	r2, [pc, #328]	; (80027b4 <HAL_GPIO_Init+0x314>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d02b      	beq.n	80026c6 <HAL_GPIO_Init+0x226>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a51      	ldr	r2, [pc, #324]	; (80027b8 <HAL_GPIO_Init+0x318>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d025      	beq.n	80026c2 <HAL_GPIO_Init+0x222>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a50      	ldr	r2, [pc, #320]	; (80027bc <HAL_GPIO_Init+0x31c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d01f      	beq.n	80026be <HAL_GPIO_Init+0x21e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a4f      	ldr	r2, [pc, #316]	; (80027c0 <HAL_GPIO_Init+0x320>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d019      	beq.n	80026ba <HAL_GPIO_Init+0x21a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4e      	ldr	r2, [pc, #312]	; (80027c4 <HAL_GPIO_Init+0x324>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d013      	beq.n	80026b6 <HAL_GPIO_Init+0x216>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a4d      	ldr	r2, [pc, #308]	; (80027c8 <HAL_GPIO_Init+0x328>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d00d      	beq.n	80026b2 <HAL_GPIO_Init+0x212>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4c      	ldr	r2, [pc, #304]	; (80027cc <HAL_GPIO_Init+0x32c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d007      	beq.n	80026ae <HAL_GPIO_Init+0x20e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a4b      	ldr	r2, [pc, #300]	; (80027d0 <HAL_GPIO_Init+0x330>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d101      	bne.n	80026aa <HAL_GPIO_Init+0x20a>
 80026a6:	2307      	movs	r3, #7
 80026a8:	e00e      	b.n	80026c8 <HAL_GPIO_Init+0x228>
 80026aa:	2308      	movs	r3, #8
 80026ac:	e00c      	b.n	80026c8 <HAL_GPIO_Init+0x228>
 80026ae:	2306      	movs	r3, #6
 80026b0:	e00a      	b.n	80026c8 <HAL_GPIO_Init+0x228>
 80026b2:	2305      	movs	r3, #5
 80026b4:	e008      	b.n	80026c8 <HAL_GPIO_Init+0x228>
 80026b6:	2304      	movs	r3, #4
 80026b8:	e006      	b.n	80026c8 <HAL_GPIO_Init+0x228>
 80026ba:	2303      	movs	r3, #3
 80026bc:	e004      	b.n	80026c8 <HAL_GPIO_Init+0x228>
 80026be:	2302      	movs	r3, #2
 80026c0:	e002      	b.n	80026c8 <HAL_GPIO_Init+0x228>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <HAL_GPIO_Init+0x228>
 80026c6:	2300      	movs	r3, #0
 80026c8:	69fa      	ldr	r2, [r7, #28]
 80026ca:	f002 0203 	and.w	r2, r2, #3
 80026ce:	0092      	lsls	r2, r2, #2
 80026d0:	4093      	lsls	r3, r2
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026d8:	4935      	ldr	r1, [pc, #212]	; (80027b0 <HAL_GPIO_Init+0x310>)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	089b      	lsrs	r3, r3, #2
 80026de:	3302      	adds	r3, #2
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026e6:	4b3b      	ldr	r3, [pc, #236]	; (80027d4 <HAL_GPIO_Init+0x334>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800270a:	4a32      	ldr	r2, [pc, #200]	; (80027d4 <HAL_GPIO_Init+0x334>)
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002710:	4b30      	ldr	r3, [pc, #192]	; (80027d4 <HAL_GPIO_Init+0x334>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002734:	4a27      	ldr	r2, [pc, #156]	; (80027d4 <HAL_GPIO_Init+0x334>)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800273a:	4b26      	ldr	r3, [pc, #152]	; (80027d4 <HAL_GPIO_Init+0x334>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800275e:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <HAL_GPIO_Init+0x334>)
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002764:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <HAL_GPIO_Init+0x334>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002788:	4a12      	ldr	r2, [pc, #72]	; (80027d4 <HAL_GPIO_Init+0x334>)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	3301      	adds	r3, #1
 8002792:	61fb      	str	r3, [r7, #28]
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	2b0f      	cmp	r3, #15
 8002798:	f67f ae90 	bls.w	80024bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800279c:	bf00      	nop
 800279e:	bf00      	nop
 80027a0:	3724      	adds	r7, #36	; 0x24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40013800 	.word	0x40013800
 80027b4:	40020000 	.word	0x40020000
 80027b8:	40020400 	.word	0x40020400
 80027bc:	40020800 	.word	0x40020800
 80027c0:	40020c00 	.word	0x40020c00
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40021400 	.word	0x40021400
 80027cc:	40021800 	.word	0x40021800
 80027d0:	40021c00 	.word	0x40021c00
 80027d4:	40013c00 	.word	0x40013c00

080027d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	807b      	strh	r3, [r7, #2]
 80027e4:	4613      	mov	r3, r2
 80027e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027e8:	787b      	ldrb	r3, [r7, #1]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ee:	887a      	ldrh	r2, [r7, #2]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027f4:	e003      	b.n	80027fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027f6:	887b      	ldrh	r3, [r7, #2]
 80027f8:	041a      	lsls	r2, r3, #16
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	619a      	str	r2, [r3, #24]
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e267      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d075      	beq.n	8002916 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800282a:	4b88      	ldr	r3, [pc, #544]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b04      	cmp	r3, #4
 8002834:	d00c      	beq.n	8002850 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002836:	4b85      	ldr	r3, [pc, #532]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800283e:	2b08      	cmp	r3, #8
 8002840:	d112      	bne.n	8002868 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002842:	4b82      	ldr	r3, [pc, #520]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800284e:	d10b      	bne.n	8002868 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002850:	4b7e      	ldr	r3, [pc, #504]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d05b      	beq.n	8002914 <HAL_RCC_OscConfig+0x108>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d157      	bne.n	8002914 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e242      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002870:	d106      	bne.n	8002880 <HAL_RCC_OscConfig+0x74>
 8002872:	4b76      	ldr	r3, [pc, #472]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a75      	ldr	r2, [pc, #468]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	e01d      	b.n	80028bc <HAL_RCC_OscConfig+0xb0>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002888:	d10c      	bne.n	80028a4 <HAL_RCC_OscConfig+0x98>
 800288a:	4b70      	ldr	r3, [pc, #448]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a6f      	ldr	r2, [pc, #444]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	4b6d      	ldr	r3, [pc, #436]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a6c      	ldr	r2, [pc, #432]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 800289c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	e00b      	b.n	80028bc <HAL_RCC_OscConfig+0xb0>
 80028a4:	4b69      	ldr	r3, [pc, #420]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a68      	ldr	r2, [pc, #416]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 80028aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	4b66      	ldr	r3, [pc, #408]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a65      	ldr	r2, [pc, #404]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 80028b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d013      	beq.n	80028ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7ff fcaa 	bl	800221c <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028cc:	f7ff fca6 	bl	800221c <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	; 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e207      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028de:	4b5b      	ldr	r3, [pc, #364]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCC_OscConfig+0xc0>
 80028ea:	e014      	b.n	8002916 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ec:	f7ff fc96 	bl	800221c <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028f4:	f7ff fc92 	bl	800221c <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b64      	cmp	r3, #100	; 0x64
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e1f3      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002906:	4b51      	ldr	r3, [pc, #324]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0xe8>
 8002912:	e000      	b.n	8002916 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d063      	beq.n	80029ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002922:	4b4a      	ldr	r3, [pc, #296]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00b      	beq.n	8002946 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800292e:	4b47      	ldr	r3, [pc, #284]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002936:	2b08      	cmp	r3, #8
 8002938:	d11c      	bne.n	8002974 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800293a:	4b44      	ldr	r3, [pc, #272]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d116      	bne.n	8002974 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002946:	4b41      	ldr	r3, [pc, #260]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d005      	beq.n	800295e <HAL_RCC_OscConfig+0x152>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d001      	beq.n	800295e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e1c7      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295e:	4b3b      	ldr	r3, [pc, #236]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4937      	ldr	r1, [pc, #220]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002972:	e03a      	b.n	80029ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d020      	beq.n	80029be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800297c:	4b34      	ldr	r3, [pc, #208]	; (8002a50 <HAL_RCC_OscConfig+0x244>)
 800297e:	2201      	movs	r2, #1
 8002980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002982:	f7ff fc4b 	bl	800221c <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800298a:	f7ff fc47 	bl	800221c <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e1a8      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299c:	4b2b      	ldr	r3, [pc, #172]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a8:	4b28      	ldr	r3, [pc, #160]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4925      	ldr	r1, [pc, #148]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	600b      	str	r3, [r1, #0]
 80029bc:	e015      	b.n	80029ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029be:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <HAL_RCC_OscConfig+0x244>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7ff fc2a 	bl	800221c <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029cc:	f7ff fc26 	bl	800221c <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e187      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029de:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d036      	beq.n	8002a64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d016      	beq.n	8002a2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029fe:	4b15      	ldr	r3, [pc, #84]	; (8002a54 <HAL_RCC_OscConfig+0x248>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a04:	f7ff fc0a 	bl	800221c <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a0c:	f7ff fc06 	bl	800221c <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e167      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0x200>
 8002a2a:	e01b      	b.n	8002a64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a2c:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <HAL_RCC_OscConfig+0x248>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a32:	f7ff fbf3 	bl	800221c <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a38:	e00e      	b.n	8002a58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a3a:	f7ff fbef 	bl	800221c <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d907      	bls.n	8002a58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e150      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	42470000 	.word	0x42470000
 8002a54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a58:	4b88      	ldr	r3, [pc, #544]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1ea      	bne.n	8002a3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 8097 	beq.w	8002ba0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a72:	2300      	movs	r3, #0
 8002a74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a76:	4b81      	ldr	r3, [pc, #516]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10f      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	4b7d      	ldr	r3, [pc, #500]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	4a7c      	ldr	r2, [pc, #496]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a90:	6413      	str	r3, [r2, #64]	; 0x40
 8002a92:	4b7a      	ldr	r3, [pc, #488]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa2:	4b77      	ldr	r3, [pc, #476]	; (8002c80 <HAL_RCC_OscConfig+0x474>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d118      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aae:	4b74      	ldr	r3, [pc, #464]	; (8002c80 <HAL_RCC_OscConfig+0x474>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a73      	ldr	r2, [pc, #460]	; (8002c80 <HAL_RCC_OscConfig+0x474>)
 8002ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aba:	f7ff fbaf 	bl	800221c <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac2:	f7ff fbab 	bl	800221c <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e10c      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad4:	4b6a      	ldr	r3, [pc, #424]	; (8002c80 <HAL_RCC_OscConfig+0x474>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d106      	bne.n	8002af6 <HAL_RCC_OscConfig+0x2ea>
 8002ae8:	4b64      	ldr	r3, [pc, #400]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aec:	4a63      	ldr	r2, [pc, #396]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	6713      	str	r3, [r2, #112]	; 0x70
 8002af4:	e01c      	b.n	8002b30 <HAL_RCC_OscConfig+0x324>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b05      	cmp	r3, #5
 8002afc:	d10c      	bne.n	8002b18 <HAL_RCC_OscConfig+0x30c>
 8002afe:	4b5f      	ldr	r3, [pc, #380]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b02:	4a5e      	ldr	r2, [pc, #376]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b04:	f043 0304 	orr.w	r3, r3, #4
 8002b08:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0a:	4b5c      	ldr	r3, [pc, #368]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0e:	4a5b      	ldr	r2, [pc, #364]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	6713      	str	r3, [r2, #112]	; 0x70
 8002b16:	e00b      	b.n	8002b30 <HAL_RCC_OscConfig+0x324>
 8002b18:	4b58      	ldr	r3, [pc, #352]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	4a57      	ldr	r2, [pc, #348]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b1e:	f023 0301 	bic.w	r3, r3, #1
 8002b22:	6713      	str	r3, [r2, #112]	; 0x70
 8002b24:	4b55      	ldr	r3, [pc, #340]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b28:	4a54      	ldr	r2, [pc, #336]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b2a:	f023 0304 	bic.w	r3, r3, #4
 8002b2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d015      	beq.n	8002b64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b38:	f7ff fb70 	bl	800221c <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b40:	f7ff fb6c 	bl	800221c <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e0cb      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b56:	4b49      	ldr	r3, [pc, #292]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0ee      	beq.n	8002b40 <HAL_RCC_OscConfig+0x334>
 8002b62:	e014      	b.n	8002b8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b64:	f7ff fb5a 	bl	800221c <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b6a:	e00a      	b.n	8002b82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b6c:	f7ff fb56 	bl	800221c <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e0b5      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b82:	4b3e      	ldr	r3, [pc, #248]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1ee      	bne.n	8002b6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b8e:	7dfb      	ldrb	r3, [r7, #23]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d105      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b94:	4b39      	ldr	r3, [pc, #228]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	4a38      	ldr	r2, [pc, #224]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 80a1 	beq.w	8002cec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002baa:	4b34      	ldr	r3, [pc, #208]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d05c      	beq.n	8002c70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d141      	bne.n	8002c42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bbe:	4b31      	ldr	r3, [pc, #196]	; (8002c84 <HAL_RCC_OscConfig+0x478>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc4:	f7ff fb2a 	bl	800221c <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bcc:	f7ff fb26 	bl	800221c <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e087      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bde:	4b27      	ldr	r3, [pc, #156]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69da      	ldr	r2, [r3, #28]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	019b      	lsls	r3, r3, #6
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	085b      	lsrs	r3, r3, #1
 8002c02:	3b01      	subs	r3, #1
 8002c04:	041b      	lsls	r3, r3, #16
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	061b      	lsls	r3, r3, #24
 8002c0e:	491b      	ldr	r1, [pc, #108]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c14:	4b1b      	ldr	r3, [pc, #108]	; (8002c84 <HAL_RCC_OscConfig+0x478>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1a:	f7ff faff 	bl	800221c <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c22:	f7ff fafb 	bl	800221c <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e05c      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c34:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0f0      	beq.n	8002c22 <HAL_RCC_OscConfig+0x416>
 8002c40:	e054      	b.n	8002cec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c42:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <HAL_RCC_OscConfig+0x478>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c48:	f7ff fae8 	bl	800221c <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c50:	f7ff fae4 	bl	800221c <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e045      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c62:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x444>
 8002c6e:	e03d      	b.n	8002cec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d107      	bne.n	8002c88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e038      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	40007000 	.word	0x40007000
 8002c84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c88:	4b1b      	ldr	r3, [pc, #108]	; (8002cf8 <HAL_RCC_OscConfig+0x4ec>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d028      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d121      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d11a      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cb8:	4013      	ands	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d111      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cce:	085b      	lsrs	r3, r3, #1
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d107      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d001      	beq.n	8002cec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40023800 	.word	0x40023800

08002cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e0cc      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d10:	4b68      	ldr	r3, [pc, #416]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d90c      	bls.n	8002d38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1e:	4b65      	ldr	r3, [pc, #404]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d26:	4b63      	ldr	r3, [pc, #396]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d001      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0b8      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d020      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d50:	4b59      	ldr	r3, [pc, #356]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	4a58      	ldr	r2, [pc, #352]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d68:	4b53      	ldr	r3, [pc, #332]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4a52      	ldr	r2, [pc, #328]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d74:	4b50      	ldr	r3, [pc, #320]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	494d      	ldr	r1, [pc, #308]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d044      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d107      	bne.n	8002daa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9a:	4b47      	ldr	r3, [pc, #284]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d119      	bne.n	8002dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e07f      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d003      	beq.n	8002dba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d107      	bne.n	8002dca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dba:	4b3f      	ldr	r3, [pc, #252]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d109      	bne.n	8002dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e06f      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dca:	4b3b      	ldr	r3, [pc, #236]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e067      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dda:	4b37      	ldr	r3, [pc, #220]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f023 0203 	bic.w	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4934      	ldr	r1, [pc, #208]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dec:	f7ff fa16 	bl	800221c <HAL_GetTick>
 8002df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df2:	e00a      	b.n	8002e0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df4:	f7ff fa12 	bl	800221c <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e04f      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0a:	4b2b      	ldr	r3, [pc, #172]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 020c 	and.w	r2, r3, #12
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d1eb      	bne.n	8002df4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e1c:	4b25      	ldr	r3, [pc, #148]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d20c      	bcs.n	8002e44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2a:	4b22      	ldr	r3, [pc, #136]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e32:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d001      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e032      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e50:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4916      	ldr	r1, [pc, #88]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d009      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e6e:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	490e      	ldr	r1, [pc, #56]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e82:	f000 f821 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 8002e86:	4602      	mov	r2, r0
 8002e88:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	091b      	lsrs	r3, r3, #4
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	490a      	ldr	r1, [pc, #40]	; (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002e94:	5ccb      	ldrb	r3, [r1, r3]
 8002e96:	fa22 f303 	lsr.w	r3, r2, r3
 8002e9a:	4a09      	ldr	r2, [pc, #36]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e9e:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff f976 	bl	8002194 <HAL_InitTick>

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40023c00 	.word	0x40023c00
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	0800b41c 	.word	0x0800b41c
 8002ec0:	20000018 	.word	0x20000018
 8002ec4:	2000001c 	.word	0x2000001c

08002ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ecc:	b094      	sub	sp, #80	; 0x50
 8002ece:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ed8:	2300      	movs	r3, #0
 8002eda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ee0:	4b79      	ldr	r3, [pc, #484]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d00d      	beq.n	8002f08 <HAL_RCC_GetSysClockFreq+0x40>
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	f200 80e1 	bhi.w	80030b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <HAL_RCC_GetSysClockFreq+0x34>
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d003      	beq.n	8002f02 <HAL_RCC_GetSysClockFreq+0x3a>
 8002efa:	e0db      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002efc:	4b73      	ldr	r3, [pc, #460]	; (80030cc <HAL_RCC_GetSysClockFreq+0x204>)
 8002efe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f00:	e0db      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f02:	4b73      	ldr	r3, [pc, #460]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f06:	e0d8      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f08:	4b6f      	ldr	r3, [pc, #444]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f10:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f12:	4b6d      	ldr	r3, [pc, #436]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d063      	beq.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f1e:	4b6a      	ldr	r3, [pc, #424]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	099b      	lsrs	r3, r3, #6
 8002f24:	2200      	movs	r2, #0
 8002f26:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f30:	633b      	str	r3, [r7, #48]	; 0x30
 8002f32:	2300      	movs	r3, #0
 8002f34:	637b      	str	r3, [r7, #52]	; 0x34
 8002f36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f3a:	4622      	mov	r2, r4
 8002f3c:	462b      	mov	r3, r5
 8002f3e:	f04f 0000 	mov.w	r0, #0
 8002f42:	f04f 0100 	mov.w	r1, #0
 8002f46:	0159      	lsls	r1, r3, #5
 8002f48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f4c:	0150      	lsls	r0, r2, #5
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4621      	mov	r1, r4
 8002f54:	1a51      	subs	r1, r2, r1
 8002f56:	6139      	str	r1, [r7, #16]
 8002f58:	4629      	mov	r1, r5
 8002f5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f6c:	4659      	mov	r1, fp
 8002f6e:	018b      	lsls	r3, r1, #6
 8002f70:	4651      	mov	r1, sl
 8002f72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f76:	4651      	mov	r1, sl
 8002f78:	018a      	lsls	r2, r1, #6
 8002f7a:	4651      	mov	r1, sl
 8002f7c:	ebb2 0801 	subs.w	r8, r2, r1
 8002f80:	4659      	mov	r1, fp
 8002f82:	eb63 0901 	sbc.w	r9, r3, r1
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	f04f 0300 	mov.w	r3, #0
 8002f8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f9a:	4690      	mov	r8, r2
 8002f9c:	4699      	mov	r9, r3
 8002f9e:	4623      	mov	r3, r4
 8002fa0:	eb18 0303 	adds.w	r3, r8, r3
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	462b      	mov	r3, r5
 8002fa8:	eb49 0303 	adc.w	r3, r9, r3
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fba:	4629      	mov	r1, r5
 8002fbc:	024b      	lsls	r3, r1, #9
 8002fbe:	4621      	mov	r1, r4
 8002fc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fc4:	4621      	mov	r1, r4
 8002fc6:	024a      	lsls	r2, r1, #9
 8002fc8:	4610      	mov	r0, r2
 8002fca:	4619      	mov	r1, r3
 8002fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fce:	2200      	movs	r2, #0
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fd8:	f7fd f8fe 	bl	80001d8 <__aeabi_uldivmod>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fe4:	e058      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe6:	4b38      	ldr	r3, [pc, #224]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	099b      	lsrs	r3, r3, #6
 8002fec:	2200      	movs	r2, #0
 8002fee:	4618      	mov	r0, r3
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ff6:	623b      	str	r3, [r7, #32]
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8002ffc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003000:	4642      	mov	r2, r8
 8003002:	464b      	mov	r3, r9
 8003004:	f04f 0000 	mov.w	r0, #0
 8003008:	f04f 0100 	mov.w	r1, #0
 800300c:	0159      	lsls	r1, r3, #5
 800300e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003012:	0150      	lsls	r0, r2, #5
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4641      	mov	r1, r8
 800301a:	ebb2 0a01 	subs.w	sl, r2, r1
 800301e:	4649      	mov	r1, r9
 8003020:	eb63 0b01 	sbc.w	fp, r3, r1
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003030:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003034:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003038:	ebb2 040a 	subs.w	r4, r2, sl
 800303c:	eb63 050b 	sbc.w	r5, r3, fp
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	f04f 0300 	mov.w	r3, #0
 8003048:	00eb      	lsls	r3, r5, #3
 800304a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800304e:	00e2      	lsls	r2, r4, #3
 8003050:	4614      	mov	r4, r2
 8003052:	461d      	mov	r5, r3
 8003054:	4643      	mov	r3, r8
 8003056:	18e3      	adds	r3, r4, r3
 8003058:	603b      	str	r3, [r7, #0]
 800305a:	464b      	mov	r3, r9
 800305c:	eb45 0303 	adc.w	r3, r5, r3
 8003060:	607b      	str	r3, [r7, #4]
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800306e:	4629      	mov	r1, r5
 8003070:	028b      	lsls	r3, r1, #10
 8003072:	4621      	mov	r1, r4
 8003074:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003078:	4621      	mov	r1, r4
 800307a:	028a      	lsls	r2, r1, #10
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003082:	2200      	movs	r2, #0
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	61fa      	str	r2, [r7, #28]
 8003088:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800308c:	f7fd f8a4 	bl	80001d8 <__aeabi_uldivmod>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4613      	mov	r3, r2
 8003096:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003098:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	0c1b      	lsrs	r3, r3, #16
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	3301      	adds	r3, #1
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80030a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030b2:	e002      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030b4:	4b05      	ldr	r3, [pc, #20]	; (80030cc <HAL_RCC_GetSysClockFreq+0x204>)
 80030b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3750      	adds	r7, #80	; 0x50
 80030c0:	46bd      	mov	sp, r7
 80030c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800
 80030cc:	00f42400 	.word	0x00f42400
 80030d0:	007a1200 	.word	0x007a1200

080030d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e07b      	b.n	80031de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d108      	bne.n	8003100 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030f6:	d009      	beq.n	800310c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	61da      	str	r2, [r3, #28]
 80030fe:	e005      	b.n	800310c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fe fec0 	bl	8001eac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003142:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800317c:	431a      	orrs	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003190:	ea42 0103 	orr.w	r1, r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003198:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	0c1b      	lsrs	r3, r3, #16
 80031aa:	f003 0104 	and.w	r1, r3, #4
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	f003 0210 	and.w	r2, r3, #16
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69da      	ldr	r2, [r3, #28]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b088      	sub	sp, #32
 80031ea:	af02      	add	r7, sp, #8
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	603b      	str	r3, [r7, #0]
 80031f2:	4613      	mov	r3, r2
 80031f4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003202:	d112      	bne.n	800322a <HAL_SPI_Receive+0x44>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10e      	bne.n	800322a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2204      	movs	r2, #4
 8003210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003214:	88fa      	ldrh	r2, [r7, #6]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	4613      	mov	r3, r2
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	68b9      	ldr	r1, [r7, #8]
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 f8f1 	bl	8003408 <HAL_SPI_TransmitReceive>
 8003226:	4603      	mov	r3, r0
 8003228:	e0ea      	b.n	8003400 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <HAL_SPI_Receive+0x52>
 8003234:	2302      	movs	r3, #2
 8003236:	e0e3      	b.n	8003400 <HAL_SPI_Receive+0x21a>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003240:	f7fe ffec 	bl	800221c <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b01      	cmp	r3, #1
 8003250:	d002      	beq.n	8003258 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003252:	2302      	movs	r3, #2
 8003254:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003256:	e0ca      	b.n	80033ee <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d002      	beq.n	8003264 <HAL_SPI_Receive+0x7e>
 800325e:	88fb      	ldrh	r3, [r7, #6]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d102      	bne.n	800326a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003268:	e0c1      	b.n	80033ee <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2204      	movs	r2, #4
 800326e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	88fa      	ldrh	r2, [r7, #6]
 8003282:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	88fa      	ldrh	r2, [r7, #6]
 8003288:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b0:	d10f      	bne.n	80032d2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032d0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032dc:	2b40      	cmp	r3, #64	; 0x40
 80032de:	d007      	beq.n	80032f0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032ee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d162      	bne.n	80033be <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80032f8:	e02e      	b.n	8003358 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b01      	cmp	r3, #1
 8003306:	d115      	bne.n	8003334 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f103 020c 	add.w	r2, r3, #12
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	7812      	ldrb	r2, [r2, #0]
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331e:	1c5a      	adds	r2, r3, #1
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003328:	b29b      	uxth	r3, r3
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003332:	e011      	b.n	8003358 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003334:	f7fe ff72 	bl	800221c <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d803      	bhi.n	800334c <HAL_SPI_Receive+0x166>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334a:	d102      	bne.n	8003352 <HAL_SPI_Receive+0x16c>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d102      	bne.n	8003358 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003356:	e04a      	b.n	80033ee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800335c:	b29b      	uxth	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1cb      	bne.n	80032fa <HAL_SPI_Receive+0x114>
 8003362:	e031      	b.n	80033c8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b01      	cmp	r3, #1
 8003370:	d113      	bne.n	800339a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337c:	b292      	uxth	r2, r2
 800337e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003384:	1c9a      	adds	r2, r3, #2
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003398:	e011      	b.n	80033be <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800339a:	f7fe ff3f 	bl	800221c <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d803      	bhi.n	80033b2 <HAL_SPI_Receive+0x1cc>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b0:	d102      	bne.n	80033b8 <HAL_SPI_Receive+0x1d2>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d102      	bne.n	80033be <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80033bc:	e017      	b.n	80033ee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1cd      	bne.n	8003364 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	6839      	ldr	r1, [r7, #0]
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 fa45 	bl	800385c <SPI_EndRxTransaction>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2220      	movs	r2, #32
 80033dc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	75fb      	strb	r3, [r7, #23]
 80033ea:	e000      	b.n	80033ee <HAL_SPI_Receive+0x208>
  }

error :
 80033ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08c      	sub	sp, #48	; 0x30
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003416:	2301      	movs	r3, #1
 8003418:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_SPI_TransmitReceive+0x26>
 800342a:	2302      	movs	r3, #2
 800342c:	e18a      	b.n	8003744 <HAL_SPI_TransmitReceive+0x33c>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003436:	f7fe fef1 	bl	800221c <HAL_GetTick>
 800343a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800344c:	887b      	ldrh	r3, [r7, #2]
 800344e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003450:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003454:	2b01      	cmp	r3, #1
 8003456:	d00f      	beq.n	8003478 <HAL_SPI_TransmitReceive+0x70>
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800345e:	d107      	bne.n	8003470 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d103      	bne.n	8003470 <HAL_SPI_TransmitReceive+0x68>
 8003468:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800346c:	2b04      	cmp	r3, #4
 800346e:	d003      	beq.n	8003478 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003470:	2302      	movs	r3, #2
 8003472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003476:	e15b      	b.n	8003730 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d005      	beq.n	800348a <HAL_SPI_TransmitReceive+0x82>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <HAL_SPI_TransmitReceive+0x82>
 8003484:	887b      	ldrh	r3, [r7, #2]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d103      	bne.n	8003492 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003490:	e14e      	b.n	8003730 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b04      	cmp	r3, #4
 800349c:	d003      	beq.n	80034a6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2205      	movs	r2, #5
 80034a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	887a      	ldrh	r2, [r7, #2]
 80034b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	887a      	ldrh	r2, [r7, #2]
 80034bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	887a      	ldrh	r2, [r7, #2]
 80034c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	887a      	ldrh	r2, [r7, #2]
 80034ce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e6:	2b40      	cmp	r3, #64	; 0x40
 80034e8:	d007      	beq.n	80034fa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003502:	d178      	bne.n	80035f6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <HAL_SPI_TransmitReceive+0x10a>
 800350c:	8b7b      	ldrh	r3, [r7, #26]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d166      	bne.n	80035e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	881a      	ldrh	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	1c9a      	adds	r2, r3, #2
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800352c:	b29b      	uxth	r3, r3
 800352e:	3b01      	subs	r3, #1
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003536:	e053      	b.n	80035e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b02      	cmp	r3, #2
 8003544:	d11b      	bne.n	800357e <HAL_SPI_TransmitReceive+0x176>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d016      	beq.n	800357e <HAL_SPI_TransmitReceive+0x176>
 8003550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003552:	2b01      	cmp	r3, #1
 8003554:	d113      	bne.n	800357e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	881a      	ldrh	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	1c9a      	adds	r2, r3, #2
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b01      	cmp	r3, #1
 800358a:	d119      	bne.n	80035c0 <HAL_SPI_TransmitReceive+0x1b8>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d014      	beq.n	80035c0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a0:	b292      	uxth	r2, r2
 80035a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	1c9a      	adds	r2, r3, #2
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035bc:	2301      	movs	r3, #1
 80035be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80035c0:	f7fe fe2c 	bl	800221c <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d807      	bhi.n	80035e0 <HAL_SPI_TransmitReceive+0x1d8>
 80035d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d6:	d003      	beq.n	80035e0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80035de:	e0a7      	b.n	8003730 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1a6      	bne.n	8003538 <HAL_SPI_TransmitReceive+0x130>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1a1      	bne.n	8003538 <HAL_SPI_TransmitReceive+0x130>
 80035f4:	e07c      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <HAL_SPI_TransmitReceive+0x1fc>
 80035fe:	8b7b      	ldrh	r3, [r7, #26]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d16b      	bne.n	80036dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	330c      	adds	r3, #12
 800360e:	7812      	ldrb	r2, [r2, #0]
 8003610:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003620:	b29b      	uxth	r3, r3
 8003622:	3b01      	subs	r3, #1
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800362a:	e057      	b.n	80036dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b02      	cmp	r3, #2
 8003638:	d11c      	bne.n	8003674 <HAL_SPI_TransmitReceive+0x26c>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800363e:	b29b      	uxth	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d017      	beq.n	8003674 <HAL_SPI_TransmitReceive+0x26c>
 8003644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003646:	2b01      	cmp	r3, #1
 8003648:	d114      	bne.n	8003674 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	330c      	adds	r3, #12
 8003654:	7812      	ldrb	r2, [r2, #0]
 8003656:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b01      	cmp	r3, #1
 8003680:	d119      	bne.n	80036b6 <HAL_SPI_TransmitReceive+0x2ae>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	d014      	beq.n	80036b6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036b2:	2301      	movs	r3, #1
 80036b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80036b6:	f7fe fdb1 	bl	800221c <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d803      	bhi.n	80036ce <HAL_SPI_TransmitReceive+0x2c6>
 80036c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036cc:	d102      	bne.n	80036d4 <HAL_SPI_TransmitReceive+0x2cc>
 80036ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d103      	bne.n	80036dc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80036da:	e029      	b.n	8003730 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1a2      	bne.n	800362c <HAL_SPI_TransmitReceive+0x224>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d19d      	bne.n	800362c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 f917 	bl	8003928 <SPI_EndRxTxTransaction>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d006      	beq.n	800370e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2220      	movs	r2, #32
 800370a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800370c:	e010      	b.n	8003730 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10b      	bne.n	800372e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	e000      	b.n	8003730 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800372e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003740:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003744:	4618      	mov	r0, r3
 8003746:	3730      	adds	r7, #48	; 0x30
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	603b      	str	r3, [r7, #0]
 8003758:	4613      	mov	r3, r2
 800375a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800375c:	f7fe fd5e 	bl	800221c <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003764:	1a9b      	subs	r3, r3, r2
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	4413      	add	r3, r2
 800376a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800376c:	f7fe fd56 	bl	800221c <HAL_GetTick>
 8003770:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003772:	4b39      	ldr	r3, [pc, #228]	; (8003858 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	015b      	lsls	r3, r3, #5
 8003778:	0d1b      	lsrs	r3, r3, #20
 800377a:	69fa      	ldr	r2, [r7, #28]
 800377c:	fb02 f303 	mul.w	r3, r2, r3
 8003780:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003782:	e054      	b.n	800382e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378a:	d050      	beq.n	800382e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800378c:	f7fe fd46 	bl	800221c <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	69fa      	ldr	r2, [r7, #28]
 8003798:	429a      	cmp	r2, r3
 800379a:	d902      	bls.n	80037a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d13d      	bne.n	800381e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ba:	d111      	bne.n	80037e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c4:	d004      	beq.n	80037d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ce:	d107      	bne.n	80037e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e8:	d10f      	bne.n	800380a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003808:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e017      	b.n	800384e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	3b01      	subs	r3, #1
 800382c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	4013      	ands	r3, r2
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	429a      	cmp	r2, r3
 800383c:	bf0c      	ite	eq
 800383e:	2301      	moveq	r3, #1
 8003840:	2300      	movne	r3, #0
 8003842:	b2db      	uxtb	r3, r3
 8003844:	461a      	mov	r2, r3
 8003846:	79fb      	ldrb	r3, [r7, #7]
 8003848:	429a      	cmp	r2, r3
 800384a:	d19b      	bne.n	8003784 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3720      	adds	r7, #32
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000018 	.word	0x20000018

0800385c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af02      	add	r7, sp, #8
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003870:	d111      	bne.n	8003896 <SPI_EndRxTransaction+0x3a>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800387a:	d004      	beq.n	8003886 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003884:	d107      	bne.n	8003896 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003894:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800389e:	d12a      	bne.n	80038f6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a8:	d012      	beq.n	80038d0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2200      	movs	r2, #0
 80038b2:	2180      	movs	r1, #128	; 0x80
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f7ff ff49 	bl	800374c <SPI_WaitFlagStateUntilTimeout>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d02d      	beq.n	800391c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c4:	f043 0220 	orr.w	r2, r3, #32
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e026      	b.n	800391e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	2200      	movs	r2, #0
 80038d8:	2101      	movs	r1, #1
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f7ff ff36 	bl	800374c <SPI_WaitFlagStateUntilTimeout>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d01a      	beq.n	800391c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ea:	f043 0220 	orr.w	r2, r3, #32
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e013      	b.n	800391e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2200      	movs	r2, #0
 80038fe:	2101      	movs	r1, #1
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f7ff ff23 	bl	800374c <SPI_WaitFlagStateUntilTimeout>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d007      	beq.n	800391c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003910:	f043 0220 	orr.w	r2, r3, #32
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e000      	b.n	800391e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af02      	add	r7, sp, #8
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003934:	4b1b      	ldr	r3, [pc, #108]	; (80039a4 <SPI_EndRxTxTransaction+0x7c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a1b      	ldr	r2, [pc, #108]	; (80039a8 <SPI_EndRxTxTransaction+0x80>)
 800393a:	fba2 2303 	umull	r2, r3, r2, r3
 800393e:	0d5b      	lsrs	r3, r3, #21
 8003940:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003944:	fb02 f303 	mul.w	r3, r2, r3
 8003948:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003952:	d112      	bne.n	800397a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2200      	movs	r2, #0
 800395c:	2180      	movs	r1, #128	; 0x80
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f7ff fef4 	bl	800374c <SPI_WaitFlagStateUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d016      	beq.n	8003998 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396e:	f043 0220 	orr.w	r2, r3, #32
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e00f      	b.n	800399a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00a      	beq.n	8003996 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	3b01      	subs	r3, #1
 8003984:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003990:	2b80      	cmp	r3, #128	; 0x80
 8003992:	d0f2      	beq.n	800397a <SPI_EndRxTxTransaction+0x52>
 8003994:	e000      	b.n	8003998 <SPI_EndRxTxTransaction+0x70>
        break;
 8003996:	bf00      	nop
  }

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20000018 	.word	0x20000018
 80039a8:	165e9f81 	.word	0x165e9f81

080039ac <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e034      	b.n	8003a2c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f7fd f9f2 	bl	8000dc0 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	3308      	adds	r3, #8
 80039e4:	4619      	mov	r1, r3
 80039e6:	4610      	mov	r0, r2
 80039e8:	f000 fca6 	bl	8004338 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6818      	ldr	r0, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	461a      	mov	r2, r3
 80039f6:	68b9      	ldr	r1, [r7, #8]
 80039f8:	f000 fcf0 	bl	80043dc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6858      	ldr	r0, [r3, #4]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	f000 fd25 	bl	8004458 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	6892      	ldr	r2, [r2, #8]
 8003a16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	6892      	ldr	r2, [r2, #8]
 8003a22:	f041 0101 	orr.w	r1, r1, #1
 8003a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e041      	b.n	8003aca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fe fb28 	bl	80020b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	4619      	mov	r1, r3
 8003a72:	4610      	mov	r0, r2
 8003a74:	f000 fa96 	bl	8003fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d001      	beq.n	8003aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e04e      	b.n	8003b8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0201 	orr.w	r2, r2, #1
 8003b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a23      	ldr	r2, [pc, #140]	; (8003b98 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d022      	beq.n	8003b54 <HAL_TIM_Base_Start_IT+0x80>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b16:	d01d      	beq.n	8003b54 <HAL_TIM_Base_Start_IT+0x80>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a1f      	ldr	r2, [pc, #124]	; (8003b9c <HAL_TIM_Base_Start_IT+0xc8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d018      	beq.n	8003b54 <HAL_TIM_Base_Start_IT+0x80>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a1e      	ldr	r2, [pc, #120]	; (8003ba0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d013      	beq.n	8003b54 <HAL_TIM_Base_Start_IT+0x80>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a1c      	ldr	r2, [pc, #112]	; (8003ba4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00e      	beq.n	8003b54 <HAL_TIM_Base_Start_IT+0x80>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a1b      	ldr	r2, [pc, #108]	; (8003ba8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d009      	beq.n	8003b54 <HAL_TIM_Base_Start_IT+0x80>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a19      	ldr	r2, [pc, #100]	; (8003bac <HAL_TIM_Base_Start_IT+0xd8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d004      	beq.n	8003b54 <HAL_TIM_Base_Start_IT+0x80>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a18      	ldr	r2, [pc, #96]	; (8003bb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d111      	bne.n	8003b78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b06      	cmp	r3, #6
 8003b64:	d010      	beq.n	8003b88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f042 0201 	orr.w	r2, r2, #1
 8003b74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b76:	e007      	b.n	8003b88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0201 	orr.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40010000 	.word	0x40010000
 8003b9c:	40000400 	.word	0x40000400
 8003ba0:	40000800 	.word	0x40000800
 8003ba4:	40000c00 	.word	0x40000c00
 8003ba8:	40010400 	.word	0x40010400
 8003bac:	40014000 	.word	0x40014000
 8003bb0:	40001800 	.word	0x40001800

08003bb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d122      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d11b      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f06f 0202 	mvn.w	r2, #2
 8003be0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f9b5 	bl	8003f66 <HAL_TIM_IC_CaptureCallback>
 8003bfc:	e005      	b.n	8003c0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f9a7 	bl	8003f52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f9b8 	bl	8003f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d122      	bne.n	8003c64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d11b      	bne.n	8003c64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0204 	mvn.w	r2, #4
 8003c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2202      	movs	r2, #2
 8003c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f98b 	bl	8003f66 <HAL_TIM_IC_CaptureCallback>
 8003c50:	e005      	b.n	8003c5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f97d 	bl	8003f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f98e 	bl	8003f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d122      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d11b      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f06f 0208 	mvn.w	r2, #8
 8003c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2204      	movs	r2, #4
 8003c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f961 	bl	8003f66 <HAL_TIM_IC_CaptureCallback>
 8003ca4:	e005      	b.n	8003cb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f953 	bl	8003f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f964 	bl	8003f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	2b10      	cmp	r3, #16
 8003cc4:	d122      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f003 0310 	and.w	r3, r3, #16
 8003cd0:	2b10      	cmp	r3, #16
 8003cd2:	d11b      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0210 	mvn.w	r2, #16
 8003cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2208      	movs	r2, #8
 8003ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f937 	bl	8003f66 <HAL_TIM_IC_CaptureCallback>
 8003cf8:	e005      	b.n	8003d06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f929 	bl	8003f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f93a 	bl	8003f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d10e      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d107      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f06f 0201 	mvn.w	r2, #1
 8003d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fe f874 	bl	8001e20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d42:	2b80      	cmp	r3, #128	; 0x80
 8003d44:	d10e      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d50:	2b80      	cmp	r3, #128	; 0x80
 8003d52:	d107      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fae0 	bl	8004324 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6e:	2b40      	cmp	r3, #64	; 0x40
 8003d70:	d10e      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7c:	2b40      	cmp	r3, #64	; 0x40
 8003d7e:	d107      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f8ff 	bl	8003f8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f003 0320 	and.w	r3, r3, #32
 8003d9a:	2b20      	cmp	r3, #32
 8003d9c:	d10e      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f003 0320 	and.w	r3, r3, #32
 8003da8:	2b20      	cmp	r3, #32
 8003daa:	d107      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f06f 0220 	mvn.w	r2, #32
 8003db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 faaa 	bl	8004310 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dbc:	bf00      	nop
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_TIM_ConfigClockSource+0x1c>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e0b4      	b.n	8003f4a <HAL_TIM_ConfigClockSource+0x186>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e18:	d03e      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0xd4>
 8003e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e1e:	f200 8087 	bhi.w	8003f30 <HAL_TIM_ConfigClockSource+0x16c>
 8003e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e26:	f000 8086 	beq.w	8003f36 <HAL_TIM_ConfigClockSource+0x172>
 8003e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2e:	d87f      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x16c>
 8003e30:	2b70      	cmp	r3, #112	; 0x70
 8003e32:	d01a      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0xa6>
 8003e34:	2b70      	cmp	r3, #112	; 0x70
 8003e36:	d87b      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x16c>
 8003e38:	2b60      	cmp	r3, #96	; 0x60
 8003e3a:	d050      	beq.n	8003ede <HAL_TIM_ConfigClockSource+0x11a>
 8003e3c:	2b60      	cmp	r3, #96	; 0x60
 8003e3e:	d877      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x16c>
 8003e40:	2b50      	cmp	r3, #80	; 0x50
 8003e42:	d03c      	beq.n	8003ebe <HAL_TIM_ConfigClockSource+0xfa>
 8003e44:	2b50      	cmp	r3, #80	; 0x50
 8003e46:	d873      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x16c>
 8003e48:	2b40      	cmp	r3, #64	; 0x40
 8003e4a:	d058      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0x13a>
 8003e4c:	2b40      	cmp	r3, #64	; 0x40
 8003e4e:	d86f      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x16c>
 8003e50:	2b30      	cmp	r3, #48	; 0x30
 8003e52:	d064      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x15a>
 8003e54:	2b30      	cmp	r3, #48	; 0x30
 8003e56:	d86b      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x16c>
 8003e58:	2b20      	cmp	r3, #32
 8003e5a:	d060      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x15a>
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	d867      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x16c>
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d05c      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x15a>
 8003e64:	2b10      	cmp	r3, #16
 8003e66:	d05a      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x15a>
 8003e68:	e062      	b.n	8003f30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	6899      	ldr	r1, [r3, #8]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f000 f9ad 	bl	80041d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	609a      	str	r2, [r3, #8]
      break;
 8003e96:	e04f      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	6899      	ldr	r1, [r3, #8]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f000 f996 	bl	80041d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eba:	609a      	str	r2, [r3, #8]
      break;
 8003ebc:	e03c      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	6859      	ldr	r1, [r3, #4]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	f000 f90a 	bl	80040e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2150      	movs	r1, #80	; 0x50
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 f963 	bl	80041a2 <TIM_ITRx_SetConfig>
      break;
 8003edc:	e02c      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	6859      	ldr	r1, [r3, #4]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	461a      	mov	r2, r3
 8003eec:	f000 f929 	bl	8004142 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2160      	movs	r1, #96	; 0x60
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 f953 	bl	80041a2 <TIM_ITRx_SetConfig>
      break;
 8003efc:	e01c      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	6859      	ldr	r1, [r3, #4]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f000 f8ea 	bl	80040e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2140      	movs	r1, #64	; 0x40
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 f943 	bl	80041a2 <TIM_ITRx_SetConfig>
      break;
 8003f1c:	e00c      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4619      	mov	r1, r3
 8003f28:	4610      	mov	r0, r2
 8003f2a:	f000 f93a 	bl	80041a2 <TIM_ITRx_SetConfig>
      break;
 8003f2e:	e003      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	73fb      	strb	r3, [r7, #15]
      break;
 8003f34:	e000      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
	...

08003fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a40      	ldr	r2, [pc, #256]	; (80040b8 <TIM_Base_SetConfig+0x114>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d013      	beq.n	8003fe4 <TIM_Base_SetConfig+0x40>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc2:	d00f      	beq.n	8003fe4 <TIM_Base_SetConfig+0x40>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a3d      	ldr	r2, [pc, #244]	; (80040bc <TIM_Base_SetConfig+0x118>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d00b      	beq.n	8003fe4 <TIM_Base_SetConfig+0x40>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a3c      	ldr	r2, [pc, #240]	; (80040c0 <TIM_Base_SetConfig+0x11c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d007      	beq.n	8003fe4 <TIM_Base_SetConfig+0x40>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a3b      	ldr	r2, [pc, #236]	; (80040c4 <TIM_Base_SetConfig+0x120>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d003      	beq.n	8003fe4 <TIM_Base_SetConfig+0x40>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a3a      	ldr	r2, [pc, #232]	; (80040c8 <TIM_Base_SetConfig+0x124>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d108      	bne.n	8003ff6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a2f      	ldr	r2, [pc, #188]	; (80040b8 <TIM_Base_SetConfig+0x114>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d02b      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004004:	d027      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a2c      	ldr	r2, [pc, #176]	; (80040bc <TIM_Base_SetConfig+0x118>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d023      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a2b      	ldr	r2, [pc, #172]	; (80040c0 <TIM_Base_SetConfig+0x11c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d01f      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a2a      	ldr	r2, [pc, #168]	; (80040c4 <TIM_Base_SetConfig+0x120>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d01b      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a29      	ldr	r2, [pc, #164]	; (80040c8 <TIM_Base_SetConfig+0x124>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d017      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a28      	ldr	r2, [pc, #160]	; (80040cc <TIM_Base_SetConfig+0x128>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d013      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a27      	ldr	r2, [pc, #156]	; (80040d0 <TIM_Base_SetConfig+0x12c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d00f      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a26      	ldr	r2, [pc, #152]	; (80040d4 <TIM_Base_SetConfig+0x130>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d00b      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a25      	ldr	r2, [pc, #148]	; (80040d8 <TIM_Base_SetConfig+0x134>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d007      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a24      	ldr	r2, [pc, #144]	; (80040dc <TIM_Base_SetConfig+0x138>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d003      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a23      	ldr	r2, [pc, #140]	; (80040e0 <TIM_Base_SetConfig+0x13c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d108      	bne.n	8004068 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a0a      	ldr	r2, [pc, #40]	; (80040b8 <TIM_Base_SetConfig+0x114>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d003      	beq.n	800409c <TIM_Base_SetConfig+0xf8>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a0c      	ldr	r2, [pc, #48]	; (80040c8 <TIM_Base_SetConfig+0x124>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d103      	bne.n	80040a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	691a      	ldr	r2, [r3, #16]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	615a      	str	r2, [r3, #20]
}
 80040aa:	bf00      	nop
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40010000 	.word	0x40010000
 80040bc:	40000400 	.word	0x40000400
 80040c0:	40000800 	.word	0x40000800
 80040c4:	40000c00 	.word	0x40000c00
 80040c8:	40010400 	.word	0x40010400
 80040cc:	40014000 	.word	0x40014000
 80040d0:	40014400 	.word	0x40014400
 80040d4:	40014800 	.word	0x40014800
 80040d8:	40001800 	.word	0x40001800
 80040dc:	40001c00 	.word	0x40001c00
 80040e0:	40002000 	.word	0x40002000

080040e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	f023 0201 	bic.w	r2, r3, #1
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800410e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4313      	orrs	r3, r2
 8004118:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f023 030a 	bic.w	r3, r3, #10
 8004120:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4313      	orrs	r3, r2
 8004128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	621a      	str	r2, [r3, #32]
}
 8004136:	bf00      	nop
 8004138:	371c      	adds	r7, #28
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004142:	b480      	push	{r7}
 8004144:	b087      	sub	sp, #28
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	f023 0210 	bic.w	r2, r3, #16
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800416c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	031b      	lsls	r3, r3, #12
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800417e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	621a      	str	r2, [r3, #32]
}
 8004196:	bf00      	nop
 8004198:	371c      	adds	r7, #28
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b085      	sub	sp, #20
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	f043 0307 	orr.w	r3, r3, #7
 80041c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	609a      	str	r2, [r3, #8]
}
 80041cc:	bf00      	nop
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
 80041e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	021a      	lsls	r2, r3, #8
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	431a      	orrs	r2, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	4313      	orrs	r3, r2
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	4313      	orrs	r3, r2
 8004204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	609a      	str	r2, [r3, #8]
}
 800420c:	bf00      	nop
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800422c:	2302      	movs	r3, #2
 800422e:	e05a      	b.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004256:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	4313      	orrs	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a21      	ldr	r2, [pc, #132]	; (80042f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d022      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427c:	d01d      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a1d      	ldr	r2, [pc, #116]	; (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d018      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a1b      	ldr	r2, [pc, #108]	; (80042fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d013      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a1a      	ldr	r2, [pc, #104]	; (8004300 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00e      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a18      	ldr	r2, [pc, #96]	; (8004304 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d009      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a17      	ldr	r2, [pc, #92]	; (8004308 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d004      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a15      	ldr	r2, [pc, #84]	; (800430c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d10c      	bne.n	80042d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40010000 	.word	0x40010000
 80042f8:	40000400 	.word	0x40000400
 80042fc:	40000800 	.word	0x40000800
 8004300:	40000c00 	.word	0x40000c00
 8004304:	40010400 	.word	0x40010400
 8004308:	40014000 	.word	0x40014000
 800430c:	40001800 	.word	0x40001800

08004310 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004350:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4b20      	ldr	r3, [pc, #128]	; (80043d8 <FSMC_NORSRAM_Init+0xa0>)
 8004356:	4013      	ands	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004362:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8004368:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800436e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8004374:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800437a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8004380:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8004386:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800438c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8004392:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8004398:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800439e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80043a4:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d103      	bne.n	80043bc <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043ba:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68f9      	ldr	r1, [r7, #12]
 80043c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	fff00080 	.word	0xfff00080

080043dc <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043f6:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80043fe:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800440a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004412:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800441a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	3b01      	subs	r3, #1
 8004422:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004424:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	3b02      	subs	r3, #2
 800442c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800442e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004434:	4313      	orrs	r3, r2
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	4313      	orrs	r3, r2
 800443a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6979      	ldr	r1, [r7, #20]
 8004444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	371c      	adds	r7, #28
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
	...

08004458 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004470:	d122      	bne.n	80044b8 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800447a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	4b15      	ldr	r3, [pc, #84]	; (80044d4 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8004480:	4013      	ands	r3, r2
 8004482:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800448e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004496:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800449e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80044a4:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6979      	ldr	r1, [r7, #20]
 80044b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80044b6:	e005      	b.n	80044c4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80044c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	371c      	adds	r7, #28
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	cff00000 	.word	0xcff00000

080044d8 <__libc_init_array>:
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	4d0d      	ldr	r5, [pc, #52]	; (8004510 <__libc_init_array+0x38>)
 80044dc:	4c0d      	ldr	r4, [pc, #52]	; (8004514 <__libc_init_array+0x3c>)
 80044de:	1b64      	subs	r4, r4, r5
 80044e0:	10a4      	asrs	r4, r4, #2
 80044e2:	2600      	movs	r6, #0
 80044e4:	42a6      	cmp	r6, r4
 80044e6:	d109      	bne.n	80044fc <__libc_init_array+0x24>
 80044e8:	4d0b      	ldr	r5, [pc, #44]	; (8004518 <__libc_init_array+0x40>)
 80044ea:	4c0c      	ldr	r4, [pc, #48]	; (800451c <__libc_init_array+0x44>)
 80044ec:	f000 f820 	bl	8004530 <_init>
 80044f0:	1b64      	subs	r4, r4, r5
 80044f2:	10a4      	asrs	r4, r4, #2
 80044f4:	2600      	movs	r6, #0
 80044f6:	42a6      	cmp	r6, r4
 80044f8:	d105      	bne.n	8004506 <__libc_init_array+0x2e>
 80044fa:	bd70      	pop	{r4, r5, r6, pc}
 80044fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004500:	4798      	blx	r3
 8004502:	3601      	adds	r6, #1
 8004504:	e7ee      	b.n	80044e4 <__libc_init_array+0xc>
 8004506:	f855 3b04 	ldr.w	r3, [r5], #4
 800450a:	4798      	blx	r3
 800450c:	3601      	adds	r6, #1
 800450e:	e7f2      	b.n	80044f6 <__libc_init_array+0x1e>
 8004510:	0800b434 	.word	0x0800b434
 8004514:	0800b434 	.word	0x0800b434
 8004518:	0800b434 	.word	0x0800b434
 800451c:	0800b438 	.word	0x0800b438

08004520 <memset>:
 8004520:	4402      	add	r2, r0
 8004522:	4603      	mov	r3, r0
 8004524:	4293      	cmp	r3, r2
 8004526:	d100      	bne.n	800452a <memset+0xa>
 8004528:	4770      	bx	lr
 800452a:	f803 1b01 	strb.w	r1, [r3], #1
 800452e:	e7f9      	b.n	8004524 <memset+0x4>

08004530 <_init>:
 8004530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004532:	bf00      	nop
 8004534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004536:	bc08      	pop	{r3}
 8004538:	469e      	mov	lr, r3
 800453a:	4770      	bx	lr

0800453c <_fini>:
 800453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453e:	bf00      	nop
 8004540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004542:	bc08      	pop	{r3}
 8004544:	469e      	mov	lr, r3
 8004546:	4770      	bx	lr
