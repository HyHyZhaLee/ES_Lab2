
Bai4_I2C_Realtimeclock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005108  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f98  08005290  08005290  00015290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008228  08008228  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008228  08008228  00018228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008230  08008230  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008230  08008230  00018230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008234  08008234  00018234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000001d0  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001e0  200001e0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013d10  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000332a  00000000  00000000  00033d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001248  00000000  00000000  00037080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010b8  00000000  00000000  000382c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002360a  00000000  00000000  00039380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017973  00000000  00000000  0005c98a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf4aa  00000000  00000000  000742fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001437a7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a88  00000000  00000000  001437f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005278 	.word	0x08005278

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005278 	.word	0x08005278

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <fsm_for_input_processing>:
#define ALARM_STATE 3


uint8_t STATUS = INIT;

void fsm_for_input_processing(){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	if(isButtonE()){
 80004d0:	f000 f932 	bl	8000738 <isButtonE>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d00c      	beq.n	80004f4 <fsm_for_input_processing+0x28>
		STATUS++;
 80004da:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <fsm_for_input_processing+0x4c>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	3301      	adds	r3, #1
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <fsm_for_input_processing+0x4c>)
 80004e4:	701a      	strb	r2, [r3, #0]
		if(STATUS>ALARM_STATE) STATUS = INIT;
 80004e6:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <fsm_for_input_processing+0x4c>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b03      	cmp	r3, #3
 80004ec:	d902      	bls.n	80004f4 <fsm_for_input_processing+0x28>
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <fsm_for_input_processing+0x4c>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	701a      	strb	r2, [r3, #0]
	}

	switch (STATUS) {
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <fsm_for_input_processing+0x4c>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d002      	beq.n	8000502 <fsm_for_input_processing+0x36>
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d004      	beq.n	800050a <fsm_for_input_processing+0x3e>
			break;
		case NORMAL_STATE:
			ds3231_ReadTime();
			displayTime();
		default:
			break;
 8000500:	e007      	b.n	8000512 <fsm_for_input_processing+0x46>
			STATUS = NORMAL_STATE;
 8000502:	4b05      	ldr	r3, [pc, #20]	; (8000518 <fsm_for_input_processing+0x4c>)
 8000504:	2201      	movs	r2, #1
 8000506:	701a      	strb	r2, [r3, #0]
			break;
 8000508:	e004      	b.n	8000514 <fsm_for_input_processing+0x48>
			ds3231_ReadTime();
 800050a:	f000 f98f 	bl	800082c <ds3231_ReadTime>
			displayTime();
 800050e:	f001 f8d5 	bl	80016bc <displayTime>
			break;
 8000512:	bf00      	nop
	}
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	2000002c 	.word	0x2000002c

0800051c <button_init>:
uint16_t button_count[16];
uint16_t spi_button = 0x0000;
uint8_t flag_for_button[3];
int longPressedCounter[3];

void button_init(){
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000522:	2201      	movs	r2, #1
 8000524:	2108      	movs	r1, #8
 8000526:	480e      	ldr	r0, [pc, #56]	; (8000560 <button_init+0x44>)
 8000528:	f001 fed2 	bl	80022d0 <HAL_GPIO_WritePin>
	for(int i = 0; i<3; i++){
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	e00d      	b.n	800054e <button_init+0x32>
		flag_for_button[i] = 0;
 8000532:	4a0c      	ldr	r2, [pc, #48]	; (8000564 <button_init+0x48>)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4413      	add	r3, r2
 8000538:	2200      	movs	r2, #0
 800053a:	701a      	strb	r2, [r3, #0]
		longPressedCounter[i] = LONG_PRESSED_DURATION;
 800053c:	4a0a      	ldr	r2, [pc, #40]	; (8000568 <button_init+0x4c>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000544:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<3; i++){
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	3301      	adds	r3, #1
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b02      	cmp	r3, #2
 8000552:	ddee      	ble.n	8000532 <button_init+0x16>
	}
}
 8000554:	bf00      	nop
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40020c00 	.word	0x40020c00
 8000564:	20000054 	.word	0x20000054
 8000568:	20000058 	.word	0x20000058

0800056c <button_Scan>:

void button_Scan(){
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2108      	movs	r1, #8
 8000576:	482f      	ldr	r0, [pc, #188]	; (8000634 <button_Scan+0xc8>)
 8000578:	f001 feaa 	bl	80022d0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800057c:	2201      	movs	r2, #1
 800057e:	2108      	movs	r1, #8
 8000580:	482c      	ldr	r0, [pc, #176]	; (8000634 <button_Scan+0xc8>)
 8000582:	f001 fea5 	bl	80022d0 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000586:	230a      	movs	r3, #10
 8000588:	2202      	movs	r2, #2
 800058a:	492b      	ldr	r1, [pc, #172]	; (8000638 <button_Scan+0xcc>)
 800058c:	482b      	ldr	r0, [pc, #172]	; (800063c <button_Scan+0xd0>)
 800058e:	f003 fcce 	bl	8003f2e <HAL_SPI_Receive>
	  int button_index = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800059a:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	e03f      	b.n	8000622 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	db06      	blt.n	80005b6 <button_Scan+0x4a>
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b03      	cmp	r3, #3
 80005ac:	dc03      	bgt.n	80005b6 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	3304      	adds	r3, #4
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	e018      	b.n	80005e8 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2b03      	cmp	r3, #3
 80005ba:	dd07      	ble.n	80005cc <button_Scan+0x60>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b07      	cmp	r3, #7
 80005c0:	dc04      	bgt.n	80005cc <button_Scan+0x60>
			  button_index = 7 - i;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f1c3 0307 	rsb	r3, r3, #7
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	e00d      	b.n	80005e8 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2b07      	cmp	r3, #7
 80005d0:	dd06      	ble.n	80005e0 <button_Scan+0x74>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b0b      	cmp	r3, #11
 80005d6:	dc03      	bgt.n	80005e0 <button_Scan+0x74>
			  button_index = i + 4;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	3304      	adds	r3, #4
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	e003      	b.n	80005e8 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f1c3 0317 	rsb	r3, r3, #23
 80005e6:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <button_Scan+0xcc>)
 80005ea:	881a      	ldrh	r2, [r3, #0]
 80005ec:	897b      	ldrh	r3, [r7, #10]
 80005ee:	4013      	ands	r3, r2
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d005      	beq.n	8000602 <button_Scan+0x96>
 80005f6:	4a12      	ldr	r2, [pc, #72]	; (8000640 <button_Scan+0xd4>)
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	2100      	movs	r1, #0
 80005fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000600:	e009      	b.n	8000616 <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000602:	4a0f      	ldr	r2, [pc, #60]	; (8000640 <button_Scan+0xd4>)
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800060a:	3301      	adds	r3, #1
 800060c:	b299      	uxth	r1, r3
 800060e:	4a0c      	ldr	r2, [pc, #48]	; (8000640 <button_Scan+0xd4>)
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000616:	897b      	ldrh	r3, [r7, #10]
 8000618:	085b      	lsrs	r3, r3, #1
 800061a:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3301      	adds	r3, #1
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b0f      	cmp	r3, #15
 8000626:	ddbc      	ble.n	80005a2 <button_Scan+0x36>
	  }
}
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40020c00 	.word	0x40020c00
 8000638:	20000050 	.word	0x20000050
 800063c:	2000013c 	.word	0x2000013c
 8000640:	20000030 	.word	0x20000030

08000644 <inputProcessing>:

void inputProcessing(){
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
	if(button_count[3] >= 1){
 8000648:	4b38      	ldr	r3, [pc, #224]	; (800072c <inputProcessing+0xe8>)
 800064a:	88db      	ldrh	r3, [r3, #6]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d01b      	beq.n	8000688 <inputProcessing+0x44>
		if(longPressedCounter[0] == LONG_PRESSED_DURATION){
 8000650:	4b37      	ldr	r3, [pc, #220]	; (8000730 <inputProcessing+0xec>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000658:	d108      	bne.n	800066c <inputProcessing+0x28>
			flag_for_button[0] = 1;
 800065a:	4b36      	ldr	r3, [pc, #216]	; (8000734 <inputProcessing+0xf0>)
 800065c:	2201      	movs	r2, #1
 800065e:	701a      	strb	r2, [r3, #0]
			longPressedCounter[0]--;
 8000660:	4b33      	ldr	r3, [pc, #204]	; (8000730 <inputProcessing+0xec>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	3b01      	subs	r3, #1
 8000666:	4a32      	ldr	r2, [pc, #200]	; (8000730 <inputProcessing+0xec>)
 8000668:	6013      	str	r3, [r2, #0]
 800066a:	e011      	b.n	8000690 <inputProcessing+0x4c>
		}
		else {
			longPressedCounter[0]--;
 800066c:	4b30      	ldr	r3, [pc, #192]	; (8000730 <inputProcessing+0xec>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	3b01      	subs	r3, #1
 8000672:	4a2f      	ldr	r2, [pc, #188]	; (8000730 <inputProcessing+0xec>)
 8000674:	6013      	str	r3, [r2, #0]
			if(longPressedCounter[0]<=0) {
 8000676:	4b2e      	ldr	r3, [pc, #184]	; (8000730 <inputProcessing+0xec>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	dc08      	bgt.n	8000690 <inputProcessing+0x4c>
				longPressedCounter[0] = LONG_PRESSED_DURATION;
 800067e:	4b2c      	ldr	r3, [pc, #176]	; (8000730 <inputProcessing+0xec>)
 8000680:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	e003      	b.n	8000690 <inputProcessing+0x4c>
			}
		}
	}
	else longPressedCounter[0] = LONG_PRESSED_DURATION;
 8000688:	4b29      	ldr	r3, [pc, #164]	; (8000730 <inputProcessing+0xec>)
 800068a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800068e:	601a      	str	r2, [r3, #0]


	if(button_count[7] >= 1){
 8000690:	4b26      	ldr	r3, [pc, #152]	; (800072c <inputProcessing+0xe8>)
 8000692:	89db      	ldrh	r3, [r3, #14]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d01b      	beq.n	80006d0 <inputProcessing+0x8c>
		if(longPressedCounter[1] == LONG_PRESSED_DURATION){
 8000698:	4b25      	ldr	r3, [pc, #148]	; (8000730 <inputProcessing+0xec>)
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80006a0:	d108      	bne.n	80006b4 <inputProcessing+0x70>
			flag_for_button[1] = 1;
 80006a2:	4b24      	ldr	r3, [pc, #144]	; (8000734 <inputProcessing+0xf0>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	705a      	strb	r2, [r3, #1]
			longPressedCounter[1]--;
 80006a8:	4b21      	ldr	r3, [pc, #132]	; (8000730 <inputProcessing+0xec>)
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	4a20      	ldr	r2, [pc, #128]	; (8000730 <inputProcessing+0xec>)
 80006b0:	6053      	str	r3, [r2, #4]
 80006b2:	e011      	b.n	80006d8 <inputProcessing+0x94>
		}
		else {
			longPressedCounter[1]--;
 80006b4:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <inputProcessing+0xec>)
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	3b01      	subs	r3, #1
 80006ba:	4a1d      	ldr	r2, [pc, #116]	; (8000730 <inputProcessing+0xec>)
 80006bc:	6053      	str	r3, [r2, #4]
			if(longPressedCounter[1]<=0) {
 80006be:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <inputProcessing+0xec>)
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	dc08      	bgt.n	80006d8 <inputProcessing+0x94>
				longPressedCounter[1] = LONG_PRESSED_DURATION;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <inputProcessing+0xec>)
 80006c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	e003      	b.n	80006d8 <inputProcessing+0x94>
			}
		}
	}
	else longPressedCounter[1] = LONG_PRESSED_DURATION;
 80006d0:	4b17      	ldr	r3, [pc, #92]	; (8000730 <inputProcessing+0xec>)
 80006d2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80006d6:	605a      	str	r2, [r3, #4]

	if((button_count[12] >= 1)){
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <inputProcessing+0xe8>)
 80006da:	8b1b      	ldrh	r3, [r3, #24]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d01b      	beq.n	8000718 <inputProcessing+0xd4>
		if(longPressedCounter[2] == LONG_PRESSED_DURATION){
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <inputProcessing+0xec>)
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80006e8:	d108      	bne.n	80006fc <inputProcessing+0xb8>
			flag_for_button[2] = 1;
 80006ea:	4b12      	ldr	r3, [pc, #72]	; (8000734 <inputProcessing+0xf0>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	709a      	strb	r2, [r3, #2]
			longPressedCounter[2]--;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <inputProcessing+0xec>)
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	3b01      	subs	r3, #1
 80006f6:	4a0e      	ldr	r2, [pc, #56]	; (8000730 <inputProcessing+0xec>)
 80006f8:	6093      	str	r3, [r2, #8]
				longPressedCounter[2] = LONG_PRESSED_DURATION;
			}
		}
	}
	else longPressedCounter[2] = LONG_PRESSED_DURATION;
}
 80006fa:	e011      	b.n	8000720 <inputProcessing+0xdc>
			longPressedCounter[2]--;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <inputProcessing+0xec>)
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	3b01      	subs	r3, #1
 8000702:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <inputProcessing+0xec>)
 8000704:	6093      	str	r3, [r2, #8]
			if(longPressedCounter[2]<=0) {
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <inputProcessing+0xec>)
 8000708:	689b      	ldr	r3, [r3, #8]
 800070a:	2b00      	cmp	r3, #0
 800070c:	dc08      	bgt.n	8000720 <inputProcessing+0xdc>
				longPressedCounter[2] = LONG_PRESSED_DURATION;
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <inputProcessing+0xec>)
 8000710:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000714:	609a      	str	r2, [r3, #8]
}
 8000716:	e003      	b.n	8000720 <inputProcessing+0xdc>
	else longPressedCounter[2] = LONG_PRESSED_DURATION;
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <inputProcessing+0xec>)
 800071a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800071e:	609a      	str	r2, [r3, #8]
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	20000030 	.word	0x20000030
 8000730:	20000058 	.word	0x20000058
 8000734:	20000054 	.word	0x20000054

08000738 <isButtonE>:
    else{
    	return 0;
    }
}
uint8_t isButtonE()
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
    if(flag_for_button[2]){
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <isButtonE+0x24>)
 800073e:	789b      	ldrb	r3, [r3, #2]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d004      	beq.n	800074e <isButtonE+0x16>
    	flag_for_button[2] = 0;
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <isButtonE+0x24>)
 8000746:	2200      	movs	r2, #0
 8000748:	709a      	strb	r2, [r3, #2]
    	return 1;
 800074a:	2301      	movs	r3, #1
 800074c:	e000      	b.n	8000750 <isButtonE+0x18>
    }
    else{
    	return 0;
 800074e:	2300      	movs	r3, #0
    }
}
 8000750:	4618      	mov	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	20000054 	.word	0x20000054

08000760 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 8000764:	201e      	movs	r0, #30
 8000766:	f001 fa21 	bl	8001bac <DEC2BCD>
 800076a:	4603      	mov	r3, r0
 800076c:	461a      	mov	r2, r3
 800076e:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <ds3231_init+0x80>)
 8000770:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 8000772:	2016      	movs	r0, #22
 8000774:	f001 fa1a 	bl	8001bac <DEC2BCD>
 8000778:	4603      	mov	r3, r0
 800077a:	461a      	mov	r2, r3
 800077c:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <ds3231_init+0x80>)
 800077e:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 8000780:	2015      	movs	r0, #21
 8000782:	f001 fa13 	bl	8001bac <DEC2BCD>
 8000786:	4603      	mov	r3, r0
 8000788:	461a      	mov	r2, r3
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <ds3231_init+0x80>)
 800078c:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 800078e:	2006      	movs	r0, #6
 8000790:	f001 fa0c 	bl	8001bac <DEC2BCD>
 8000794:	4603      	mov	r3, r0
 8000796:	461a      	mov	r2, r3
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <ds3231_init+0x80>)
 800079a:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 800079c:	200f      	movs	r0, #15
 800079e:	f001 fa05 	bl	8001bac <DEC2BCD>
 80007a2:	4603      	mov	r3, r0
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <ds3231_init+0x80>)
 80007a8:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 80007aa:	2009      	movs	r0, #9
 80007ac:	f001 f9fe 	bl	8001bac <DEC2BCD>
 80007b0:	4603      	mov	r3, r0
 80007b2:	461a      	mov	r2, r3
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <ds3231_init+0x80>)
 80007b6:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 80007b8:	2017      	movs	r0, #23
 80007ba:	f001 f9f7 	bl	8001bac <DEC2BCD>
 80007be:	4603      	mov	r3, r0
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <ds3231_init+0x80>)
 80007c4:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 80007c6:	2332      	movs	r3, #50	; 0x32
 80007c8:	2203      	movs	r2, #3
 80007ca:	21d0      	movs	r1, #208	; 0xd0
 80007cc:	4805      	ldr	r0, [pc, #20]	; (80007e4 <ds3231_init+0x84>)
 80007ce:	f002 fa17 	bl	8002c00 <HAL_I2C_IsDeviceReady>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d000      	beq.n	80007da <ds3231_init+0x7a>
		while(1);
 80007d8:	e7fe      	b.n	80007d8 <ds3231_init+0x78>
	};
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000064 	.word	0x20000064
 80007e4:	200000c8 	.word	0x200000c8

080007e8 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af04      	add	r7, sp, #16
 80007ee:	4603      	mov	r3, r0
 80007f0:	460a      	mov	r2, r1
 80007f2:	71fb      	strb	r3, [r7, #7]
 80007f4:	4613      	mov	r3, r2
 80007f6:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 80007f8:	79bb      	ldrb	r3, [r7, #6]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 f9d6 	bl	8001bac <DEC2BCD>
 8000800:	4603      	mov	r3, r0
 8000802:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	b29a      	uxth	r2, r3
 8000808:	230a      	movs	r3, #10
 800080a:	9302      	str	r3, [sp, #8]
 800080c:	2301      	movs	r3, #1
 800080e:	9301      	str	r3, [sp, #4]
 8000810:	f107 030f 	add.w	r3, r7, #15
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	2301      	movs	r3, #1
 8000818:	21d0      	movs	r1, #208	; 0xd0
 800081a:	4803      	ldr	r0, [pc, #12]	; (8000828 <ds3231_Write+0x40>)
 800081c:	f001 fed0 	bl	80025c0 <HAL_I2C_Mem_Write>
}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200000c8 	.word	0x200000c8

0800082c <ds3231_ReadTime>:

void ds3231_ReadTime(){
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8000832:	230a      	movs	r3, #10
 8000834:	9302      	str	r3, [sp, #8]
 8000836:	2307      	movs	r3, #7
 8000838:	9301      	str	r3, [sp, #4]
 800083a:	4b25      	ldr	r3, [pc, #148]	; (80008d0 <ds3231_ReadTime+0xa4>)
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	2301      	movs	r3, #1
 8000840:	2200      	movs	r2, #0
 8000842:	21d0      	movs	r1, #208	; 0xd0
 8000844:	4823      	ldr	r0, [pc, #140]	; (80008d4 <ds3231_ReadTime+0xa8>)
 8000846:	f001 ffb5 	bl	80027b4 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 800084a:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <ds3231_ReadTime+0xa4>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	4618      	mov	r0, r3
 8000850:	f001 f993 	bl	8001b7a <BCD2DEC>
 8000854:	4603      	mov	r3, r0
 8000856:	461a      	mov	r2, r3
 8000858:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <ds3231_ReadTime+0xac>)
 800085a:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 800085c:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <ds3231_ReadTime+0xa4>)
 800085e:	785b      	ldrb	r3, [r3, #1]
 8000860:	4618      	mov	r0, r3
 8000862:	f001 f98a 	bl	8001b7a <BCD2DEC>
 8000866:	4603      	mov	r3, r0
 8000868:	461a      	mov	r2, r3
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <ds3231_ReadTime+0xb0>)
 800086c:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <ds3231_ReadTime+0xa4>)
 8000870:	789b      	ldrb	r3, [r3, #2]
 8000872:	4618      	mov	r0, r3
 8000874:	f001 f981 	bl	8001b7a <BCD2DEC>
 8000878:	4603      	mov	r3, r0
 800087a:	461a      	mov	r2, r3
 800087c:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <ds3231_ReadTime+0xb4>)
 800087e:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <ds3231_ReadTime+0xa4>)
 8000882:	78db      	ldrb	r3, [r3, #3]
 8000884:	4618      	mov	r0, r3
 8000886:	f001 f978 	bl	8001b7a <BCD2DEC>
 800088a:	4603      	mov	r3, r0
 800088c:	461a      	mov	r2, r3
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <ds3231_ReadTime+0xb8>)
 8000890:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <ds3231_ReadTime+0xa4>)
 8000894:	791b      	ldrb	r3, [r3, #4]
 8000896:	4618      	mov	r0, r3
 8000898:	f001 f96f 	bl	8001b7a <BCD2DEC>
 800089c:	4603      	mov	r3, r0
 800089e:	461a      	mov	r2, r3
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <ds3231_ReadTime+0xbc>)
 80008a2:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <ds3231_ReadTime+0xa4>)
 80008a6:	795b      	ldrb	r3, [r3, #5]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 f966 	bl	8001b7a <BCD2DEC>
 80008ae:	4603      	mov	r3, r0
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <ds3231_ReadTime+0xc0>)
 80008b4:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <ds3231_ReadTime+0xa4>)
 80008b8:	799b      	ldrb	r3, [r3, #6]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f001 f95d 	bl	8001b7a <BCD2DEC>
 80008c0:	4603      	mov	r3, r0
 80008c2:	461a      	mov	r2, r3
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <ds3231_ReadTime+0xc4>)
 80008c6:	701a      	strb	r2, [r3, #0]
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000064 	.word	0x20000064
 80008d4:	200000c8 	.word	0x200000c8
 80008d8:	2000006d 	.word	0x2000006d
 80008dc:	2000006c 	.word	0x2000006c
 80008e0:	2000006b 	.word	0x2000006b
 80008e4:	2000006f 	.word	0x2000006f
 80008e8:	2000006e 	.word	0x2000006e
 80008ec:	20000070 	.word	0x20000070
 80008f0:	20000071 	.word	0x20000071

080008f4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08e      	sub	sp, #56	; 0x38
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]
 800090a:	615a      	str	r2, [r3, #20]
 800090c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800090e:	463b      	mov	r3, r7
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
 800091c:	615a      	str	r2, [r3, #20]
 800091e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000920:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <MX_FSMC_Init+0xec>)
 8000922:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000926:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000928:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <MX_FSMC_Init+0xec>)
 800092a:	4a2e      	ldr	r2, [pc, #184]	; (80009e4 <MX_FSMC_Init+0xf0>)
 800092c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800092e:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <MX_FSMC_Init+0xec>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000934:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <MX_FSMC_Init+0xec>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800093a:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <MX_FSMC_Init+0xec>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000940:	4b27      	ldr	r3, [pc, #156]	; (80009e0 <MX_FSMC_Init+0xec>)
 8000942:	2210      	movs	r2, #16
 8000944:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000946:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <MX_FSMC_Init+0xec>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <MX_FSMC_Init+0xec>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000952:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <MX_FSMC_Init+0xec>)
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000958:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <MX_FSMC_Init+0xec>)
 800095a:	2200      	movs	r2, #0
 800095c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800095e:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <MX_FSMC_Init+0xec>)
 8000960:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000964:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000966:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <MX_FSMC_Init+0xec>)
 8000968:	2200      	movs	r2, #0
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800096c:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <MX_FSMC_Init+0xec>)
 800096e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000972:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_FSMC_Init+0xec>)
 8000976:	2200      	movs	r2, #0
 8000978:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <MX_FSMC_Init+0xec>)
 800097c:	2200      	movs	r2, #0
 800097e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_FSMC_Init+0xec>)
 8000982:	2200      	movs	r2, #0
 8000984:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000986:	230f      	movs	r3, #15
 8000988:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800098a:	230f      	movs	r3, #15
 800098c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800098e:	233c      	movs	r3, #60	; 0x3c
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000996:	2310      	movs	r3, #16
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800099a:	2311      	movs	r3, #17
 800099c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80009a2:	2308      	movs	r3, #8
 80009a4:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80009a6:	230f      	movs	r3, #15
 80009a8:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80009aa:	2309      	movs	r3, #9
 80009ac:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80009b2:	2310      	movs	r3, #16
 80009b4:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80009b6:	2311      	movs	r3, #17
 80009b8:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80009be:	463a      	mov	r2, r7
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	; (80009e0 <MX_FSMC_Init+0xec>)
 80009c8:	f003 fe94 	bl	80046f4 <HAL_SRAM_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80009d2:	f000 fefd 	bl	80017d0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80009d6:	bf00      	nop
 80009d8:	3738      	adds	r7, #56	; 0x38
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000074 	.word	0x20000074
 80009e4:	a0000104 	.word	0xa0000104

080009e8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80009fc:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <HAL_FSMC_MspInit+0x88>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d131      	bne.n	8000a68 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000a04:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <HAL_FSMC_MspInit+0x88>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <HAL_FSMC_MspInit+0x8c>)
 8000a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a12:	4a18      	ldr	r2, [pc, #96]	; (8000a74 <HAL_FSMC_MspInit+0x8c>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6393      	str	r3, [r2, #56]	; 0x38
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <HAL_FSMC_MspInit+0x8c>)
 8000a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000a26:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000a2a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a34:	2303      	movs	r3, #3
 8000a36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000a38:	230c      	movs	r3, #12
 8000a3a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480d      	ldr	r0, [pc, #52]	; (8000a78 <HAL_FSMC_MspInit+0x90>)
 8000a42:	f001 faa9 	bl	8001f98 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000a46:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000a4a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4806      	ldr	r0, [pc, #24]	; (8000a7c <HAL_FSMC_MspInit+0x94>)
 8000a62:	f001 fa99 	bl	8001f98 <HAL_GPIO_Init>
 8000a66:	e000      	b.n	8000a6a <HAL_FSMC_MspInit+0x82>
    return;
 8000a68:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000a6a:	3718      	adds	r7, #24
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200000c4 	.word	0x200000c4
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40020c00 	.word	0x40020c00

08000a80 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000a88:	f7ff ffae 	bl	80009e8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08c      	sub	sp, #48	; 0x30
 8000a98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61bb      	str	r3, [r7, #24]
 8000aae:	4b6f      	ldr	r3, [pc, #444]	; (8000c6c <MX_GPIO_Init+0x1d8>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a6e      	ldr	r2, [pc, #440]	; (8000c6c <MX_GPIO_Init+0x1d8>)
 8000ab4:	f043 0310 	orr.w	r3, r3, #16
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b6c      	ldr	r3, [pc, #432]	; (8000c6c <MX_GPIO_Init+0x1d8>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0310 	and.w	r3, r3, #16
 8000ac2:	61bb      	str	r3, [r7, #24]
 8000ac4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	4b68      	ldr	r3, [pc, #416]	; (8000c6c <MX_GPIO_Init+0x1d8>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a67      	ldr	r2, [pc, #412]	; (8000c6c <MX_GPIO_Init+0x1d8>)
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b65      	ldr	r3, [pc, #404]	; (8000c6c <MX_GPIO_Init+0x1d8>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0304 	and.w	r3, r3, #4
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b61      	ldr	r3, [pc, #388]	; (8000c6c <MX_GPIO_Init+0x1d8>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a60      	ldr	r2, [pc, #384]	; (8000c6c <MX_GPIO_Init+0x1d8>)
 8000aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b5e      	ldr	r3, [pc, #376]	; (8000c6c <MX_GPIO_Init+0x1d8>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b5a      	ldr	r3, [pc, #360]	; (8000c6c <MX_GPIO_Init+0x1d8>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a59      	ldr	r2, [pc, #356]	; (8000c6c <MX_GPIO_Init+0x1d8>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b57      	ldr	r3, [pc, #348]	; (8000c6c <MX_GPIO_Init+0x1d8>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	4b53      	ldr	r3, [pc, #332]	; (8000c6c <MX_GPIO_Init+0x1d8>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a52      	ldr	r2, [pc, #328]	; (8000c6c <MX_GPIO_Init+0x1d8>)
 8000b24:	f043 0308 	orr.w	r3, r3, #8
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b50      	ldr	r3, [pc, #320]	; (8000c6c <MX_GPIO_Init+0x1d8>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0308 	and.w	r3, r3, #8
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	4b4c      	ldr	r3, [pc, #304]	; (8000c6c <MX_GPIO_Init+0x1d8>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a4b      	ldr	r2, [pc, #300]	; (8000c6c <MX_GPIO_Init+0x1d8>)
 8000b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b49      	ldr	r3, [pc, #292]	; (8000c6c <MX_GPIO_Init+0x1d8>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	603b      	str	r3, [r7, #0]
 8000b56:	4b45      	ldr	r3, [pc, #276]	; (8000c6c <MX_GPIO_Init+0x1d8>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a44      	ldr	r2, [pc, #272]	; (8000c6c <MX_GPIO_Init+0x1d8>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b42      	ldr	r3, [pc, #264]	; (8000c6c <MX_GPIO_Init+0x1d8>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2170      	movs	r1, #112	; 0x70
 8000b72:	483f      	ldr	r0, [pc, #252]	; (8000c70 <MX_GPIO_Init+0x1dc>)
 8000b74:	f001 fbac 	bl	80022d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b7e:	483d      	ldr	r0, [pc, #244]	; (8000c74 <MX_GPIO_Init+0x1e0>)
 8000b80:	f001 fba6 	bl	80022d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2140      	movs	r1, #64	; 0x40
 8000b88:	483b      	ldr	r0, [pc, #236]	; (8000c78 <MX_GPIO_Init+0x1e4>)
 8000b8a:	f001 fba1 	bl	80022d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b94:	4839      	ldr	r0, [pc, #228]	; (8000c7c <MX_GPIO_Init+0x1e8>)
 8000b96:	f001 fb9b 	bl	80022d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2108      	movs	r1, #8
 8000b9e:	4838      	ldr	r0, [pc, #224]	; (8000c80 <MX_GPIO_Init+0x1ec>)
 8000ba0:	f001 fb96 	bl	80022d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000ba4:	2370      	movs	r3, #112	; 0x70
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	4619      	mov	r1, r3
 8000bba:	482d      	ldr	r0, [pc, #180]	; (8000c70 <MX_GPIO_Init+0x1dc>)
 8000bbc:	f001 f9ec 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000bc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 031c 	add.w	r3, r7, #28
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4826      	ldr	r0, [pc, #152]	; (8000c74 <MX_GPIO_Init+0x1e0>)
 8000bda:	f001 f9dd 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000bde:	23c0      	movs	r3, #192	; 0xc0
 8000be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be2:	2300      	movs	r3, #0
 8000be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4822      	ldr	r0, [pc, #136]	; (8000c7c <MX_GPIO_Init+0x1e8>)
 8000bf2:	f001 f9d1 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000bf6:	2330      	movs	r3, #48	; 0x30
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	4619      	mov	r1, r3
 8000c08:	481a      	ldr	r0, [pc, #104]	; (8000c74 <MX_GPIO_Init+0x1e0>)
 8000c0a:	f001 f9c5 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000c0e:	2340      	movs	r3, #64	; 0x40
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	4619      	mov	r1, r3
 8000c24:	4814      	ldr	r0, [pc, #80]	; (8000c78 <MX_GPIO_Init+0x1e4>)
 8000c26:	f001 f9b7 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000c2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	4619      	mov	r1, r3
 8000c42:	480e      	ldr	r0, [pc, #56]	; (8000c7c <MX_GPIO_Init+0x1e8>)
 8000c44:	f001 f9a8 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000c48:	2308      	movs	r3, #8
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4808      	ldr	r0, [pc, #32]	; (8000c80 <MX_GPIO_Init+0x1ec>)
 8000c60:	f001 f99a 	bl	8001f98 <HAL_GPIO_Init>

}
 8000c64:	bf00      	nop
 8000c66:	3730      	adds	r7, #48	; 0x30
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40020800 	.word	0x40020800
 8000c78:	40021800 	.word	0x40021800
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	40020c00 	.word	0x40020c00

08000c84 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <MX_I2C1_Init+0x50>)
 8000c8a:	4a13      	ldr	r2, [pc, #76]	; (8000cd8 <MX_I2C1_Init+0x54>)
 8000c8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <MX_I2C1_Init+0x50>)
 8000c90:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <MX_I2C1_Init+0x58>)
 8000c92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <MX_I2C1_Init+0x50>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <MX_I2C1_Init+0x50>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <MX_I2C1_Init+0x50>)
 8000ca2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ca6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <MX_I2C1_Init+0x50>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <MX_I2C1_Init+0x50>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <MX_I2C1_Init+0x50>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <MX_I2C1_Init+0x50>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cc0:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <MX_I2C1_Init+0x50>)
 8000cc2:	f001 fb39 	bl	8002338 <HAL_I2C_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ccc:	f000 fd80 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	200000c8 	.word	0x200000c8
 8000cd8:	40005400 	.word	0x40005400
 8000cdc:	000186a0 	.word	0x000186a0

08000ce0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a19      	ldr	r2, [pc, #100]	; (8000d64 <HAL_I2C_MspInit+0x84>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d12b      	bne.n	8000d5a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <HAL_I2C_MspInit+0x88>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a17      	ldr	r2, [pc, #92]	; (8000d68 <HAL_I2C_MspInit+0x88>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <HAL_I2C_MspInit+0x88>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d1e:	23c0      	movs	r3, #192	; 0xc0
 8000d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d22:	2312      	movs	r3, #18
 8000d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d2e:	2304      	movs	r3, #4
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	480c      	ldr	r0, [pc, #48]	; (8000d6c <HAL_I2C_MspInit+0x8c>)
 8000d3a:	f001 f92d 	bl	8001f98 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_I2C_MspInit+0x88>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <HAL_I2C_MspInit+0x88>)
 8000d48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_I2C_MspInit+0x88>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	3728      	adds	r7, #40	; 0x28
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40005400 	.word	0x40005400
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020400 	.word	0x40020400

08000d70 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <LCD_WR_REG+0x1c>)
 8000d7c:	88fb      	ldrh	r3, [r7, #6]
 8000d7e:	8013      	strh	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	600ffffe 	.word	0x600ffffe

08000d90 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000d9a:	4a04      	ldr	r2, [pc, #16]	; (8000dac <LCD_WR_DATA+0x1c>)
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	8053      	strh	r3, [r2, #2]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	600ffffe 	.word	0x600ffffe

08000db0 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <LCD_RD_DATA+0x20>)
 8000db8:	885b      	ldrh	r3, [r3, #2]
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	b29b      	uxth	r3, r3
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	600ffffe 	.word	0x600ffffe

08000dd4 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4604      	mov	r4, r0
 8000ddc:	4608      	mov	r0, r1
 8000dde:	4611      	mov	r1, r2
 8000de0:	461a      	mov	r2, r3
 8000de2:	4623      	mov	r3, r4
 8000de4:	80fb      	strh	r3, [r7, #6]
 8000de6:	4603      	mov	r3, r0
 8000de8:	80bb      	strh	r3, [r7, #4]
 8000dea:	460b      	mov	r3, r1
 8000dec:	807b      	strh	r3, [r7, #2]
 8000dee:	4613      	mov	r3, r2
 8000df0:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000df2:	202a      	movs	r0, #42	; 0x2a
 8000df4:	f7ff ffbc 	bl	8000d70 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	0a1b      	lsrs	r3, r3, #8
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ffc6 	bl	8000d90 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ffc0 	bl	8000d90 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000e10:	887b      	ldrh	r3, [r7, #2]
 8000e12:	0a1b      	lsrs	r3, r3, #8
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff ffba 	bl	8000d90 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000e1c:	887b      	ldrh	r3, [r7, #2]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ffb4 	bl	8000d90 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000e28:	202b      	movs	r0, #43	; 0x2b
 8000e2a:	f7ff ffa1 	bl	8000d70 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000e2e:	88bb      	ldrh	r3, [r7, #4]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ffab 	bl	8000d90 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000e3a:	88bb      	ldrh	r3, [r7, #4]
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ffa5 	bl	8000d90 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000e46:	883b      	ldrh	r3, [r7, #0]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff9f 	bl	8000d90 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000e52:	883b      	ldrh	r3, [r7, #0]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff99 	bl	8000d90 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000e5e:	202c      	movs	r0, #44	; 0x2c
 8000e60:	f7ff ff86 	bl	8000d70 <LCD_WR_REG>
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd90      	pop	{r4, r7, pc}

08000e6c <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8000e80:	88fb      	ldrh	r3, [r7, #6]
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <lcd_Clear+0x70>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <lcd_Clear+0x70>)
 8000e90:	885b      	ldrh	r3, [r3, #2]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	2100      	movs	r1, #0
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f7ff ff9b 	bl	8000dd4 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	81fb      	strh	r3, [r7, #14]
 8000ea2:	e011      	b.n	8000ec8 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	81bb      	strh	r3, [r7, #12]
 8000ea8:	e006      	b.n	8000eb8 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff6f 	bl	8000d90 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000eb2:	89bb      	ldrh	r3, [r7, #12]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	81bb      	strh	r3, [r7, #12]
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <lcd_Clear+0x70>)
 8000eba:	885b      	ldrh	r3, [r3, #2]
 8000ebc:	89ba      	ldrh	r2, [r7, #12]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d3f3      	bcc.n	8000eaa <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8000ec2:	89fb      	ldrh	r3, [r7, #14]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	81fb      	strh	r3, [r7, #14]
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <lcd_Clear+0x70>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	89fa      	ldrh	r2, [r7, #14]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d3e8      	bcc.n	8000ea4 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	2000011c 	.word	0x2000011c

08000ee0 <lcd_DrawPoint>:
		}
	}
}

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	80fb      	strh	r3, [r7, #6]
 8000eea:	460b      	mov	r3, r1
 8000eec:	80bb      	strh	r3, [r7, #4]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000ef2:	88bb      	ldrh	r3, [r7, #4]
 8000ef4:	88fa      	ldrh	r2, [r7, #6]
 8000ef6:	88b9      	ldrh	r1, [r7, #4]
 8000ef8:	88f8      	ldrh	r0, [r7, #6]
 8000efa:	f7ff ff6b 	bl	8000dd4 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000efe:	887b      	ldrh	r3, [r7, #2]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff45 	bl	8000d90 <LCD_WR_DATA>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b087      	sub	sp, #28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4604      	mov	r4, r0
 8000f18:	4608      	mov	r0, r1
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4623      	mov	r3, r4
 8000f20:	80fb      	strh	r3, [r7, #6]
 8000f22:	4603      	mov	r3, r0
 8000f24:	80bb      	strh	r3, [r7, #4]
 8000f26:	460b      	mov	r3, r1
 8000f28:	70fb      	strb	r3, [r7, #3]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000f36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f3a:	085b      	lsrs	r3, r3, #1
 8000f3c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	08db      	lsrs	r3, r3, #3
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	461a      	mov	r2, r3
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	bf14      	ite	ne
 8000f52:	2301      	movne	r3, #1
 8000f54:	2300      	moveq	r3, #0
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	4413      	add	r3, r2
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	fb12 f303 	smulbb	r3, r2, r3
 8000f66:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8000f68:	78fb      	ldrb	r3, [r7, #3]
 8000f6a:	3b20      	subs	r3, #32
 8000f6c:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	4413      	add	r3, r2
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	b29c      	uxth	r4, r3
 8000f7c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	88bb      	ldrh	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	88b9      	ldrh	r1, [r7, #4]
 8000f8e:	88f8      	ldrh	r0, [r7, #6]
 8000f90:	4622      	mov	r2, r4
 8000f92:	f7ff ff1f 	bl	8000dd4 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	827b      	strh	r3, [r7, #18]
 8000f9a:	e07a      	b.n	8001092 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000f9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000fa0:	2b0c      	cmp	r3, #12
 8000fa2:	d028      	beq.n	8000ff6 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8000fa4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000fa8:	2b10      	cmp	r3, #16
 8000faa:	d108      	bne.n	8000fbe <lcd_ShowChar+0xae>
 8000fac:	78fa      	ldrb	r2, [r7, #3]
 8000fae:	8a7b      	ldrh	r3, [r7, #18]
 8000fb0:	493c      	ldr	r1, [pc, #240]	; (80010a4 <lcd_ShowChar+0x194>)
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	440a      	add	r2, r1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	75fb      	strb	r3, [r7, #23]
 8000fbc:	e01b      	b.n	8000ff6 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8000fbe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000fc2:	2b18      	cmp	r3, #24
 8000fc4:	d10b      	bne.n	8000fde <lcd_ShowChar+0xce>
 8000fc6:	78fa      	ldrb	r2, [r7, #3]
 8000fc8:	8a79      	ldrh	r1, [r7, #18]
 8000fca:	4837      	ldr	r0, [pc, #220]	; (80010a8 <lcd_ShowChar+0x198>)
 8000fcc:	4613      	mov	r3, r2
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	4413      	add	r3, r2
 8000fd2:	011b      	lsls	r3, r3, #4
 8000fd4:	4403      	add	r3, r0
 8000fd6:	440b      	add	r3, r1
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	75fb      	strb	r3, [r7, #23]
 8000fdc:	e00b      	b.n	8000ff6 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8000fde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000fe2:	2b20      	cmp	r3, #32
 8000fe4:	d15a      	bne.n	800109c <lcd_ShowChar+0x18c>
 8000fe6:	78fa      	ldrb	r2, [r7, #3]
 8000fe8:	8a7b      	ldrh	r3, [r7, #18]
 8000fea:	4930      	ldr	r1, [pc, #192]	; (80010ac <lcd_ShowChar+0x19c>)
 8000fec:	0192      	lsls	r2, r2, #6
 8000fee:	440a      	add	r2, r1
 8000ff0:	4413      	add	r3, r2
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	75bb      	strb	r3, [r7, #22]
 8000ffa:	e044      	b.n	8001086 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000ffc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001000:	2b00      	cmp	r3, #0
 8001002:	d120      	bne.n	8001046 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001004:	7dfa      	ldrb	r2, [r7, #23]
 8001006:	7dbb      	ldrb	r3, [r7, #22]
 8001008:	fa42 f303 	asr.w	r3, r2, r3
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d004      	beq.n	800101e <lcd_ShowChar+0x10e>
 8001014:	883b      	ldrh	r3, [r7, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff feba 	bl	8000d90 <LCD_WR_DATA>
 800101c:	e003      	b.n	8001026 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 800101e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff feb5 	bl	8000d90 <LCD_WR_DATA>
				m++;
 8001026:	7d7b      	ldrb	r3, [r7, #21]
 8001028:	3301      	adds	r3, #1
 800102a:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 800102c:	7d7b      	ldrb	r3, [r7, #21]
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	fbb3 f1f2 	udiv	r1, r3, r2
 8001034:	fb01 f202 	mul.w	r2, r1, r2
 8001038:	1a9b      	subs	r3, r3, r2
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b00      	cmp	r3, #0
 800103e:	d11f      	bne.n	8001080 <lcd_ShowChar+0x170>
				{
					m=0;
 8001040:	2300      	movs	r3, #0
 8001042:	757b      	strb	r3, [r7, #21]
					break;
 8001044:	e022      	b.n	800108c <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001046:	7dfa      	ldrb	r2, [r7, #23]
 8001048:	7dbb      	ldrb	r3, [r7, #22]
 800104a:	fa42 f303 	asr.w	r3, r2, r3
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d005      	beq.n	8001062 <lcd_ShowChar+0x152>
 8001056:	883a      	ldrh	r2, [r7, #0]
 8001058:	88b9      	ldrh	r1, [r7, #4]
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff3f 	bl	8000ee0 <lcd_DrawPoint>
				x++;
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	3301      	adds	r3, #1
 8001066:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001068:	88fa      	ldrh	r2, [r7, #6]
 800106a:	8a3b      	ldrh	r3, [r7, #16]
 800106c:	1ad2      	subs	r2, r2, r3
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	429a      	cmp	r2, r3
 8001072:	d105      	bne.n	8001080 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001074:	8a3b      	ldrh	r3, [r7, #16]
 8001076:	80fb      	strh	r3, [r7, #6]
					y++;
 8001078:	88bb      	ldrh	r3, [r7, #4]
 800107a:	3301      	adds	r3, #1
 800107c:	80bb      	strh	r3, [r7, #4]
					break;
 800107e:	e005      	b.n	800108c <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001080:	7dbb      	ldrb	r3, [r7, #22]
 8001082:	3301      	adds	r3, #1
 8001084:	75bb      	strb	r3, [r7, #22]
 8001086:	7dbb      	ldrb	r3, [r7, #22]
 8001088:	2b07      	cmp	r3, #7
 800108a:	d9b7      	bls.n	8000ffc <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 800108c:	8a7b      	ldrh	r3, [r7, #18]
 800108e:	3301      	adds	r3, #1
 8001090:	827b      	strh	r3, [r7, #18]
 8001092:	8a7a      	ldrh	r2, [r7, #18]
 8001094:	89bb      	ldrh	r3, [r7, #12]
 8001096:	429a      	cmp	r2, r3
 8001098:	d380      	bcc.n	8000f9c <lcd_ShowChar+0x8c>
 800109a:	e000      	b.n	800109e <lcd_ShowChar+0x18e>
		else return;
 800109c:	bf00      	nop
				}
			}
		}
	}
}
 800109e:	371c      	adds	r7, #28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd90      	pop	{r4, r7, pc}
 80010a4:	08005290 	.word	0x08005290
 80010a8:	08005880 	.word	0x08005880
 80010ac:	08006a50 	.word	0x08006a50

080010b0 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	460a      	mov	r2, r1
 80010ba:	71fb      	strb	r3, [r7, #7]
 80010bc:	4613      	mov	r3, r2
 80010be:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 80010c4:	e004      	b.n	80010d0 <mypow+0x20>
 80010c6:	79fa      	ldrb	r2, [r7, #7]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	fb02 f303 	mul.w	r3, r2, r3
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	79bb      	ldrb	r3, [r7, #6]
 80010d2:	1e5a      	subs	r2, r3, #1
 80010d4:	71ba      	strb	r2, [r7, #6]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f5      	bne.n	80010c6 <mypow+0x16>
	return result;
 80010da:	68fb      	ldr	r3, [r7, #12]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af04      	add	r7, sp, #16
 80010ee:	4604      	mov	r4, r0
 80010f0:	4608      	mov	r0, r1
 80010f2:	4611      	mov	r1, r2
 80010f4:	461a      	mov	r2, r3
 80010f6:	4623      	mov	r3, r4
 80010f8:	80fb      	strh	r3, [r7, #6]
 80010fa:	4603      	mov	r3, r0
 80010fc:	80bb      	strh	r3, [r7, #4]
 80010fe:	460b      	mov	r3, r1
 8001100:	807b      	strh	r3, [r7, #2]
 8001102:	4613      	mov	r3, r2
 8001104:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001106:	2300      	movs	r3, #0
 8001108:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 800110a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800110e:	085b      	lsrs	r3, r3, #1
 8001110:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001112:	2300      	movs	r3, #0
 8001114:	73fb      	strb	r3, [r7, #15]
 8001116:	e059      	b.n	80011cc <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001118:	887c      	ldrh	r4, [r7, #2]
 800111a:	787a      	ldrb	r2, [r7, #1]
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	b2db      	uxtb	r3, r3
 8001122:	3b01      	subs	r3, #1
 8001124:	b2db      	uxtb	r3, r3
 8001126:	4619      	mov	r1, r3
 8001128:	200a      	movs	r0, #10
 800112a:	f7ff ffc1 	bl	80010b0 <mypow>
 800112e:	4603      	mov	r3, r0
 8001130:	fbb4 f1f3 	udiv	r1, r4, r3
 8001134:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <lcd_ShowIntNum+0xf8>)
 8001136:	fba3 2301 	umull	r2, r3, r3, r1
 800113a:	08da      	lsrs	r2, r3, #3
 800113c:	4613      	mov	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	1aca      	subs	r2, r1, r3
 8001146:	4613      	mov	r3, r2
 8001148:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 800114a:	7bbb      	ldrb	r3, [r7, #14]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d121      	bne.n	8001194 <lcd_ShowIntNum+0xac>
 8001150:	7bfa      	ldrb	r2, [r7, #15]
 8001152:	787b      	ldrb	r3, [r7, #1]
 8001154:	3b01      	subs	r3, #1
 8001156:	429a      	cmp	r2, r3
 8001158:	da1c      	bge.n	8001194 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 800115a:	7b3b      	ldrb	r3, [r7, #12]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d117      	bne.n	8001190 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	b29a      	uxth	r2, r3
 8001164:	7b7b      	ldrb	r3, [r7, #13]
 8001166:	b29b      	uxth	r3, r3
 8001168:	fb12 f303 	smulbb	r3, r2, r3
 800116c:	b29a      	uxth	r2, r3
 800116e:	88fb      	ldrh	r3, [r7, #6]
 8001170:	4413      	add	r3, r2
 8001172:	b298      	uxth	r0, r3
 8001174:	8c3a      	ldrh	r2, [r7, #32]
 8001176:	88b9      	ldrh	r1, [r7, #4]
 8001178:	2300      	movs	r3, #0
 800117a:	9302      	str	r3, [sp, #8]
 800117c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001180:	9301      	str	r3, [sp, #4]
 8001182:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	4613      	mov	r3, r2
 8001188:	2220      	movs	r2, #32
 800118a:	f7ff fec1 	bl	8000f10 <lcd_ShowChar>
				continue;
 800118e:	e01a      	b.n	80011c6 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001190:	2301      	movs	r3, #1
 8001192:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	b29a      	uxth	r2, r3
 8001198:	7b7b      	ldrb	r3, [r7, #13]
 800119a:	b29b      	uxth	r3, r3
 800119c:	fb12 f303 	smulbb	r3, r2, r3
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	4413      	add	r3, r2
 80011a6:	b298      	uxth	r0, r3
 80011a8:	7b3b      	ldrb	r3, [r7, #12]
 80011aa:	3330      	adds	r3, #48	; 0x30
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	8c3c      	ldrh	r4, [r7, #32]
 80011b0:	88b9      	ldrh	r1, [r7, #4]
 80011b2:	2300      	movs	r3, #0
 80011b4:	9302      	str	r3, [sp, #8]
 80011b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80011ba:	9301      	str	r3, [sp, #4]
 80011bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	4623      	mov	r3, r4
 80011c2:	f7ff fea5 	bl	8000f10 <lcd_ShowChar>
	for(t=0;t<len;t++)
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	3301      	adds	r3, #1
 80011ca:	73fb      	strb	r3, [r7, #15]
 80011cc:	7bfa      	ldrb	r2, [r7, #15]
 80011ce:	787b      	ldrb	r3, [r7, #1]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d3a1      	bcc.n	8001118 <lcd_ShowIntNum+0x30>
	}
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd90      	pop	{r4, r7, pc}
 80011de:	bf00      	nop
 80011e0:	cccccccd 	.word	0xcccccccd

080011e4 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	091b      	lsrs	r3, r3, #4
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d007      	beq.n	800120e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <lcd_SetDir+0x44>)
 8001200:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001204:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <lcd_SetDir+0x44>)
 8001208:	22f0      	movs	r2, #240	; 0xf0
 800120a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 800120c:	e006      	b.n	800121c <lcd_SetDir+0x38>
		lcddev.width=240;
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <lcd_SetDir+0x44>)
 8001210:	22f0      	movs	r2, #240	; 0xf0
 8001212:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <lcd_SetDir+0x44>)
 8001216:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800121a:	805a      	strh	r2, [r3, #2]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	2000011c 	.word	0x2000011c

0800122c <lcd_init>:


void lcd_init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001236:	48aa      	ldr	r0, [pc, #680]	; (80014e0 <lcd_init+0x2b4>)
 8001238:	f001 f84a 	bl	80022d0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800123c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001240:	f000 fd74 	bl	8001d2c <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001244:	2201      	movs	r2, #1
 8001246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800124a:	48a5      	ldr	r0, [pc, #660]	; (80014e0 <lcd_init+0x2b4>)
 800124c:	f001 f840 	bl	80022d0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001250:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001254:	f000 fd6a 	bl	8001d2c <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8001258:	2000      	movs	r0, #0
 800125a:	f7ff ffc3 	bl	80011e4 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 800125e:	20d3      	movs	r0, #211	; 0xd3
 8001260:	f7ff fd86 	bl	8000d70 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001264:	f7ff fda4 	bl	8000db0 <LCD_RD_DATA>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	4b9d      	ldr	r3, [pc, #628]	; (80014e4 <lcd_init+0x2b8>)
 800126e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001270:	f7ff fd9e 	bl	8000db0 <LCD_RD_DATA>
 8001274:	4603      	mov	r3, r0
 8001276:	461a      	mov	r2, r3
 8001278:	4b9a      	ldr	r3, [pc, #616]	; (80014e4 <lcd_init+0x2b8>)
 800127a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 800127c:	f7ff fd98 	bl	8000db0 <LCD_RD_DATA>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	4b97      	ldr	r3, [pc, #604]	; (80014e4 <lcd_init+0x2b8>)
 8001286:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001288:	4b96      	ldr	r3, [pc, #600]	; (80014e4 <lcd_init+0x2b8>)
 800128a:	889b      	ldrh	r3, [r3, #4]
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	b29a      	uxth	r2, r3
 8001290:	4b94      	ldr	r3, [pc, #592]	; (80014e4 <lcd_init+0x2b8>)
 8001292:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001294:	f7ff fd8c 	bl	8000db0 <LCD_RD_DATA>
 8001298:	4603      	mov	r3, r0
 800129a:	461a      	mov	r2, r3
 800129c:	4b91      	ldr	r3, [pc, #580]	; (80014e4 <lcd_init+0x2b8>)
 800129e:	889b      	ldrh	r3, [r3, #4]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	4b8f      	ldr	r3, [pc, #572]	; (80014e4 <lcd_init+0x2b8>)
 80012a6:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 80012a8:	20cf      	movs	r0, #207	; 0xcf
 80012aa:	f7ff fd61 	bl	8000d70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012ae:	2000      	movs	r0, #0
 80012b0:	f7ff fd6e 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80012b4:	20c1      	movs	r0, #193	; 0xc1
 80012b6:	f7ff fd6b 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80012ba:	2030      	movs	r0, #48	; 0x30
 80012bc:	f7ff fd68 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80012c0:	20ed      	movs	r0, #237	; 0xed
 80012c2:	f7ff fd55 	bl	8000d70 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80012c6:	2064      	movs	r0, #100	; 0x64
 80012c8:	f7ff fd62 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80012cc:	2003      	movs	r0, #3
 80012ce:	f7ff fd5f 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80012d2:	2012      	movs	r0, #18
 80012d4:	f7ff fd5c 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80012d8:	2081      	movs	r0, #129	; 0x81
 80012da:	f7ff fd59 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80012de:	20e8      	movs	r0, #232	; 0xe8
 80012e0:	f7ff fd46 	bl	8000d70 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80012e4:	2085      	movs	r0, #133	; 0x85
 80012e6:	f7ff fd53 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80012ea:	2010      	movs	r0, #16
 80012ec:	f7ff fd50 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80012f0:	207a      	movs	r0, #122	; 0x7a
 80012f2:	f7ff fd4d 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80012f6:	20cb      	movs	r0, #203	; 0xcb
 80012f8:	f7ff fd3a 	bl	8000d70 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80012fc:	2039      	movs	r0, #57	; 0x39
 80012fe:	f7ff fd47 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001302:	202c      	movs	r0, #44	; 0x2c
 8001304:	f7ff fd44 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001308:	2000      	movs	r0, #0
 800130a:	f7ff fd41 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800130e:	2034      	movs	r0, #52	; 0x34
 8001310:	f7ff fd3e 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001314:	2002      	movs	r0, #2
 8001316:	f7ff fd3b 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800131a:	20f7      	movs	r0, #247	; 0xf7
 800131c:	f7ff fd28 	bl	8000d70 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001320:	2020      	movs	r0, #32
 8001322:	f7ff fd35 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001326:	20ea      	movs	r0, #234	; 0xea
 8001328:	f7ff fd22 	bl	8000d70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800132c:	2000      	movs	r0, #0
 800132e:	f7ff fd2f 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001332:	2000      	movs	r0, #0
 8001334:	f7ff fd2c 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001338:	20c0      	movs	r0, #192	; 0xc0
 800133a:	f7ff fd19 	bl	8000d70 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800133e:	201b      	movs	r0, #27
 8001340:	f7ff fd26 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001344:	20c1      	movs	r0, #193	; 0xc1
 8001346:	f7ff fd13 	bl	8000d70 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800134a:	2001      	movs	r0, #1
 800134c:	f7ff fd20 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001350:	20c5      	movs	r0, #197	; 0xc5
 8001352:	f7ff fd0d 	bl	8000d70 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001356:	2030      	movs	r0, #48	; 0x30
 8001358:	f7ff fd1a 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 800135c:	2030      	movs	r0, #48	; 0x30
 800135e:	f7ff fd17 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001362:	20c7      	movs	r0, #199	; 0xc7
 8001364:	f7ff fd04 	bl	8000d70 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001368:	20b7      	movs	r0, #183	; 0xb7
 800136a:	f7ff fd11 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800136e:	2036      	movs	r0, #54	; 0x36
 8001370:	f7ff fcfe 	bl	8000d70 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8001374:	2008      	movs	r0, #8
 8001376:	f7ff fd0b 	bl	8000d90 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 800137a:	203a      	movs	r0, #58	; 0x3a
 800137c:	f7ff fcf8 	bl	8000d70 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001380:	2055      	movs	r0, #85	; 0x55
 8001382:	f7ff fd05 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001386:	20b1      	movs	r0, #177	; 0xb1
 8001388:	f7ff fcf2 	bl	8000d70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800138c:	2000      	movs	r0, #0
 800138e:	f7ff fcff 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001392:	201a      	movs	r0, #26
 8001394:	f7ff fcfc 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001398:	20b6      	movs	r0, #182	; 0xb6
 800139a:	f7ff fce9 	bl	8000d70 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800139e:	200a      	movs	r0, #10
 80013a0:	f7ff fcf6 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80013a4:	20a2      	movs	r0, #162	; 0xa2
 80013a6:	f7ff fcf3 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80013aa:	20f2      	movs	r0, #242	; 0xf2
 80013ac:	f7ff fce0 	bl	8000d70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff fced 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80013b6:	2026      	movs	r0, #38	; 0x26
 80013b8:	f7ff fcda 	bl	8000d70 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80013bc:	2001      	movs	r0, #1
 80013be:	f7ff fce7 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80013c2:	20e0      	movs	r0, #224	; 0xe0
 80013c4:	f7ff fcd4 	bl	8000d70 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80013c8:	200f      	movs	r0, #15
 80013ca:	f7ff fce1 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80013ce:	202a      	movs	r0, #42	; 0x2a
 80013d0:	f7ff fcde 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80013d4:	2028      	movs	r0, #40	; 0x28
 80013d6:	f7ff fcdb 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80013da:	2008      	movs	r0, #8
 80013dc:	f7ff fcd8 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80013e0:	200e      	movs	r0, #14
 80013e2:	f7ff fcd5 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80013e6:	2008      	movs	r0, #8
 80013e8:	f7ff fcd2 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80013ec:	2054      	movs	r0, #84	; 0x54
 80013ee:	f7ff fccf 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80013f2:	20a9      	movs	r0, #169	; 0xa9
 80013f4:	f7ff fccc 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80013f8:	2043      	movs	r0, #67	; 0x43
 80013fa:	f7ff fcc9 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80013fe:	200a      	movs	r0, #10
 8001400:	f7ff fcc6 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001404:	200f      	movs	r0, #15
 8001406:	f7ff fcc3 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800140a:	2000      	movs	r0, #0
 800140c:	f7ff fcc0 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001410:	2000      	movs	r0, #0
 8001412:	f7ff fcbd 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001416:	2000      	movs	r0, #0
 8001418:	f7ff fcba 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800141c:	2000      	movs	r0, #0
 800141e:	f7ff fcb7 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001422:	20e1      	movs	r0, #225	; 0xe1
 8001424:	f7ff fca4 	bl	8000d70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001428:	2000      	movs	r0, #0
 800142a:	f7ff fcb1 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800142e:	2015      	movs	r0, #21
 8001430:	f7ff fcae 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001434:	2017      	movs	r0, #23
 8001436:	f7ff fcab 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800143a:	2007      	movs	r0, #7
 800143c:	f7ff fca8 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001440:	2011      	movs	r0, #17
 8001442:	f7ff fca5 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001446:	2006      	movs	r0, #6
 8001448:	f7ff fca2 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 800144c:	202b      	movs	r0, #43	; 0x2b
 800144e:	f7ff fc9f 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001452:	2056      	movs	r0, #86	; 0x56
 8001454:	f7ff fc9c 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001458:	203c      	movs	r0, #60	; 0x3c
 800145a:	f7ff fc99 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800145e:	2005      	movs	r0, #5
 8001460:	f7ff fc96 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001464:	2010      	movs	r0, #16
 8001466:	f7ff fc93 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800146a:	200f      	movs	r0, #15
 800146c:	f7ff fc90 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001470:	203f      	movs	r0, #63	; 0x3f
 8001472:	f7ff fc8d 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001476:	203f      	movs	r0, #63	; 0x3f
 8001478:	f7ff fc8a 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800147c:	200f      	movs	r0, #15
 800147e:	f7ff fc87 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001482:	202b      	movs	r0, #43	; 0x2b
 8001484:	f7ff fc74 	bl	8000d70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001488:	2000      	movs	r0, #0
 800148a:	f7ff fc81 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800148e:	2000      	movs	r0, #0
 8001490:	f7ff fc7e 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001494:	2001      	movs	r0, #1
 8001496:	f7ff fc7b 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800149a:	203f      	movs	r0, #63	; 0x3f
 800149c:	f7ff fc78 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80014a0:	202a      	movs	r0, #42	; 0x2a
 80014a2:	f7ff fc65 	bl	8000d70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff fc72 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80014ac:	2000      	movs	r0, #0
 80014ae:	f7ff fc6f 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f7ff fc6c 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80014b8:	20ef      	movs	r0, #239	; 0xef
 80014ba:	f7ff fc69 	bl	8000d90 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80014be:	2011      	movs	r0, #17
 80014c0:	f7ff fc56 	bl	8000d70 <LCD_WR_REG>
	HAL_Delay(120);
 80014c4:	2078      	movs	r0, #120	; 0x78
 80014c6:	f000 fc31 	bl	8001d2c <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80014ca:	2029      	movs	r0, #41	; 0x29
 80014cc:	f7ff fc50 	bl	8000d70 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80014d0:	2201      	movs	r2, #1
 80014d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d6:	4804      	ldr	r0, [pc, #16]	; (80014e8 <lcd_init+0x2bc>)
 80014d8:	f000 fefa 	bl	80022d0 <HAL_GPIO_WritePin>
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40020800 	.word	0x40020800
 80014e4:	2000011c 	.word	0x2000011c
 80014e8:	40020000 	.word	0x40020000

080014ec <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80014f0:	2201      	movs	r2, #1
 80014f2:	2140      	movs	r1, #64	; 0x40
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <led7_init+0x14>)
 80014f6:	f000 feeb 	bl	80022d0 <HAL_GPIO_WritePin>
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40021800 	.word	0x40021800

08001504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001508:	f000 fb9e 	bl	8001c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800150c:	f000 f82c 	bl	8001568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001510:	f7ff fac0 	bl	8000a94 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001514:	f000 faae 	bl	8001a74 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001518:	f000 f9c0 	bl	800189c <MX_SPI1_Init>
  MX_FSMC_Init();
 800151c:	f7ff f9ea 	bl	80008f4 <MX_FSMC_Init>
  MX_I2C1_Init();
 8001520:	f7ff fbb0 	bl	8000c84 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001524:	f000 f88a 	bl	800163c <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 8001528:	2000      	movs	r0, #0
 800152a:	f7ff fc9f 	bl	8000e6c <lcd_Clear>
 updateTime();
 800152e:	f000 f8a5 	bl	800167c <updateTime>
 setTimer(1000, 0);
 8001532:	2100      	movs	r1, #0
 8001534:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001538:	f000 f95a 	bl	80017f0 <setTimer>
  while (1)
  {
	  button_Scan();
 800153c:	f7ff f816 	bl	800056c <button_Scan>
	  fsm_for_input_processing();
 8001540:	f7fe ffc4 	bl	80004cc <fsm_for_input_processing>
	  if(flag_timer[0]){
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <main+0x5c>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f7      	beq.n	800153c <main+0x38>
		  setTimer(1000, 0);
 800154c:	2100      	movs	r1, #0
 800154e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001552:	f000 f94d 	bl	80017f0 <setTimer>
		  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8001556:	2110      	movs	r1, #16
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <main+0x60>)
 800155a:	f000 fed2 	bl	8002302 <HAL_GPIO_TogglePin>
  {
 800155e:	e7ed      	b.n	800153c <main+0x38>
 8001560:	20000124 	.word	0x20000124
 8001564:	40021000 	.word	0x40021000

08001568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b094      	sub	sp, #80	; 0x50
 800156c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156e:	f107 0320 	add.w	r3, r7, #32
 8001572:	2230      	movs	r2, #48	; 0x30
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f003 fe76 	bl	8005268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800158c:	2300      	movs	r3, #0
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	4b28      	ldr	r3, [pc, #160]	; (8001634 <SystemClock_Config+0xcc>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	4a27      	ldr	r2, [pc, #156]	; (8001634 <SystemClock_Config+0xcc>)
 8001596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800159a:	6413      	str	r3, [r2, #64]	; 0x40
 800159c:	4b25      	ldr	r3, [pc, #148]	; (8001634 <SystemClock_Config+0xcc>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015a8:	2300      	movs	r3, #0
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	4b22      	ldr	r3, [pc, #136]	; (8001638 <SystemClock_Config+0xd0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a21      	ldr	r2, [pc, #132]	; (8001638 <SystemClock_Config+0xd0>)
 80015b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <SystemClock_Config+0xd0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015c4:	2302      	movs	r3, #2
 80015c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015c8:	2301      	movs	r3, #1
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015cc:	2310      	movs	r3, #16
 80015ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d0:	2302      	movs	r3, #2
 80015d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015d4:	2300      	movs	r3, #0
 80015d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015d8:	2308      	movs	r3, #8
 80015da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015dc:	23a8      	movs	r3, #168	; 0xa8
 80015de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015e0:	2302      	movs	r3, #2
 80015e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015e4:	2304      	movs	r3, #4
 80015e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e8:	f107 0320 	add.w	r3, r7, #32
 80015ec:	4618      	mov	r0, r3
 80015ee:	f001 ff91 	bl	8003514 <HAL_RCC_OscConfig>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015f8:	f000 f8ea 	bl	80017d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015fc:	230f      	movs	r3, #15
 80015fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001600:	2302      	movs	r3, #2
 8001602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001608:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800160c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800160e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001612:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	2105      	movs	r1, #5
 800161a:	4618      	mov	r0, r3
 800161c:	f002 f9f2 	bl	8003a04 <HAL_RCC_ClockConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001626:	f000 f8d3 	bl	80017d0 <Error_Handler>
  }
}
 800162a:	bf00      	nop
 800162c:	3750      	adds	r7, #80	; 0x50
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800
 8001638:	40007000 	.word	0x40007000

0800163c <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	2120      	movs	r1, #32
 8001644:	480c      	ldr	r0, [pc, #48]	; (8001678 <system_init+0x3c>)
 8001646:	f000 fe43 	bl	80022d0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2140      	movs	r1, #64	; 0x40
 800164e:	480a      	ldr	r0, [pc, #40]	; (8001678 <system_init+0x3c>)
 8001650:	f000 fe3e 	bl	80022d0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001654:	2200      	movs	r2, #0
 8001656:	2110      	movs	r1, #16
 8001658:	4807      	ldr	r0, [pc, #28]	; (8001678 <system_init+0x3c>)
 800165a:	f000 fe39 	bl	80022d0 <HAL_GPIO_WritePin>
	  timer_init();
 800165e:	f000 f8bd 	bl	80017dc <timer_init>
	  led7_init();
 8001662:	f7ff ff43 	bl	80014ec <led7_init>
	  button_init();
 8001666:	f7fe ff59 	bl	800051c <button_init>
	  lcd_init();
 800166a:	f7ff fddf 	bl	800122c <lcd_init>
	  ds3231_init();
 800166e:	f7ff f877 	bl	8000760 <ds3231_init>
//	  setTimer2(50);
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000

0800167c <updateTime>:
			led7_SetDigit(i%10, 3, 0);
		}
	}
}

void updateTime(){
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 23);
 8001680:	2117      	movs	r1, #23
 8001682:	2006      	movs	r0, #6
 8001684:	f7ff f8b0 	bl	80007e8 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 10);
 8001688:	210a      	movs	r1, #10
 800168a:	2005      	movs	r0, #5
 800168c:	f7ff f8ac 	bl	80007e8 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 20);
 8001690:	2114      	movs	r1, #20
 8001692:	2004      	movs	r0, #4
 8001694:	f7ff f8a8 	bl	80007e8 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 8001698:	2106      	movs	r1, #6
 800169a:	2003      	movs	r0, #3
 800169c:	f7ff f8a4 	bl	80007e8 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 20);
 80016a0:	2114      	movs	r1, #20
 80016a2:	2002      	movs	r0, #2
 80016a4:	f7ff f8a0 	bl	80007e8 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 11);
 80016a8:	210b      	movs	r1, #11
 80016aa:	2001      	movs	r0, #1
 80016ac:	f7ff f89c 	bl	80007e8 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 23);
 80016b0:	2117      	movs	r1, #23
 80016b2:	2000      	movs	r0, #0
 80016b4:	f7ff f898 	bl	80007e8 <ds3231_Write>
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <displayTime>:


int toggle = GREEN;
void displayTime(){
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af04      	add	r7, sp, #16
	toggle = (toggle == GREEN) ? BLACK : GREEN;
 80016c2:	4b3b      	ldr	r3, [pc, #236]	; (80017b0 <displayTime+0xf4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 80016ca:	d101      	bne.n	80016d0 <displayTime+0x14>
 80016cc:	2300      	movs	r3, #0
 80016ce:	e001      	b.n	80016d4 <displayTime+0x18>
 80016d0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80016d4:	4a36      	ldr	r2, [pc, #216]	; (80017b0 <displayTime+0xf4>)
 80016d6:	6013      	str	r3, [r2, #0]
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 80016d8:	4b36      	ldr	r3, [pc, #216]	; (80017b4 <displayTime+0xf8>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	b29a      	uxth	r2, r3
 80016de:	2318      	movs	r3, #24
 80016e0:	9302      	str	r3, [sp, #8]
 80016e2:	2300      	movs	r3, #0
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	2302      	movs	r3, #2
 80016ee:	2164      	movs	r1, #100	; 0x64
 80016f0:	2046      	movs	r0, #70	; 0x46
 80016f2:	f7ff fcf9 	bl	80010e8 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 80016f6:	4b30      	ldr	r3, [pc, #192]	; (80017b8 <displayTime+0xfc>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	2318      	movs	r3, #24
 80016fe:	9302      	str	r3, [sp, #8]
 8001700:	2300      	movs	r3, #0
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	2302      	movs	r3, #2
 800170c:	2164      	movs	r1, #100	; 0x64
 800170e:	206e      	movs	r0, #110	; 0x6e
 8001710:	f7ff fcea 	bl	80010e8 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8001714:	4b29      	ldr	r3, [pc, #164]	; (80017bc <displayTime+0x100>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	b29a      	uxth	r2, r3
 800171a:	2318      	movs	r3, #24
 800171c:	9302      	str	r3, [sp, #8]
 800171e:	2300      	movs	r3, #0
 8001720:	9301      	str	r3, [sp, #4]
 8001722:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	2302      	movs	r3, #2
 800172a:	2164      	movs	r1, #100	; 0x64
 800172c:	2096      	movs	r0, #150	; 0x96
 800172e:	f7ff fcdb 	bl	80010e8 <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8001732:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <displayTime+0x104>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b29a      	uxth	r2, r3
 8001738:	2318      	movs	r3, #24
 800173a:	9302      	str	r3, [sp, #8]
 800173c:	2300      	movs	r3, #0
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	2302      	movs	r3, #2
 8001748:	2182      	movs	r1, #130	; 0x82
 800174a:	2014      	movs	r0, #20
 800174c:	f7ff fccc 	bl	80010e8 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001750:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <displayTime+0x108>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	b29a      	uxth	r2, r3
 8001756:	2318      	movs	r3, #24
 8001758:	9302      	str	r3, [sp, #8]
 800175a:	2300      	movs	r3, #0
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	2302      	movs	r3, #2
 8001766:	2182      	movs	r1, #130	; 0x82
 8001768:	2046      	movs	r0, #70	; 0x46
 800176a:	f7ff fcbd 	bl	80010e8 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <displayTime+0x10c>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	b29a      	uxth	r2, r3
 8001774:	2318      	movs	r3, #24
 8001776:	9302      	str	r3, [sp, #8]
 8001778:	2300      	movs	r3, #0
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	2302      	movs	r3, #2
 8001784:	2182      	movs	r1, #130	; 0x82
 8001786:	206e      	movs	r0, #110	; 0x6e
 8001788:	f7ff fcae 	bl	80010e8 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <displayTime+0x110>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b29a      	uxth	r2, r3
 8001792:	2318      	movs	r3, #24
 8001794:	9302      	str	r3, [sp, #8]
 8001796:	2300      	movs	r3, #0
 8001798:	9301      	str	r3, [sp, #4]
 800179a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	2302      	movs	r3, #2
 80017a2:	2182      	movs	r1, #130	; 0x82
 80017a4:	2096      	movs	r0, #150	; 0x96
 80017a6:	f7ff fc9f 	bl	80010e8 <lcd_ShowIntNum>
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000000 	.word	0x20000000
 80017b4:	2000006b 	.word	0x2000006b
 80017b8:	2000006c 	.word	0x2000006c
 80017bc:	2000006d 	.word	0x2000006d
 80017c0:	2000006f 	.word	0x2000006f
 80017c4:	2000006e 	.word	0x2000006e
 80017c8:	20000070 	.word	0x20000070
 80017cc:	20000071 	.word	0x20000071

080017d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d4:	b672      	cpsid	i
}
 80017d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <Error_Handler+0x8>
	...

080017dc <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <timer_init+0x10>)
 80017e2:	f003 f81b 	bl	800481c <HAL_TIM_Base_Start_IT>
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000194 	.word	0x20000194

080017f0 <setTimer>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer(uint16_t duration, int ID){
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	80fb      	strh	r3, [r7, #6]
	timer_MUL[ID] = duration/TIMER_CYCLE;
 80017fc:	490b      	ldr	r1, [pc, #44]	; (800182c <setTimer+0x3c>)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	88fa      	ldrh	r2, [r7, #6]
 8001802:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	timer_counter[ID] = timer_MUL[ID];
 8001806:	4a09      	ldr	r2, [pc, #36]	; (800182c <setTimer+0x3c>)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800180e:	4a08      	ldr	r2, [pc, #32]	; (8001830 <setTimer+0x40>)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	flag_timer[ID] = 0;
 8001816:	4a07      	ldr	r2, [pc, #28]	; (8001834 <setTimer+0x44>)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2100      	movs	r1, #0
 800181c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	20000134 	.word	0x20000134
 8001830:	2000012c 	.word	0x2000012c
 8001834:	20000124 	.word	0x20000124

08001838 <timerRun>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void timerRun(){
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
	for(int i = 0; i<MAX_TIMER;i++){
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	e01d      	b.n	8001880 <timerRun+0x48>
		if(timer_counter[i] > 0){
 8001844:	4a13      	ldr	r2, [pc, #76]	; (8001894 <timerRun+0x5c>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d014      	beq.n	800187a <timerRun+0x42>
			timer_counter[i]--;
 8001850:	4a10      	ldr	r2, [pc, #64]	; (8001894 <timerRun+0x5c>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001858:	3b01      	subs	r3, #1
 800185a:	b299      	uxth	r1, r3
 800185c:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <timerRun+0x5c>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(timer_counter[i] <= 0) {
 8001864:	4a0b      	ldr	r2, [pc, #44]	; (8001894 <timerRun+0x5c>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d104      	bne.n	800187a <timerRun+0x42>
				flag_timer[i] = 1;
 8001870:	4a09      	ldr	r2, [pc, #36]	; (8001898 <timerRun+0x60>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2101      	movs	r1, #1
 8001876:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i<MAX_TIMER;i++){
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3301      	adds	r3, #1
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b02      	cmp	r3, #2
 8001884:	ddde      	ble.n	8001844 <timerRun+0xc>
			}
		}
	}
}
 8001886:	bf00      	nop
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	2000012c 	.word	0x2000012c
 8001898:	20000124 	.word	0x20000124

0800189c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018a0:	4b17      	ldr	r3, [pc, #92]	; (8001900 <MX_SPI1_Init+0x64>)
 80018a2:	4a18      	ldr	r2, [pc, #96]	; (8001904 <MX_SPI1_Init+0x68>)
 80018a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018a6:	4b16      	ldr	r3, [pc, #88]	; (8001900 <MX_SPI1_Init+0x64>)
 80018a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018ae:	4b14      	ldr	r3, [pc, #80]	; (8001900 <MX_SPI1_Init+0x64>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <MX_SPI1_Init+0x64>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ba:	4b11      	ldr	r3, [pc, #68]	; (8001900 <MX_SPI1_Init+0x64>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <MX_SPI1_Init+0x64>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <MX_SPI1_Init+0x64>)
 80018c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018ce:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <MX_SPI1_Init+0x64>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <MX_SPI1_Init+0x64>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <MX_SPI1_Init+0x64>)
 80018dc:	2200      	movs	r2, #0
 80018de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018e0:	4b07      	ldr	r3, [pc, #28]	; (8001900 <MX_SPI1_Init+0x64>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <MX_SPI1_Init+0x64>)
 80018e8:	220a      	movs	r2, #10
 80018ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <MX_SPI1_Init+0x64>)
 80018ee:	f002 fa95 	bl	8003e1c <HAL_SPI_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018f8:	f7ff ff6a 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	2000013c 	.word	0x2000013c
 8001904:	40013000 	.word	0x40013000

08001908 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	; 0x28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a19      	ldr	r2, [pc, #100]	; (800198c <HAL_SPI_MspInit+0x84>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d12b      	bne.n	8001982 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	4b18      	ldr	r3, [pc, #96]	; (8001990 <HAL_SPI_MspInit+0x88>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	4a17      	ldr	r2, [pc, #92]	; (8001990 <HAL_SPI_MspInit+0x88>)
 8001934:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001938:	6453      	str	r3, [r2, #68]	; 0x44
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <HAL_SPI_MspInit+0x88>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <HAL_SPI_MspInit+0x88>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a10      	ldr	r2, [pc, #64]	; (8001990 <HAL_SPI_MspInit+0x88>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <HAL_SPI_MspInit+0x88>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001962:	2338      	movs	r3, #56	; 0x38
 8001964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196e:	2303      	movs	r3, #3
 8001970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001972:	2305      	movs	r3, #5
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	4805      	ldr	r0, [pc, #20]	; (8001994 <HAL_SPI_MspInit+0x8c>)
 800197e:	f000 fb0b 	bl	8001f98 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001982:	bf00      	nop
 8001984:	3728      	adds	r7, #40	; 0x28
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40013000 	.word	0x40013000
 8001990:	40023800 	.word	0x40023800
 8001994:	40020400 	.word	0x40020400

08001998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <HAL_MspInit+0x4c>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	4a0f      	ldr	r2, [pc, #60]	; (80019e4 <HAL_MspInit+0x4c>)
 80019a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ac:	6453      	str	r3, [r2, #68]	; 0x44
 80019ae:	4b0d      	ldr	r3, [pc, #52]	; (80019e4 <HAL_MspInit+0x4c>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_MspInit+0x4c>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <HAL_MspInit+0x4c>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_MspInit+0x4c>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800

080019e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <NMI_Handler+0x4>

080019ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <HardFault_Handler+0x4>

080019f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <MemManage_Handler+0x4>

080019fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <BusFault_Handler+0x4>

08001a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <UsageFault_Handler+0x4>

08001a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a34:	f000 f95a 	bl	8001cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <TIM2_IRQHandler+0x10>)
 8001a42:	f002 ff5b 	bl	80048fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000194 	.word	0x20000194

08001a50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <SystemInit+0x20>)
 8001a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5a:	4a05      	ldr	r2, [pc, #20]	; (8001a70 <SystemInit+0x20>)
 8001a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a7a:	f107 0308 	add.w	r3, r7, #8
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a88:	463b      	mov	r3, r7
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a90:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <MX_TIM2_Init+0x94>)
 8001a92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <MX_TIM2_Init+0x94>)
 8001a9a:	f240 3247 	movw	r2, #839	; 0x347
 8001a9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa0:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <MX_TIM2_Init+0x94>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001aa6:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <MX_TIM2_Init+0x94>)
 8001aa8:	2263      	movs	r2, #99	; 0x63
 8001aaa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aac:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <MX_TIM2_Init+0x94>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <MX_TIM2_Init+0x94>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ab8:	4813      	ldr	r0, [pc, #76]	; (8001b08 <MX_TIM2_Init+0x94>)
 8001aba:	f002 fe5f 	bl	800477c <HAL_TIM_Base_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ac4:	f7ff fe84 	bl	80017d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001acc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ace:	f107 0308 	add.w	r3, r7, #8
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	480c      	ldr	r0, [pc, #48]	; (8001b08 <MX_TIM2_Init+0x94>)
 8001ad6:	f003 f819 	bl	8004b0c <HAL_TIM_ConfigClockSource>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ae0:	f7ff fe76 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aec:	463b      	mov	r3, r7
 8001aee:	4619      	mov	r1, r3
 8001af0:	4805      	ldr	r0, [pc, #20]	; (8001b08 <MX_TIM2_Init+0x94>)
 8001af2:	f003 fa35 	bl	8004f60 <HAL_TIMEx_MasterConfigSynchronization>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001afc:	f7ff fe68 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b00:	bf00      	nop
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000194 	.word	0x20000194

08001b0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b1c:	d115      	bne.n	8001b4a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <HAL_TIM_Base_MspInit+0x48>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <HAL_TIM_Base_MspInit+0x48>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_TIM_Base_MspInit+0x48>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	201c      	movs	r0, #28
 8001b40:	f000 f9f3 	bl	8001f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b44:	201c      	movs	r0, #28
 8001b46:	f000 fa0c 	bl	8001f62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800

08001b58 <HAL_TIM_PeriodElapsedCallback>:
 *  Created on: Dec 7, 2023
 *      Author: Admin
 */

#include "global.h"
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b68:	d103      	bne.n	8001b72 <HAL_TIM_PeriodElapsedCallback+0x1a>
		timerRun();
 8001b6a:	f7ff fe65 	bl	8001838 <timerRun>
		inputProcessing();
 8001b6e:	f7fe fd69 	bl	8000644 <inputProcessing>
		// 1ms interrupt here
	}
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	091b      	lsrs	r3, r3, #4
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	0092      	lsls	r2, r2, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b2db      	uxtb	r3, r3
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <DEC2BCD+0x44>)
 8001bba:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbe:	08db      	lsrs	r3, r3, #3
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	b258      	sxtb	r0, r3
 8001bc6:	79fa      	ldrb	r2, [r7, #7]
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <DEC2BCD+0x44>)
 8001bca:	fba3 1302 	umull	r1, r3, r3, r2
 8001bce:	08d9      	lsrs	r1, r3, #3
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	b25b      	sxtb	r3, r3
 8001bde:	4303      	orrs	r3, r0
 8001be0:	b25b      	sxtb	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	cccccccd 	.word	0xcccccccd

08001bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bf8:	480d      	ldr	r0, [pc, #52]	; (8001c30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bfa:	490e      	ldr	r1, [pc, #56]	; (8001c34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bfc:	4a0e      	ldr	r2, [pc, #56]	; (8001c38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c00:	e002      	b.n	8001c08 <LoopCopyDataInit>

08001c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c06:	3304      	adds	r3, #4

08001c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c0c:	d3f9      	bcc.n	8001c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0e:	4a0b      	ldr	r2, [pc, #44]	; (8001c3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c10:	4c0b      	ldr	r4, [pc, #44]	; (8001c40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c14:	e001      	b.n	8001c1a <LoopFillZerobss>

08001c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c18:	3204      	adds	r2, #4

08001c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c1c:	d3fb      	bcc.n	8001c16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c1e:	f7ff ff17 	bl	8001a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c22:	f003 fafd 	bl	8005220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c26:	f7ff fc6d 	bl	8001504 <main>
  bx  lr    
 8001c2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c34:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001c38:	08008238 	.word	0x08008238
  ldr r2, =_sbss
 8001c3c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001c40:	200001e0 	.word	0x200001e0

08001c44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c44:	e7fe      	b.n	8001c44 <ADC_IRQHandler>
	...

08001c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <HAL_Init+0x40>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a0d      	ldr	r2, [pc, #52]	; (8001c88 <HAL_Init+0x40>)
 8001c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_Init+0x40>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <HAL_Init+0x40>)
 8001c5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <HAL_Init+0x40>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a07      	ldr	r2, [pc, #28]	; (8001c88 <HAL_Init+0x40>)
 8001c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c70:	2003      	movs	r0, #3
 8001c72:	f000 f94f 	bl	8001f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c76:	200f      	movs	r0, #15
 8001c78:	f000 f808 	bl	8001c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c7c:	f7ff fe8c 	bl	8001998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40023c00 	.word	0x40023c00

08001c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_InitTick+0x54>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_InitTick+0x58>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 f967 	bl	8001f7e <HAL_SYSTICK_Config>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e00e      	b.n	8001cd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b0f      	cmp	r3, #15
 8001cbe:	d80a      	bhi.n	8001cd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc8:	f000 f92f 	bl	8001f2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ccc:	4a06      	ldr	r2, [pc, #24]	; (8001ce8 <HAL_InitTick+0x5c>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e000      	b.n	8001cd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000004 	.word	0x20000004
 8001ce4:	2000000c 	.word	0x2000000c
 8001ce8:	20000008 	.word	0x20000008

08001cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_IncTick+0x20>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_IncTick+0x24>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <HAL_IncTick+0x24>)
 8001cfe:	6013      	str	r3, [r2, #0]
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	2000000c 	.word	0x2000000c
 8001d10:	200001dc 	.word	0x200001dc

08001d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return uwTick;
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <HAL_GetTick+0x14>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	200001dc 	.word	0x200001dc

08001d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d34:	f7ff ffee 	bl	8001d14 <HAL_GetTick>
 8001d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d44:	d005      	beq.n	8001d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <HAL_Delay+0x44>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4413      	add	r3, r2
 8001d50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d52:	bf00      	nop
 8001d54:	f7ff ffde 	bl	8001d14 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d8f7      	bhi.n	8001d54 <HAL_Delay+0x28>
  {
  }
}
 8001d64:	bf00      	nop
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	2000000c 	.word	0x2000000c

08001d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d90:	4013      	ands	r3, r2
 8001d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001da6:	4a04      	ldr	r2, [pc, #16]	; (8001db8 <__NVIC_SetPriorityGrouping+0x44>)
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	60d3      	str	r3, [r2, #12]
}
 8001dac:	bf00      	nop
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc0:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	0a1b      	lsrs	r3, r3, #8
 8001dc6:	f003 0307 	and.w	r3, r3, #7
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	db0b      	blt.n	8001e02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	f003 021f 	and.w	r2, r3, #31
 8001df0:	4907      	ldr	r1, [pc, #28]	; (8001e10 <__NVIC_EnableIRQ+0x38>)
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	095b      	lsrs	r3, r3, #5
 8001df8:	2001      	movs	r0, #1
 8001dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000e100 	.word	0xe000e100

08001e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	6039      	str	r1, [r7, #0]
 8001e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	db0a      	blt.n	8001e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	490c      	ldr	r1, [pc, #48]	; (8001e60 <__NVIC_SetPriority+0x4c>)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	0112      	lsls	r2, r2, #4
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	440b      	add	r3, r1
 8001e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e3c:	e00a      	b.n	8001e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	4908      	ldr	r1, [pc, #32]	; (8001e64 <__NVIC_SetPriority+0x50>)
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	3b04      	subs	r3, #4
 8001e4c:	0112      	lsls	r2, r2, #4
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	440b      	add	r3, r1
 8001e52:	761a      	strb	r2, [r3, #24]
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000e100 	.word	0xe000e100
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b089      	sub	sp, #36	; 0x24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f1c3 0307 	rsb	r3, r3, #7
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	bf28      	it	cs
 8001e86:	2304      	movcs	r3, #4
 8001e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	2b06      	cmp	r3, #6
 8001e90:	d902      	bls.n	8001e98 <NVIC_EncodePriority+0x30>
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3b03      	subs	r3, #3
 8001e96:	e000      	b.n	8001e9a <NVIC_EncodePriority+0x32>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43da      	mvns	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	401a      	ands	r2, r3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eba:	43d9      	mvns	r1, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec0:	4313      	orrs	r3, r2
         );
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3724      	adds	r7, #36	; 0x24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
	...

08001ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee0:	d301      	bcc.n	8001ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e00f      	b.n	8001f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ee6:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <SysTick_Config+0x40>)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eee:	210f      	movs	r1, #15
 8001ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef4:	f7ff ff8e 	bl	8001e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <SysTick_Config+0x40>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001efe:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <SysTick_Config+0x40>)
 8001f00:	2207      	movs	r2, #7
 8001f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	e000e010 	.word	0xe000e010

08001f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff ff29 	bl	8001d74 <__NVIC_SetPriorityGrouping>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b086      	sub	sp, #24
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	4603      	mov	r3, r0
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
 8001f36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f3c:	f7ff ff3e 	bl	8001dbc <__NVIC_GetPriorityGrouping>
 8001f40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	68b9      	ldr	r1, [r7, #8]
 8001f46:	6978      	ldr	r0, [r7, #20]
 8001f48:	f7ff ff8e 	bl	8001e68 <NVIC_EncodePriority>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f52:	4611      	mov	r1, r2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ff5d 	bl	8001e14 <__NVIC_SetPriority>
}
 8001f5a:	bf00      	nop
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	4603      	mov	r3, r0
 8001f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff31 	bl	8001dd8 <__NVIC_EnableIRQ>
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff ffa2 	bl	8001ed0 <SysTick_Config>
 8001f8c:	4603      	mov	r3, r0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b089      	sub	sp, #36	; 0x24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	e16b      	b.n	800228c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	f040 815a 	bne.w	8002286 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d005      	beq.n	8001fea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d130      	bne.n	800204c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002020:	2201      	movs	r2, #1
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	f003 0201 	and.w	r2, r3, #1
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	2b03      	cmp	r3, #3
 8002056:	d017      	beq.n	8002088 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	2203      	movs	r2, #3
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d123      	bne.n	80020dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	08da      	lsrs	r2, r3, #3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3208      	adds	r2, #8
 800209c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	220f      	movs	r2, #15
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	08da      	lsrs	r2, r3, #3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3208      	adds	r2, #8
 80020d6:	69b9      	ldr	r1, [r7, #24]
 80020d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	2203      	movs	r2, #3
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0203 	and.w	r2, r3, #3
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 80b4 	beq.w	8002286 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	4b60      	ldr	r3, [pc, #384]	; (80022a4 <HAL_GPIO_Init+0x30c>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	4a5f      	ldr	r2, [pc, #380]	; (80022a4 <HAL_GPIO_Init+0x30c>)
 8002128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800212c:	6453      	str	r3, [r2, #68]	; 0x44
 800212e:	4b5d      	ldr	r3, [pc, #372]	; (80022a4 <HAL_GPIO_Init+0x30c>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800213a:	4a5b      	ldr	r2, [pc, #364]	; (80022a8 <HAL_GPIO_Init+0x310>)
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	089b      	lsrs	r3, r3, #2
 8002140:	3302      	adds	r3, #2
 8002142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	220f      	movs	r2, #15
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a52      	ldr	r2, [pc, #328]	; (80022ac <HAL_GPIO_Init+0x314>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d02b      	beq.n	80021be <HAL_GPIO_Init+0x226>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a51      	ldr	r2, [pc, #324]	; (80022b0 <HAL_GPIO_Init+0x318>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d025      	beq.n	80021ba <HAL_GPIO_Init+0x222>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a50      	ldr	r2, [pc, #320]	; (80022b4 <HAL_GPIO_Init+0x31c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d01f      	beq.n	80021b6 <HAL_GPIO_Init+0x21e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4f      	ldr	r2, [pc, #316]	; (80022b8 <HAL_GPIO_Init+0x320>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d019      	beq.n	80021b2 <HAL_GPIO_Init+0x21a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4e      	ldr	r2, [pc, #312]	; (80022bc <HAL_GPIO_Init+0x324>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d013      	beq.n	80021ae <HAL_GPIO_Init+0x216>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4d      	ldr	r2, [pc, #308]	; (80022c0 <HAL_GPIO_Init+0x328>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00d      	beq.n	80021aa <HAL_GPIO_Init+0x212>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4c      	ldr	r2, [pc, #304]	; (80022c4 <HAL_GPIO_Init+0x32c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d007      	beq.n	80021a6 <HAL_GPIO_Init+0x20e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4b      	ldr	r2, [pc, #300]	; (80022c8 <HAL_GPIO_Init+0x330>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d101      	bne.n	80021a2 <HAL_GPIO_Init+0x20a>
 800219e:	2307      	movs	r3, #7
 80021a0:	e00e      	b.n	80021c0 <HAL_GPIO_Init+0x228>
 80021a2:	2308      	movs	r3, #8
 80021a4:	e00c      	b.n	80021c0 <HAL_GPIO_Init+0x228>
 80021a6:	2306      	movs	r3, #6
 80021a8:	e00a      	b.n	80021c0 <HAL_GPIO_Init+0x228>
 80021aa:	2305      	movs	r3, #5
 80021ac:	e008      	b.n	80021c0 <HAL_GPIO_Init+0x228>
 80021ae:	2304      	movs	r3, #4
 80021b0:	e006      	b.n	80021c0 <HAL_GPIO_Init+0x228>
 80021b2:	2303      	movs	r3, #3
 80021b4:	e004      	b.n	80021c0 <HAL_GPIO_Init+0x228>
 80021b6:	2302      	movs	r3, #2
 80021b8:	e002      	b.n	80021c0 <HAL_GPIO_Init+0x228>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <HAL_GPIO_Init+0x228>
 80021be:	2300      	movs	r3, #0
 80021c0:	69fa      	ldr	r2, [r7, #28]
 80021c2:	f002 0203 	and.w	r2, r2, #3
 80021c6:	0092      	lsls	r2, r2, #2
 80021c8:	4093      	lsls	r3, r2
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d0:	4935      	ldr	r1, [pc, #212]	; (80022a8 <HAL_GPIO_Init+0x310>)
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	089b      	lsrs	r3, r3, #2
 80021d6:	3302      	adds	r3, #2
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021de:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <HAL_GPIO_Init+0x334>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002202:	4a32      	ldr	r2, [pc, #200]	; (80022cc <HAL_GPIO_Init+0x334>)
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002208:	4b30      	ldr	r3, [pc, #192]	; (80022cc <HAL_GPIO_Init+0x334>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800222c:	4a27      	ldr	r2, [pc, #156]	; (80022cc <HAL_GPIO_Init+0x334>)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002232:	4b26      	ldr	r3, [pc, #152]	; (80022cc <HAL_GPIO_Init+0x334>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002256:	4a1d      	ldr	r2, [pc, #116]	; (80022cc <HAL_GPIO_Init+0x334>)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800225c:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <HAL_GPIO_Init+0x334>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002280:	4a12      	ldr	r2, [pc, #72]	; (80022cc <HAL_GPIO_Init+0x334>)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3301      	adds	r3, #1
 800228a:	61fb      	str	r3, [r7, #28]
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	2b0f      	cmp	r3, #15
 8002290:	f67f ae90 	bls.w	8001fb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	3724      	adds	r7, #36	; 0x24
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40013800 	.word	0x40013800
 80022ac:	40020000 	.word	0x40020000
 80022b0:	40020400 	.word	0x40020400
 80022b4:	40020800 	.word	0x40020800
 80022b8:	40020c00 	.word	0x40020c00
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40021400 	.word	0x40021400
 80022c4:	40021800 	.word	0x40021800
 80022c8:	40021c00 	.word	0x40021c00
 80022cc:	40013c00 	.word	0x40013c00

080022d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	807b      	strh	r3, [r7, #2]
 80022dc:	4613      	mov	r3, r2
 80022de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022e0:	787b      	ldrb	r3, [r7, #1]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022e6:	887a      	ldrh	r2, [r7, #2]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022ec:	e003      	b.n	80022f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022ee:	887b      	ldrh	r3, [r7, #2]
 80022f0:	041a      	lsls	r2, r3, #16
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	619a      	str	r2, [r3, #24]
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002302:	b480      	push	{r7}
 8002304:	b085      	sub	sp, #20
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	460b      	mov	r3, r1
 800230c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002314:	887a      	ldrh	r2, [r7, #2]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4013      	ands	r3, r2
 800231a:	041a      	lsls	r2, r3, #16
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	43d9      	mvns	r1, r3
 8002320:	887b      	ldrh	r3, [r7, #2]
 8002322:	400b      	ands	r3, r1
 8002324:	431a      	orrs	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
}
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e12b      	b.n	80025a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7fe fcbe 	bl	8000ce0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2224      	movs	r2, #36	; 0x24
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0201 	bic.w	r2, r2, #1
 800237a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800238a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800239a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800239c:	f001 fd2a 	bl	8003df4 <HAL_RCC_GetPCLK1Freq>
 80023a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	4a81      	ldr	r2, [pc, #516]	; (80025ac <HAL_I2C_Init+0x274>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d807      	bhi.n	80023bc <HAL_I2C_Init+0x84>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4a80      	ldr	r2, [pc, #512]	; (80025b0 <HAL_I2C_Init+0x278>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	bf94      	ite	ls
 80023b4:	2301      	movls	r3, #1
 80023b6:	2300      	movhi	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	e006      	b.n	80023ca <HAL_I2C_Init+0x92>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4a7d      	ldr	r2, [pc, #500]	; (80025b4 <HAL_I2C_Init+0x27c>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	bf94      	ite	ls
 80023c4:	2301      	movls	r3, #1
 80023c6:	2300      	movhi	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e0e7      	b.n	80025a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4a78      	ldr	r2, [pc, #480]	; (80025b8 <HAL_I2C_Init+0x280>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	0c9b      	lsrs	r3, r3, #18
 80023dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	4a6a      	ldr	r2, [pc, #424]	; (80025ac <HAL_I2C_Init+0x274>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d802      	bhi.n	800240c <HAL_I2C_Init+0xd4>
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	3301      	adds	r3, #1
 800240a:	e009      	b.n	8002420 <HAL_I2C_Init+0xe8>
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002412:	fb02 f303 	mul.w	r3, r2, r3
 8002416:	4a69      	ldr	r2, [pc, #420]	; (80025bc <HAL_I2C_Init+0x284>)
 8002418:	fba2 2303 	umull	r2, r3, r2, r3
 800241c:	099b      	lsrs	r3, r3, #6
 800241e:	3301      	adds	r3, #1
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	430b      	orrs	r3, r1
 8002426:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002432:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	495c      	ldr	r1, [pc, #368]	; (80025ac <HAL_I2C_Init+0x274>)
 800243c:	428b      	cmp	r3, r1
 800243e:	d819      	bhi.n	8002474 <HAL_I2C_Init+0x13c>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	1e59      	subs	r1, r3, #1
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	fbb1 f3f3 	udiv	r3, r1, r3
 800244e:	1c59      	adds	r1, r3, #1
 8002450:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002454:	400b      	ands	r3, r1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00a      	beq.n	8002470 <HAL_I2C_Init+0x138>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1e59      	subs	r1, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	fbb1 f3f3 	udiv	r3, r1, r3
 8002468:	3301      	adds	r3, #1
 800246a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800246e:	e051      	b.n	8002514 <HAL_I2C_Init+0x1dc>
 8002470:	2304      	movs	r3, #4
 8002472:	e04f      	b.n	8002514 <HAL_I2C_Init+0x1dc>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d111      	bne.n	80024a0 <HAL_I2C_Init+0x168>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1e58      	subs	r0, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6859      	ldr	r1, [r3, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	440b      	add	r3, r1
 800248a:	fbb0 f3f3 	udiv	r3, r0, r3
 800248e:	3301      	adds	r3, #1
 8002490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002494:	2b00      	cmp	r3, #0
 8002496:	bf0c      	ite	eq
 8002498:	2301      	moveq	r3, #1
 800249a:	2300      	movne	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	e012      	b.n	80024c6 <HAL_I2C_Init+0x18e>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1e58      	subs	r0, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6859      	ldr	r1, [r3, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	0099      	lsls	r1, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024b6:	3301      	adds	r3, #1
 80024b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024bc:	2b00      	cmp	r3, #0
 80024be:	bf0c      	ite	eq
 80024c0:	2301      	moveq	r3, #1
 80024c2:	2300      	movne	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_I2C_Init+0x196>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e022      	b.n	8002514 <HAL_I2C_Init+0x1dc>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10e      	bne.n	80024f4 <HAL_I2C_Init+0x1bc>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1e58      	subs	r0, r3, #1
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6859      	ldr	r1, [r3, #4]
 80024de:	460b      	mov	r3, r1
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	440b      	add	r3, r1
 80024e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80024e8:	3301      	adds	r3, #1
 80024ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024f2:	e00f      	b.n	8002514 <HAL_I2C_Init+0x1dc>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	1e58      	subs	r0, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6859      	ldr	r1, [r3, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	0099      	lsls	r1, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	fbb0 f3f3 	udiv	r3, r0, r3
 800250a:	3301      	adds	r3, #1
 800250c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002510:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	6809      	ldr	r1, [r1, #0]
 8002518:	4313      	orrs	r3, r2
 800251a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69da      	ldr	r2, [r3, #28]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002542:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6911      	ldr	r1, [r2, #16]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68d2      	ldr	r2, [r2, #12]
 800254e:	4311      	orrs	r1, r2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	430b      	orrs	r3, r1
 8002556:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695a      	ldr	r2, [r3, #20]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0201 	orr.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2220      	movs	r2, #32
 800258e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	000186a0 	.word	0x000186a0
 80025b0:	001e847f 	.word	0x001e847f
 80025b4:	003d08ff 	.word	0x003d08ff
 80025b8:	431bde83 	.word	0x431bde83
 80025bc:	10624dd3 	.word	0x10624dd3

080025c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	4608      	mov	r0, r1
 80025ca:	4611      	mov	r1, r2
 80025cc:	461a      	mov	r2, r3
 80025ce:	4603      	mov	r3, r0
 80025d0:	817b      	strh	r3, [r7, #10]
 80025d2:	460b      	mov	r3, r1
 80025d4:	813b      	strh	r3, [r7, #8]
 80025d6:	4613      	mov	r3, r2
 80025d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025da:	f7ff fb9b 	bl	8001d14 <HAL_GetTick>
 80025de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b20      	cmp	r3, #32
 80025ea:	f040 80d9 	bne.w	80027a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	2319      	movs	r3, #25
 80025f4:	2201      	movs	r2, #1
 80025f6:	496d      	ldr	r1, [pc, #436]	; (80027ac <HAL_I2C_Mem_Write+0x1ec>)
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 fdad 	bl	8003158 <I2C_WaitOnFlagUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002604:	2302      	movs	r3, #2
 8002606:	e0cc      	b.n	80027a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800260e:	2b01      	cmp	r3, #1
 8002610:	d101      	bne.n	8002616 <HAL_I2C_Mem_Write+0x56>
 8002612:	2302      	movs	r3, #2
 8002614:	e0c5      	b.n	80027a2 <HAL_I2C_Mem_Write+0x1e2>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b01      	cmp	r3, #1
 800262a:	d007      	beq.n	800263c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800264a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2221      	movs	r2, #33	; 0x21
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2240      	movs	r2, #64	; 0x40
 8002658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a3a      	ldr	r2, [r7, #32]
 8002666:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800266c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4a4d      	ldr	r2, [pc, #308]	; (80027b0 <HAL_I2C_Mem_Write+0x1f0>)
 800267c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800267e:	88f8      	ldrh	r0, [r7, #6]
 8002680:	893a      	ldrh	r2, [r7, #8]
 8002682:	8979      	ldrh	r1, [r7, #10]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	9301      	str	r3, [sp, #4]
 8002688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	4603      	mov	r3, r0
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fbe4 	bl	8002e5c <I2C_RequestMemoryWrite>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d052      	beq.n	8002740 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e081      	b.n	80027a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 fe2e 	bl	8003304 <I2C_WaitOnTXEFlagUntilTimeout>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00d      	beq.n	80026ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d107      	bne.n	80026c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e06b      	b.n	80027a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	781a      	ldrb	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b04      	cmp	r3, #4
 8002706:	d11b      	bne.n	8002740 <HAL_I2C_Mem_Write+0x180>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270c:	2b00      	cmp	r3, #0
 800270e:	d017      	beq.n	8002740 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	781a      	ldrb	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272a:	3b01      	subs	r3, #1
 800272c:	b29a      	uxth	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002736:	b29b      	uxth	r3, r3
 8002738:	3b01      	subs	r3, #1
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1aa      	bne.n	800269e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 fe1a 	bl	8003386 <I2C_WaitOnBTFFlagUntilTimeout>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00d      	beq.n	8002774 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	2b04      	cmp	r3, #4
 800275e:	d107      	bne.n	8002770 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800276e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e016      	b.n	80027a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002782:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	e000      	b.n	80027a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80027a0:	2302      	movs	r3, #2
  }
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	00100002 	.word	0x00100002
 80027b0:	ffff0000 	.word	0xffff0000

080027b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08c      	sub	sp, #48	; 0x30
 80027b8:	af02      	add	r7, sp, #8
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	4608      	mov	r0, r1
 80027be:	4611      	mov	r1, r2
 80027c0:	461a      	mov	r2, r3
 80027c2:	4603      	mov	r3, r0
 80027c4:	817b      	strh	r3, [r7, #10]
 80027c6:	460b      	mov	r3, r1
 80027c8:	813b      	strh	r3, [r7, #8]
 80027ca:	4613      	mov	r3, r2
 80027cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027ce:	f7ff faa1 	bl	8001d14 <HAL_GetTick>
 80027d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b20      	cmp	r3, #32
 80027de:	f040 8208 	bne.w	8002bf2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	2319      	movs	r3, #25
 80027e8:	2201      	movs	r2, #1
 80027ea:	497b      	ldr	r1, [pc, #492]	; (80029d8 <HAL_I2C_Mem_Read+0x224>)
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 fcb3 	bl	8003158 <I2C_WaitOnFlagUntilTimeout>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80027f8:	2302      	movs	r3, #2
 80027fa:	e1fb      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_I2C_Mem_Read+0x56>
 8002806:	2302      	movs	r3, #2
 8002808:	e1f4      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x440>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b01      	cmp	r3, #1
 800281e:	d007      	beq.n	8002830 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800283e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2222      	movs	r2, #34	; 0x22
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2240      	movs	r2, #64	; 0x40
 800284c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800285a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002860:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4a5b      	ldr	r2, [pc, #364]	; (80029dc <HAL_I2C_Mem_Read+0x228>)
 8002870:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002872:	88f8      	ldrh	r0, [r7, #6]
 8002874:	893a      	ldrh	r2, [r7, #8]
 8002876:	8979      	ldrh	r1, [r7, #10]
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	9301      	str	r3, [sp, #4]
 800287c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	4603      	mov	r3, r0
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 fb80 	bl	8002f88 <I2C_RequestMemoryRead>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e1b0      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002896:	2b00      	cmp	r3, #0
 8002898:	d113      	bne.n	80028c2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800289a:	2300      	movs	r3, #0
 800289c:	623b      	str	r3, [r7, #32]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	623b      	str	r3, [r7, #32]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	623b      	str	r3, [r7, #32]
 80028ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	e184      	b.n	8002bcc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d11b      	bne.n	8002902 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	61fb      	str	r3, [r7, #28]
 80028ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	e164      	b.n	8002bcc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002906:	2b02      	cmp	r3, #2
 8002908:	d11b      	bne.n	8002942 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002918:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002928:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800292a:	2300      	movs	r3, #0
 800292c:	61bb      	str	r3, [r7, #24]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	61bb      	str	r3, [r7, #24]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	61bb      	str	r3, [r7, #24]
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	e144      	b.n	8002bcc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002958:	e138      	b.n	8002bcc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295e:	2b03      	cmp	r3, #3
 8002960:	f200 80f1 	bhi.w	8002b46 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002968:	2b01      	cmp	r3, #1
 800296a:	d123      	bne.n	80029b4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800296c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 fd49 	bl	8003408 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e139      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	691a      	ldr	r2, [r3, #16]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029b2:	e10b      	b.n	8002bcc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d14e      	bne.n	8002a5a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c2:	2200      	movs	r2, #0
 80029c4:	4906      	ldr	r1, [pc, #24]	; (80029e0 <HAL_I2C_Mem_Read+0x22c>)
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 fbc6 	bl	8003158 <I2C_WaitOnFlagUntilTimeout>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d008      	beq.n	80029e4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e10e      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x440>
 80029d6:	bf00      	nop
 80029d8:	00100002 	.word	0x00100002
 80029dc:	ffff0000 	.word	0xffff0000
 80029e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691a      	ldr	r2, [r3, #16]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	691a      	ldr	r2, [r3, #16]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a58:	e0b8      	b.n	8002bcc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a60:	2200      	movs	r2, #0
 8002a62:	4966      	ldr	r1, [pc, #408]	; (8002bfc <HAL_I2C_Mem_Read+0x448>)
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 fb77 	bl	8003158 <I2C_WaitOnFlagUntilTimeout>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0bf      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	691a      	ldr	r2, [r3, #16]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002abc:	2200      	movs	r2, #0
 8002abe:	494f      	ldr	r1, [pc, #316]	; (8002bfc <HAL_I2C_Mem_Read+0x448>)
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 fb49 	bl	8003158 <I2C_WaitOnFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e091      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ade:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691a      	ldr	r2, [r3, #16]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b44:	e042      	b.n	8002bcc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 fc5c 	bl	8003408 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e04c      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	691a      	ldr	r2, [r3, #16]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d118      	bne.n	8002bcc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f47f aec2 	bne.w	800295a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e000      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002bf2:	2302      	movs	r3, #2
  }
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3728      	adds	r7, #40	; 0x28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	00010004 	.word	0x00010004

08002c00 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08a      	sub	sp, #40	; 0x28
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002c10:	f7ff f880 	bl	8001d14 <HAL_GetTick>
 8002c14:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002c16:	2301      	movs	r3, #1
 8002c18:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b20      	cmp	r3, #32
 8002c24:	f040 8111 	bne.w	8002e4a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	2319      	movs	r3, #25
 8002c2e:	2201      	movs	r2, #1
 8002c30:	4988      	ldr	r1, [pc, #544]	; (8002e54 <HAL_I2C_IsDeviceReady+0x254>)
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 fa90 	bl	8003158 <I2C_WaitOnFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e104      	b.n	8002e4c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_I2C_IsDeviceReady+0x50>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e0fd      	b.n	8002e4c <HAL_I2C_IsDeviceReady+0x24c>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d007      	beq.n	8002c76 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f042 0201 	orr.w	r2, r2, #1
 8002c74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2224      	movs	r2, #36	; 0x24
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4a70      	ldr	r2, [pc, #448]	; (8002e58 <HAL_I2C_IsDeviceReady+0x258>)
 8002c98:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ca8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 fa4e 	bl	8003158 <I2C_WaitOnFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00d      	beq.n	8002cde <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cd0:	d103      	bne.n	8002cda <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cd8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e0b6      	b.n	8002e4c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cde:	897b      	ldrh	r3, [r7, #10]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002cee:	f7ff f811 	bl	8001d14 <HAL_GetTick>
 8002cf2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	bf0c      	ite	eq
 8002d02:	2301      	moveq	r3, #1
 8002d04:	2300      	movne	r3, #0
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d18:	bf0c      	ite	eq
 8002d1a:	2301      	moveq	r3, #1
 8002d1c:	2300      	movne	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d22:	e025      	b.n	8002d70 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d24:	f7fe fff6 	bl	8001d14 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d302      	bcc.n	8002d3a <HAL_I2C_IsDeviceReady+0x13a>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d103      	bne.n	8002d42 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	22a0      	movs	r2, #160	; 0xa0
 8002d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	bf0c      	ite	eq
 8002d50:	2301      	moveq	r3, #1
 8002d52:	2300      	movne	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d66:	bf0c      	ite	eq
 8002d68:	2301      	moveq	r3, #1
 8002d6a:	2300      	movne	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2ba0      	cmp	r3, #160	; 0xa0
 8002d7a:	d005      	beq.n	8002d88 <HAL_I2C_IsDeviceReady+0x188>
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d102      	bne.n	8002d88 <HAL_I2C_IsDeviceReady+0x188>
 8002d82:	7dbb      	ldrb	r3, [r7, #22]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0cd      	beq.n	8002d24 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d129      	bne.n	8002df2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dae:	2300      	movs	r3, #0
 8002db0:	613b      	str	r3, [r7, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	2319      	movs	r3, #25
 8002dca:	2201      	movs	r2, #1
 8002dcc:	4921      	ldr	r1, [pc, #132]	; (8002e54 <HAL_I2C_IsDeviceReady+0x254>)
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 f9c2 	bl	8003158 <I2C_WaitOnFlagUntilTimeout>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e036      	b.n	8002e4c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	e02c      	b.n	8002e4c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e00:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e0a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	2319      	movs	r3, #25
 8002e12:	2201      	movs	r2, #1
 8002e14:	490f      	ldr	r1, [pc, #60]	; (8002e54 <HAL_I2C_IsDeviceReady+0x254>)
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 f99e 	bl	8003158 <I2C_WaitOnFlagUntilTimeout>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e012      	b.n	8002e4c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	f4ff af32 	bcc.w	8002c9a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002e4a:	2302      	movs	r3, #2
  }
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3720      	adds	r7, #32
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	00100002 	.word	0x00100002
 8002e58:	ffff0000 	.word	0xffff0000

08002e5c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b088      	sub	sp, #32
 8002e60:	af02      	add	r7, sp, #8
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	4608      	mov	r0, r1
 8002e66:	4611      	mov	r1, r2
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	817b      	strh	r3, [r7, #10]
 8002e6e:	460b      	mov	r3, r1
 8002e70:	813b      	strh	r3, [r7, #8]
 8002e72:	4613      	mov	r3, r2
 8002e74:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f960 	bl	8003158 <I2C_WaitOnFlagUntilTimeout>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00d      	beq.n	8002eba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eac:	d103      	bne.n	8002eb6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e05f      	b.n	8002f7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eba:	897b      	ldrh	r3, [r7, #10]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ec8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	6a3a      	ldr	r2, [r7, #32]
 8002ece:	492d      	ldr	r1, [pc, #180]	; (8002f84 <I2C_RequestMemoryWrite+0x128>)
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 f998 	bl	8003206 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e04c      	b.n	8002f7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef8:	6a39      	ldr	r1, [r7, #32]
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 fa02 	bl	8003304 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00d      	beq.n	8002f22 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d107      	bne.n	8002f1e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e02b      	b.n	8002f7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f22:	88fb      	ldrh	r3, [r7, #6]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d105      	bne.n	8002f34 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f28:	893b      	ldrh	r3, [r7, #8]
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	611a      	str	r2, [r3, #16]
 8002f32:	e021      	b.n	8002f78 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f34:	893b      	ldrh	r3, [r7, #8]
 8002f36:	0a1b      	lsrs	r3, r3, #8
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f44:	6a39      	ldr	r1, [r7, #32]
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 f9dc 	bl	8003304 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00d      	beq.n	8002f6e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d107      	bne.n	8002f6a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e005      	b.n	8002f7a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f6e:	893b      	ldrh	r3, [r7, #8]
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	00010002 	.word	0x00010002

08002f88 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	4608      	mov	r0, r1
 8002f92:	4611      	mov	r1, r2
 8002f94:	461a      	mov	r2, r3
 8002f96:	4603      	mov	r3, r0
 8002f98:	817b      	strh	r3, [r7, #10]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	813b      	strh	r3, [r7, #8]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fb0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f8c2 	bl	8003158 <I2C_WaitOnFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00d      	beq.n	8002ff6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe8:	d103      	bne.n	8002ff2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ff0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e0aa      	b.n	800314c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ff6:	897b      	ldrh	r3, [r7, #10]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003004:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	6a3a      	ldr	r2, [r7, #32]
 800300a:	4952      	ldr	r1, [pc, #328]	; (8003154 <I2C_RequestMemoryRead+0x1cc>)
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f8fa 	bl	8003206 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e097      	b.n	800314c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003034:	6a39      	ldr	r1, [r7, #32]
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f964 	bl	8003304 <I2C_WaitOnTXEFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00d      	beq.n	800305e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	2b04      	cmp	r3, #4
 8003048:	d107      	bne.n	800305a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003058:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e076      	b.n	800314c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800305e:	88fb      	ldrh	r3, [r7, #6]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d105      	bne.n	8003070 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003064:	893b      	ldrh	r3, [r7, #8]
 8003066:	b2da      	uxtb	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	611a      	str	r2, [r3, #16]
 800306e:	e021      	b.n	80030b4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003070:	893b      	ldrh	r3, [r7, #8]
 8003072:	0a1b      	lsrs	r3, r3, #8
 8003074:	b29b      	uxth	r3, r3
 8003076:	b2da      	uxtb	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800307e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003080:	6a39      	ldr	r1, [r7, #32]
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 f93e 	bl	8003304 <I2C_WaitOnTXEFlagUntilTimeout>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00d      	beq.n	80030aa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	2b04      	cmp	r3, #4
 8003094:	d107      	bne.n	80030a6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e050      	b.n	800314c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030aa:	893b      	ldrh	r3, [r7, #8]
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b6:	6a39      	ldr	r1, [r7, #32]
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 f923 	bl	8003304 <I2C_WaitOnTXEFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00d      	beq.n	80030e0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d107      	bne.n	80030dc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e035      	b.n	800314c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 f82b 	bl	8003158 <I2C_WaitOnFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00d      	beq.n	8003124 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003116:	d103      	bne.n	8003120 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800311e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e013      	b.n	800314c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003124:	897b      	ldrh	r3, [r7, #10]
 8003126:	b2db      	uxtb	r3, r3
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	b2da      	uxtb	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	6a3a      	ldr	r2, [r7, #32]
 8003138:	4906      	ldr	r1, [pc, #24]	; (8003154 <I2C_RequestMemoryRead+0x1cc>)
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f863 	bl	8003206 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	00010002 	.word	0x00010002

08003158 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	603b      	str	r3, [r7, #0]
 8003164:	4613      	mov	r3, r2
 8003166:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003168:	e025      	b.n	80031b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003170:	d021      	beq.n	80031b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003172:	f7fe fdcf 	bl	8001d14 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d302      	bcc.n	8003188 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d116      	bne.n	80031b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2220      	movs	r2, #32
 8003192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f043 0220 	orr.w	r2, r3, #32
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e023      	b.n	80031fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	0c1b      	lsrs	r3, r3, #16
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d10d      	bne.n	80031dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	43da      	mvns	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4013      	ands	r3, r2
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	bf0c      	ite	eq
 80031d2:	2301      	moveq	r3, #1
 80031d4:	2300      	movne	r3, #0
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	461a      	mov	r2, r3
 80031da:	e00c      	b.n	80031f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	43da      	mvns	r2, r3
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	4013      	ands	r3, r2
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	bf0c      	ite	eq
 80031ee:	2301      	moveq	r3, #1
 80031f0:	2300      	movne	r3, #0
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	461a      	mov	r2, r3
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d0b6      	beq.n	800316a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b084      	sub	sp, #16
 800320a:	af00      	add	r7, sp, #0
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	607a      	str	r2, [r7, #4]
 8003212:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003214:	e051      	b.n	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003224:	d123      	bne.n	800326e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003234:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800323e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f043 0204 	orr.w	r2, r3, #4
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e046      	b.n	80032fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003274:	d021      	beq.n	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003276:	f7fe fd4d 	bl	8001d14 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	429a      	cmp	r2, r3
 8003284:	d302      	bcc.n	800328c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d116      	bne.n	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f043 0220 	orr.w	r2, r3, #32
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e020      	b.n	80032fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	0c1b      	lsrs	r3, r3, #16
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d10c      	bne.n	80032de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	43da      	mvns	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	4013      	ands	r3, r2
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	bf14      	ite	ne
 80032d6:	2301      	movne	r3, #1
 80032d8:	2300      	moveq	r3, #0
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	e00b      	b.n	80032f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	43da      	mvns	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	4013      	ands	r3, r2
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	bf14      	ite	ne
 80032f0:	2301      	movne	r3, #1
 80032f2:	2300      	moveq	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d18d      	bne.n	8003216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003310:	e02d      	b.n	800336e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f8ce 	bl	80034b4 <I2C_IsAcknowledgeFailed>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e02d      	b.n	800337e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003328:	d021      	beq.n	800336e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332a:	f7fe fcf3 	bl	8001d14 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	429a      	cmp	r2, r3
 8003338:	d302      	bcc.n	8003340 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d116      	bne.n	800336e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f043 0220 	orr.w	r2, r3, #32
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e007      	b.n	800337e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003378:	2b80      	cmp	r3, #128	; 0x80
 800337a:	d1ca      	bne.n	8003312 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b084      	sub	sp, #16
 800338a:	af00      	add	r7, sp, #0
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003392:	e02d      	b.n	80033f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 f88d 	bl	80034b4 <I2C_IsAcknowledgeFailed>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e02d      	b.n	8003400 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033aa:	d021      	beq.n	80033f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ac:	f7fe fcb2 	bl	8001d14 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d302      	bcc.n	80033c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d116      	bne.n	80033f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	f043 0220 	orr.w	r2, r3, #32
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e007      	b.n	8003400 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d1ca      	bne.n	8003394 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003414:	e042      	b.n	800349c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	2b10      	cmp	r3, #16
 8003422:	d119      	bne.n	8003458 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0210 	mvn.w	r2, #16
 800342c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e029      	b.n	80034ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003458:	f7fe fc5c 	bl	8001d14 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	429a      	cmp	r2, r3
 8003466:	d302      	bcc.n	800346e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d116      	bne.n	800349c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	f043 0220 	orr.w	r2, r3, #32
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e007      	b.n	80034ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a6:	2b40      	cmp	r3, #64	; 0x40
 80034a8:	d1b5      	bne.n	8003416 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ca:	d11b      	bne.n	8003504 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	f043 0204 	orr.w	r2, r3, #4
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e267      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d075      	beq.n	800361e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003532:	4b88      	ldr	r3, [pc, #544]	; (8003754 <HAL_RCC_OscConfig+0x240>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 030c 	and.w	r3, r3, #12
 800353a:	2b04      	cmp	r3, #4
 800353c:	d00c      	beq.n	8003558 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800353e:	4b85      	ldr	r3, [pc, #532]	; (8003754 <HAL_RCC_OscConfig+0x240>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003546:	2b08      	cmp	r3, #8
 8003548:	d112      	bne.n	8003570 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800354a:	4b82      	ldr	r3, [pc, #520]	; (8003754 <HAL_RCC_OscConfig+0x240>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003552:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003556:	d10b      	bne.n	8003570 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003558:	4b7e      	ldr	r3, [pc, #504]	; (8003754 <HAL_RCC_OscConfig+0x240>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d05b      	beq.n	800361c <HAL_RCC_OscConfig+0x108>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d157      	bne.n	800361c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e242      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003578:	d106      	bne.n	8003588 <HAL_RCC_OscConfig+0x74>
 800357a:	4b76      	ldr	r3, [pc, #472]	; (8003754 <HAL_RCC_OscConfig+0x240>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a75      	ldr	r2, [pc, #468]	; (8003754 <HAL_RCC_OscConfig+0x240>)
 8003580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	e01d      	b.n	80035c4 <HAL_RCC_OscConfig+0xb0>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003590:	d10c      	bne.n	80035ac <HAL_RCC_OscConfig+0x98>
 8003592:	4b70      	ldr	r3, [pc, #448]	; (8003754 <HAL_RCC_OscConfig+0x240>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a6f      	ldr	r2, [pc, #444]	; (8003754 <HAL_RCC_OscConfig+0x240>)
 8003598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	4b6d      	ldr	r3, [pc, #436]	; (8003754 <HAL_RCC_OscConfig+0x240>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a6c      	ldr	r2, [pc, #432]	; (8003754 <HAL_RCC_OscConfig+0x240>)
 80035a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	e00b      	b.n	80035c4 <HAL_RCC_OscConfig+0xb0>
 80035ac:	4b69      	ldr	r3, [pc, #420]	; (8003754 <HAL_RCC_OscConfig+0x240>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a68      	ldr	r2, [pc, #416]	; (8003754 <HAL_RCC_OscConfig+0x240>)
 80035b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	4b66      	ldr	r3, [pc, #408]	; (8003754 <HAL_RCC_OscConfig+0x240>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a65      	ldr	r2, [pc, #404]	; (8003754 <HAL_RCC_OscConfig+0x240>)
 80035be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d013      	beq.n	80035f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035cc:	f7fe fba2 	bl	8001d14 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d4:	f7fe fb9e 	bl	8001d14 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b64      	cmp	r3, #100	; 0x64
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e207      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e6:	4b5b      	ldr	r3, [pc, #364]	; (8003754 <HAL_RCC_OscConfig+0x240>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0xc0>
 80035f2:	e014      	b.n	800361e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f4:	f7fe fb8e 	bl	8001d14 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035fc:	f7fe fb8a 	bl	8001d14 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b64      	cmp	r3, #100	; 0x64
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e1f3      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360e:	4b51      	ldr	r3, [pc, #324]	; (8003754 <HAL_RCC_OscConfig+0x240>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0xe8>
 800361a:	e000      	b.n	800361e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800361c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d063      	beq.n	80036f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800362a:	4b4a      	ldr	r3, [pc, #296]	; (8003754 <HAL_RCC_OscConfig+0x240>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00b      	beq.n	800364e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003636:	4b47      	ldr	r3, [pc, #284]	; (8003754 <HAL_RCC_OscConfig+0x240>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800363e:	2b08      	cmp	r3, #8
 8003640:	d11c      	bne.n	800367c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003642:	4b44      	ldr	r3, [pc, #272]	; (8003754 <HAL_RCC_OscConfig+0x240>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d116      	bne.n	800367c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364e:	4b41      	ldr	r3, [pc, #260]	; (8003754 <HAL_RCC_OscConfig+0x240>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <HAL_RCC_OscConfig+0x152>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d001      	beq.n	8003666 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e1c7      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003666:	4b3b      	ldr	r3, [pc, #236]	; (8003754 <HAL_RCC_OscConfig+0x240>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4937      	ldr	r1, [pc, #220]	; (8003754 <HAL_RCC_OscConfig+0x240>)
 8003676:	4313      	orrs	r3, r2
 8003678:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367a:	e03a      	b.n	80036f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d020      	beq.n	80036c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003684:	4b34      	ldr	r3, [pc, #208]	; (8003758 <HAL_RCC_OscConfig+0x244>)
 8003686:	2201      	movs	r2, #1
 8003688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368a:	f7fe fb43 	bl	8001d14 <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003692:	f7fe fb3f 	bl	8001d14 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e1a8      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a4:	4b2b      	ldr	r3, [pc, #172]	; (8003754 <HAL_RCC_OscConfig+0x240>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0f0      	beq.n	8003692 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b0:	4b28      	ldr	r3, [pc, #160]	; (8003754 <HAL_RCC_OscConfig+0x240>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	4925      	ldr	r1, [pc, #148]	; (8003754 <HAL_RCC_OscConfig+0x240>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	600b      	str	r3, [r1, #0]
 80036c4:	e015      	b.n	80036f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036c6:	4b24      	ldr	r3, [pc, #144]	; (8003758 <HAL_RCC_OscConfig+0x244>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fe fb22 	bl	8001d14 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036d4:	f7fe fb1e 	bl	8001d14 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e187      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e6:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <HAL_RCC_OscConfig+0x240>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f0      	bne.n	80036d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d036      	beq.n	800376c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d016      	beq.n	8003734 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003706:	4b15      	ldr	r3, [pc, #84]	; (800375c <HAL_RCC_OscConfig+0x248>)
 8003708:	2201      	movs	r2, #1
 800370a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370c:	f7fe fb02 	bl	8001d14 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003714:	f7fe fafe 	bl	8001d14 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e167      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003726:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <HAL_RCC_OscConfig+0x240>)
 8003728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCC_OscConfig+0x200>
 8003732:	e01b      	b.n	800376c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003734:	4b09      	ldr	r3, [pc, #36]	; (800375c <HAL_RCC_OscConfig+0x248>)
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800373a:	f7fe faeb 	bl	8001d14 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003740:	e00e      	b.n	8003760 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003742:	f7fe fae7 	bl	8001d14 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d907      	bls.n	8003760 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e150      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
 8003754:	40023800 	.word	0x40023800
 8003758:	42470000 	.word	0x42470000
 800375c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003760:	4b88      	ldr	r3, [pc, #544]	; (8003984 <HAL_RCC_OscConfig+0x470>)
 8003762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1ea      	bne.n	8003742 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 8097 	beq.w	80038a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800377a:	2300      	movs	r3, #0
 800377c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800377e:	4b81      	ldr	r3, [pc, #516]	; (8003984 <HAL_RCC_OscConfig+0x470>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10f      	bne.n	80037aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	4b7d      	ldr	r3, [pc, #500]	; (8003984 <HAL_RCC_OscConfig+0x470>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	4a7c      	ldr	r2, [pc, #496]	; (8003984 <HAL_RCC_OscConfig+0x470>)
 8003794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003798:	6413      	str	r3, [r2, #64]	; 0x40
 800379a:	4b7a      	ldr	r3, [pc, #488]	; (8003984 <HAL_RCC_OscConfig+0x470>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a2:	60bb      	str	r3, [r7, #8]
 80037a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a6:	2301      	movs	r3, #1
 80037a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037aa:	4b77      	ldr	r3, [pc, #476]	; (8003988 <HAL_RCC_OscConfig+0x474>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d118      	bne.n	80037e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037b6:	4b74      	ldr	r3, [pc, #464]	; (8003988 <HAL_RCC_OscConfig+0x474>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a73      	ldr	r2, [pc, #460]	; (8003988 <HAL_RCC_OscConfig+0x474>)
 80037bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037c2:	f7fe faa7 	bl	8001d14 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ca:	f7fe faa3 	bl	8001d14 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e10c      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037dc:	4b6a      	ldr	r3, [pc, #424]	; (8003988 <HAL_RCC_OscConfig+0x474>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f0      	beq.n	80037ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d106      	bne.n	80037fe <HAL_RCC_OscConfig+0x2ea>
 80037f0:	4b64      	ldr	r3, [pc, #400]	; (8003984 <HAL_RCC_OscConfig+0x470>)
 80037f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f4:	4a63      	ldr	r2, [pc, #396]	; (8003984 <HAL_RCC_OscConfig+0x470>)
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	6713      	str	r3, [r2, #112]	; 0x70
 80037fc:	e01c      	b.n	8003838 <HAL_RCC_OscConfig+0x324>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	2b05      	cmp	r3, #5
 8003804:	d10c      	bne.n	8003820 <HAL_RCC_OscConfig+0x30c>
 8003806:	4b5f      	ldr	r3, [pc, #380]	; (8003984 <HAL_RCC_OscConfig+0x470>)
 8003808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380a:	4a5e      	ldr	r2, [pc, #376]	; (8003984 <HAL_RCC_OscConfig+0x470>)
 800380c:	f043 0304 	orr.w	r3, r3, #4
 8003810:	6713      	str	r3, [r2, #112]	; 0x70
 8003812:	4b5c      	ldr	r3, [pc, #368]	; (8003984 <HAL_RCC_OscConfig+0x470>)
 8003814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003816:	4a5b      	ldr	r2, [pc, #364]	; (8003984 <HAL_RCC_OscConfig+0x470>)
 8003818:	f043 0301 	orr.w	r3, r3, #1
 800381c:	6713      	str	r3, [r2, #112]	; 0x70
 800381e:	e00b      	b.n	8003838 <HAL_RCC_OscConfig+0x324>
 8003820:	4b58      	ldr	r3, [pc, #352]	; (8003984 <HAL_RCC_OscConfig+0x470>)
 8003822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003824:	4a57      	ldr	r2, [pc, #348]	; (8003984 <HAL_RCC_OscConfig+0x470>)
 8003826:	f023 0301 	bic.w	r3, r3, #1
 800382a:	6713      	str	r3, [r2, #112]	; 0x70
 800382c:	4b55      	ldr	r3, [pc, #340]	; (8003984 <HAL_RCC_OscConfig+0x470>)
 800382e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003830:	4a54      	ldr	r2, [pc, #336]	; (8003984 <HAL_RCC_OscConfig+0x470>)
 8003832:	f023 0304 	bic.w	r3, r3, #4
 8003836:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d015      	beq.n	800386c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003840:	f7fe fa68 	bl	8001d14 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003846:	e00a      	b.n	800385e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003848:	f7fe fa64 	bl	8001d14 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	f241 3288 	movw	r2, #5000	; 0x1388
 8003856:	4293      	cmp	r3, r2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e0cb      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385e:	4b49      	ldr	r3, [pc, #292]	; (8003984 <HAL_RCC_OscConfig+0x470>)
 8003860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0ee      	beq.n	8003848 <HAL_RCC_OscConfig+0x334>
 800386a:	e014      	b.n	8003896 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800386c:	f7fe fa52 	bl	8001d14 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003872:	e00a      	b.n	800388a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003874:	f7fe fa4e 	bl	8001d14 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e0b5      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388a:	4b3e      	ldr	r3, [pc, #248]	; (8003984 <HAL_RCC_OscConfig+0x470>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1ee      	bne.n	8003874 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003896:	7dfb      	ldrb	r3, [r7, #23]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d105      	bne.n	80038a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800389c:	4b39      	ldr	r3, [pc, #228]	; (8003984 <HAL_RCC_OscConfig+0x470>)
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	4a38      	ldr	r2, [pc, #224]	; (8003984 <HAL_RCC_OscConfig+0x470>)
 80038a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 80a1 	beq.w	80039f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038b2:	4b34      	ldr	r3, [pc, #208]	; (8003984 <HAL_RCC_OscConfig+0x470>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d05c      	beq.n	8003978 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d141      	bne.n	800394a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c6:	4b31      	ldr	r3, [pc, #196]	; (800398c <HAL_RCC_OscConfig+0x478>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038cc:	f7fe fa22 	bl	8001d14 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d4:	f7fe fa1e 	bl	8001d14 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e087      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e6:	4b27      	ldr	r3, [pc, #156]	; (8003984 <HAL_RCC_OscConfig+0x470>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69da      	ldr	r2, [r3, #28]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	019b      	lsls	r3, r3, #6
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003908:	085b      	lsrs	r3, r3, #1
 800390a:	3b01      	subs	r3, #1
 800390c:	041b      	lsls	r3, r3, #16
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	061b      	lsls	r3, r3, #24
 8003916:	491b      	ldr	r1, [pc, #108]	; (8003984 <HAL_RCC_OscConfig+0x470>)
 8003918:	4313      	orrs	r3, r2
 800391a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800391c:	4b1b      	ldr	r3, [pc, #108]	; (800398c <HAL_RCC_OscConfig+0x478>)
 800391e:	2201      	movs	r2, #1
 8003920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003922:	f7fe f9f7 	bl	8001d14 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800392a:	f7fe f9f3 	bl	8001d14 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e05c      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393c:	4b11      	ldr	r3, [pc, #68]	; (8003984 <HAL_RCC_OscConfig+0x470>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0f0      	beq.n	800392a <HAL_RCC_OscConfig+0x416>
 8003948:	e054      	b.n	80039f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394a:	4b10      	ldr	r3, [pc, #64]	; (800398c <HAL_RCC_OscConfig+0x478>)
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003950:	f7fe f9e0 	bl	8001d14 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003958:	f7fe f9dc 	bl	8001d14 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e045      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396a:	4b06      	ldr	r3, [pc, #24]	; (8003984 <HAL_RCC_OscConfig+0x470>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f0      	bne.n	8003958 <HAL_RCC_OscConfig+0x444>
 8003976:	e03d      	b.n	80039f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d107      	bne.n	8003990 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e038      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
 8003984:	40023800 	.word	0x40023800
 8003988:	40007000 	.word	0x40007000
 800398c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003990:	4b1b      	ldr	r3, [pc, #108]	; (8003a00 <HAL_RCC_OscConfig+0x4ec>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d028      	beq.n	80039f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d121      	bne.n	80039f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d11a      	bne.n	80039f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039c0:	4013      	ands	r3, r2
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d111      	bne.n	80039f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d6:	085b      	lsrs	r3, r3, #1
 80039d8:	3b01      	subs	r3, #1
 80039da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039dc:	429a      	cmp	r2, r3
 80039de:	d107      	bne.n	80039f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d001      	beq.n	80039f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e000      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40023800 	.word	0x40023800

08003a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e0cc      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a18:	4b68      	ldr	r3, [pc, #416]	; (8003bbc <HAL_RCC_ClockConfig+0x1b8>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d90c      	bls.n	8003a40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a26:	4b65      	ldr	r3, [pc, #404]	; (8003bbc <HAL_RCC_ClockConfig+0x1b8>)
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2e:	4b63      	ldr	r3, [pc, #396]	; (8003bbc <HAL_RCC_ClockConfig+0x1b8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d001      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e0b8      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d020      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a58:	4b59      	ldr	r3, [pc, #356]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	4a58      	ldr	r2, [pc, #352]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0308 	and.w	r3, r3, #8
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a70:	4b53      	ldr	r3, [pc, #332]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	4a52      	ldr	r2, [pc, #328]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a7c:	4b50      	ldr	r3, [pc, #320]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	494d      	ldr	r1, [pc, #308]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d044      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d107      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa2:	4b47      	ldr	r3, [pc, #284]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d119      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e07f      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d003      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	d107      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac2:	4b3f      	ldr	r3, [pc, #252]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d109      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e06f      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad2:	4b3b      	ldr	r3, [pc, #236]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e067      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ae2:	4b37      	ldr	r3, [pc, #220]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f023 0203 	bic.w	r2, r3, #3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	4934      	ldr	r1, [pc, #208]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003af4:	f7fe f90e 	bl	8001d14 <HAL_GetTick>
 8003af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afa:	e00a      	b.n	8003b12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003afc:	f7fe f90a 	bl	8001d14 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e04f      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b12:	4b2b      	ldr	r3, [pc, #172]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 020c 	and.w	r2, r3, #12
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d1eb      	bne.n	8003afc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b24:	4b25      	ldr	r3, [pc, #148]	; (8003bbc <HAL_RCC_ClockConfig+0x1b8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d20c      	bcs.n	8003b4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b32:	4b22      	ldr	r3, [pc, #136]	; (8003bbc <HAL_RCC_ClockConfig+0x1b8>)
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3a:	4b20      	ldr	r3, [pc, #128]	; (8003bbc <HAL_RCC_ClockConfig+0x1b8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d001      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e032      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b58:	4b19      	ldr	r3, [pc, #100]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	4916      	ldr	r1, [pc, #88]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d009      	beq.n	8003b8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b76:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	490e      	ldr	r1, [pc, #56]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b8a:	f000 f821 	bl	8003bd0 <HAL_RCC_GetSysClockFreq>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	091b      	lsrs	r3, r3, #4
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	490a      	ldr	r1, [pc, #40]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b9c:	5ccb      	ldrb	r3, [r1, r3]
 8003b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba2:	4a09      	ldr	r2, [pc, #36]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ba6:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fe f86e 	bl	8001c8c <HAL_InitTick>

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40023c00 	.word	0x40023c00
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	08008210 	.word	0x08008210
 8003bc8:	20000004 	.word	0x20000004
 8003bcc:	20000008 	.word	0x20000008

08003bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd4:	b094      	sub	sp, #80	; 0x50
 8003bd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	647b      	str	r3, [r7, #68]	; 0x44
 8003bdc:	2300      	movs	r3, #0
 8003bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003be0:	2300      	movs	r3, #0
 8003be2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003be8:	4b79      	ldr	r3, [pc, #484]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 030c 	and.w	r3, r3, #12
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d00d      	beq.n	8003c10 <HAL_RCC_GetSysClockFreq+0x40>
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	f200 80e1 	bhi.w	8003dbc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <HAL_RCC_GetSysClockFreq+0x34>
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d003      	beq.n	8003c0a <HAL_RCC_GetSysClockFreq+0x3a>
 8003c02:	e0db      	b.n	8003dbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c04:	4b73      	ldr	r3, [pc, #460]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c06:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c08:	e0db      	b.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c0a:	4b73      	ldr	r3, [pc, #460]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c0e:	e0d8      	b.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c10:	4b6f      	ldr	r3, [pc, #444]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c18:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c1a:	4b6d      	ldr	r3, [pc, #436]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d063      	beq.n	8003cee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c26:	4b6a      	ldr	r3, [pc, #424]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	099b      	lsrs	r3, r3, #6
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c38:	633b      	str	r3, [r7, #48]	; 0x30
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c42:	4622      	mov	r2, r4
 8003c44:	462b      	mov	r3, r5
 8003c46:	f04f 0000 	mov.w	r0, #0
 8003c4a:	f04f 0100 	mov.w	r1, #0
 8003c4e:	0159      	lsls	r1, r3, #5
 8003c50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c54:	0150      	lsls	r0, r2, #5
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	1a51      	subs	r1, r2, r1
 8003c5e:	6139      	str	r1, [r7, #16]
 8003c60:	4629      	mov	r1, r5
 8003c62:	eb63 0301 	sbc.w	r3, r3, r1
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	f04f 0200 	mov.w	r2, #0
 8003c6c:	f04f 0300 	mov.w	r3, #0
 8003c70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c74:	4659      	mov	r1, fp
 8003c76:	018b      	lsls	r3, r1, #6
 8003c78:	4651      	mov	r1, sl
 8003c7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c7e:	4651      	mov	r1, sl
 8003c80:	018a      	lsls	r2, r1, #6
 8003c82:	4651      	mov	r1, sl
 8003c84:	ebb2 0801 	subs.w	r8, r2, r1
 8003c88:	4659      	mov	r1, fp
 8003c8a:	eb63 0901 	sbc.w	r9, r3, r1
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ca2:	4690      	mov	r8, r2
 8003ca4:	4699      	mov	r9, r3
 8003ca6:	4623      	mov	r3, r4
 8003ca8:	eb18 0303 	adds.w	r3, r8, r3
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	462b      	mov	r3, r5
 8003cb0:	eb49 0303 	adc.w	r3, r9, r3
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	024b      	lsls	r3, r1, #9
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ccc:	4621      	mov	r1, r4
 8003cce:	024a      	lsls	r2, r1, #9
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ce0:	f7fc fa72 	bl	80001c8 <__aeabi_uldivmod>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4613      	mov	r3, r2
 8003cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cec:	e058      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cee:	4b38      	ldr	r3, [pc, #224]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	099b      	lsrs	r3, r3, #6
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	4611      	mov	r1, r2
 8003cfa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cfe:	623b      	str	r3, [r7, #32]
 8003d00:	2300      	movs	r3, #0
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
 8003d04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d08:	4642      	mov	r2, r8
 8003d0a:	464b      	mov	r3, r9
 8003d0c:	f04f 0000 	mov.w	r0, #0
 8003d10:	f04f 0100 	mov.w	r1, #0
 8003d14:	0159      	lsls	r1, r3, #5
 8003d16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d1a:	0150      	lsls	r0, r2, #5
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4641      	mov	r1, r8
 8003d22:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d26:	4649      	mov	r1, r9
 8003d28:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d40:	ebb2 040a 	subs.w	r4, r2, sl
 8003d44:	eb63 050b 	sbc.w	r5, r3, fp
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	00eb      	lsls	r3, r5, #3
 8003d52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d56:	00e2      	lsls	r2, r4, #3
 8003d58:	4614      	mov	r4, r2
 8003d5a:	461d      	mov	r5, r3
 8003d5c:	4643      	mov	r3, r8
 8003d5e:	18e3      	adds	r3, r4, r3
 8003d60:	603b      	str	r3, [r7, #0]
 8003d62:	464b      	mov	r3, r9
 8003d64:	eb45 0303 	adc.w	r3, r5, r3
 8003d68:	607b      	str	r3, [r7, #4]
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	f04f 0300 	mov.w	r3, #0
 8003d72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d76:	4629      	mov	r1, r5
 8003d78:	028b      	lsls	r3, r1, #10
 8003d7a:	4621      	mov	r1, r4
 8003d7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d80:	4621      	mov	r1, r4
 8003d82:	028a      	lsls	r2, r1, #10
 8003d84:	4610      	mov	r0, r2
 8003d86:	4619      	mov	r1, r3
 8003d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	61bb      	str	r3, [r7, #24]
 8003d8e:	61fa      	str	r2, [r7, #28]
 8003d90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d94:	f7fc fa18 	bl	80001c8 <__aeabi_uldivmod>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	0c1b      	lsrs	r3, r3, #16
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	3301      	adds	r3, #1
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003db0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dba:	e002      	b.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dbe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3750      	adds	r7, #80	; 0x50
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dce:	bf00      	nop
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	00f42400 	.word	0x00f42400
 8003dd8:	007a1200 	.word	0x007a1200

08003ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003de0:	4b03      	ldr	r3, [pc, #12]	; (8003df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003de2:	681b      	ldr	r3, [r3, #0]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	20000004 	.word	0x20000004

08003df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003df8:	f7ff fff0 	bl	8003ddc <HAL_RCC_GetHCLKFreq>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	0a9b      	lsrs	r3, r3, #10
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	4903      	ldr	r1, [pc, #12]	; (8003e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e0a:	5ccb      	ldrb	r3, [r1, r3]
 8003e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40023800 	.word	0x40023800
 8003e18:	08008220 	.word	0x08008220

08003e1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e07b      	b.n	8003f26 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d108      	bne.n	8003e48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e3e:	d009      	beq.n	8003e54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	61da      	str	r2, [r3, #28]
 8003e46:	e005      	b.n	8003e54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7fd fd4a 	bl	8001908 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed8:	ea42 0103 	orr.w	r1, r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	0c1b      	lsrs	r3, r3, #16
 8003ef2:	f003 0104 	and.w	r1, r3, #4
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	f003 0210 	and.w	r2, r3, #16
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	69da      	ldr	r2, [r3, #28]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b088      	sub	sp, #32
 8003f32:	af02      	add	r7, sp, #8
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	603b      	str	r3, [r7, #0]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f4a:	d112      	bne.n	8003f72 <HAL_SPI_Receive+0x44>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10e      	bne.n	8003f72 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2204      	movs	r2, #4
 8003f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f5c:	88fa      	ldrh	r2, [r7, #6]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	4613      	mov	r3, r2
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	68b9      	ldr	r1, [r7, #8]
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f8f1 	bl	8004150 <HAL_SPI_TransmitReceive>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	e0ea      	b.n	8004148 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_SPI_Receive+0x52>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e0e3      	b.n	8004148 <HAL_SPI_Receive+0x21a>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f88:	f7fd fec4 	bl	8001d14 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d002      	beq.n	8003fa0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f9e:	e0ca      	b.n	8004136 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_SPI_Receive+0x7e>
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d102      	bne.n	8003fb2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fb0:	e0c1      	b.n	8004136 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2204      	movs	r2, #4
 8003fb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	88fa      	ldrh	r2, [r7, #6]
 8003fca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	88fa      	ldrh	r2, [r7, #6]
 8003fd0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ff8:	d10f      	bne.n	800401a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004008:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004018:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004024:	2b40      	cmp	r3, #64	; 0x40
 8004026:	d007      	beq.n	8004038 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004036:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d162      	bne.n	8004106 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004040:	e02e      	b.n	80040a0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b01      	cmp	r3, #1
 800404e:	d115      	bne.n	800407c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f103 020c 	add.w	r2, r3, #12
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405c:	7812      	ldrb	r2, [r2, #0]
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004070:	b29b      	uxth	r3, r3
 8004072:	3b01      	subs	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	87da      	strh	r2, [r3, #62]	; 0x3e
 800407a:	e011      	b.n	80040a0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800407c:	f7fd fe4a 	bl	8001d14 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d803      	bhi.n	8004094 <HAL_SPI_Receive+0x166>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004092:	d102      	bne.n	800409a <HAL_SPI_Receive+0x16c>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d102      	bne.n	80040a0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800409e:	e04a      	b.n	8004136 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1cb      	bne.n	8004042 <HAL_SPI_Receive+0x114>
 80040aa:	e031      	b.n	8004110 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d113      	bne.n	80040e2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c4:	b292      	uxth	r2, r2
 80040c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	1c9a      	adds	r2, r3, #2
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040e0:	e011      	b.n	8004106 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040e2:	f7fd fe17 	bl	8001d14 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d803      	bhi.n	80040fa <HAL_SPI_Receive+0x1cc>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f8:	d102      	bne.n	8004100 <HAL_SPI_Receive+0x1d2>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d102      	bne.n	8004106 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004104:	e017      	b.n	8004136 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1cd      	bne.n	80040ac <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	6839      	ldr	r1, [r7, #0]
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 fa45 	bl	80045a4 <SPI_EndRxTransaction>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2220      	movs	r2, #32
 8004124:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	75fb      	strb	r3, [r7, #23]
 8004132:	e000      	b.n	8004136 <HAL_SPI_Receive+0x208>
  }

error :
 8004134:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004146:	7dfb      	ldrb	r3, [r7, #23]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b08c      	sub	sp, #48	; 0x30
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
 800415c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800415e:	2301      	movs	r3, #1
 8004160:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800416e:	2b01      	cmp	r3, #1
 8004170:	d101      	bne.n	8004176 <HAL_SPI_TransmitReceive+0x26>
 8004172:	2302      	movs	r3, #2
 8004174:	e18a      	b.n	800448c <HAL_SPI_TransmitReceive+0x33c>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800417e:	f7fd fdc9 	bl	8001d14 <HAL_GetTick>
 8004182:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800418a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004194:	887b      	ldrh	r3, [r7, #2]
 8004196:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004198:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800419c:	2b01      	cmp	r3, #1
 800419e:	d00f      	beq.n	80041c0 <HAL_SPI_TransmitReceive+0x70>
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041a6:	d107      	bne.n	80041b8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d103      	bne.n	80041b8 <HAL_SPI_TransmitReceive+0x68>
 80041b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d003      	beq.n	80041c0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
 80041ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041be:	e15b      	b.n	8004478 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d005      	beq.n	80041d2 <HAL_SPI_TransmitReceive+0x82>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <HAL_SPI_TransmitReceive+0x82>
 80041cc:	887b      	ldrh	r3, [r7, #2]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d103      	bne.n	80041da <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041d8:	e14e      	b.n	8004478 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d003      	beq.n	80041ee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2205      	movs	r2, #5
 80041ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	887a      	ldrh	r2, [r7, #2]
 80041fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	887a      	ldrh	r2, [r7, #2]
 8004204:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	887a      	ldrh	r2, [r7, #2]
 8004210:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	887a      	ldrh	r2, [r7, #2]
 8004216:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422e:	2b40      	cmp	r3, #64	; 0x40
 8004230:	d007      	beq.n	8004242 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004240:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800424a:	d178      	bne.n	800433e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <HAL_SPI_TransmitReceive+0x10a>
 8004254:	8b7b      	ldrh	r3, [r7, #26]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d166      	bne.n	8004328 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	881a      	ldrh	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	1c9a      	adds	r2, r3, #2
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800427e:	e053      	b.n	8004328 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b02      	cmp	r3, #2
 800428c:	d11b      	bne.n	80042c6 <HAL_SPI_TransmitReceive+0x176>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004292:	b29b      	uxth	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d016      	beq.n	80042c6 <HAL_SPI_TransmitReceive+0x176>
 8004298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429a:	2b01      	cmp	r3, #1
 800429c:	d113      	bne.n	80042c6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	881a      	ldrh	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	1c9a      	adds	r2, r3, #2
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d119      	bne.n	8004308 <HAL_SPI_TransmitReceive+0x1b8>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d014      	beq.n	8004308 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e8:	b292      	uxth	r2, r2
 80042ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f0:	1c9a      	adds	r2, r3, #2
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004304:	2301      	movs	r3, #1
 8004306:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004308:	f7fd fd04 	bl	8001d14 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004314:	429a      	cmp	r2, r3
 8004316:	d807      	bhi.n	8004328 <HAL_SPI_TransmitReceive+0x1d8>
 8004318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431e:	d003      	beq.n	8004328 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004326:	e0a7      	b.n	8004478 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1a6      	bne.n	8004280 <HAL_SPI_TransmitReceive+0x130>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1a1      	bne.n	8004280 <HAL_SPI_TransmitReceive+0x130>
 800433c:	e07c      	b.n	8004438 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <HAL_SPI_TransmitReceive+0x1fc>
 8004346:	8b7b      	ldrh	r3, [r7, #26]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d16b      	bne.n	8004424 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	330c      	adds	r3, #12
 8004356:	7812      	ldrb	r2, [r2, #0]
 8004358:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004368:	b29b      	uxth	r3, r3
 800436a:	3b01      	subs	r3, #1
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004372:	e057      	b.n	8004424 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b02      	cmp	r3, #2
 8004380:	d11c      	bne.n	80043bc <HAL_SPI_TransmitReceive+0x26c>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d017      	beq.n	80043bc <HAL_SPI_TransmitReceive+0x26c>
 800438c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438e:	2b01      	cmp	r3, #1
 8004390:	d114      	bne.n	80043bc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	330c      	adds	r3, #12
 800439c:	7812      	ldrb	r2, [r2, #0]
 800439e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a4:	1c5a      	adds	r2, r3, #1
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d119      	bne.n	80043fe <HAL_SPI_TransmitReceive+0x2ae>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d014      	beq.n	80043fe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043fa:	2301      	movs	r3, #1
 80043fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043fe:	f7fd fc89 	bl	8001d14 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800440a:	429a      	cmp	r2, r3
 800440c:	d803      	bhi.n	8004416 <HAL_SPI_TransmitReceive+0x2c6>
 800440e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004414:	d102      	bne.n	800441c <HAL_SPI_TransmitReceive+0x2cc>
 8004416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004418:	2b00      	cmp	r3, #0
 800441a:	d103      	bne.n	8004424 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004422:	e029      	b.n	8004478 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1a2      	bne.n	8004374 <HAL_SPI_TransmitReceive+0x224>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004432:	b29b      	uxth	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d19d      	bne.n	8004374 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800443a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 f917 	bl	8004670 <SPI_EndRxTxTransaction>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d006      	beq.n	8004456 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2220      	movs	r2, #32
 8004452:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004454:	e010      	b.n	8004478 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10b      	bne.n	8004476 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800445e:	2300      	movs	r3, #0
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	617b      	str	r3, [r7, #20]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	e000      	b.n	8004478 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004476:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004488:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800448c:	4618      	mov	r0, r3
 800448e:	3730      	adds	r7, #48	; 0x30
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b088      	sub	sp, #32
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	603b      	str	r3, [r7, #0]
 80044a0:	4613      	mov	r3, r2
 80044a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044a4:	f7fd fc36 	bl	8001d14 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ac:	1a9b      	subs	r3, r3, r2
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	4413      	add	r3, r2
 80044b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044b4:	f7fd fc2e 	bl	8001d14 <HAL_GetTick>
 80044b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044ba:	4b39      	ldr	r3, [pc, #228]	; (80045a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	015b      	lsls	r3, r3, #5
 80044c0:	0d1b      	lsrs	r3, r3, #20
 80044c2:	69fa      	ldr	r2, [r7, #28]
 80044c4:	fb02 f303 	mul.w	r3, r2, r3
 80044c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044ca:	e054      	b.n	8004576 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d2:	d050      	beq.n	8004576 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044d4:	f7fd fc1e 	bl	8001d14 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	69fa      	ldr	r2, [r7, #28]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d902      	bls.n	80044ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d13d      	bne.n	8004566 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004502:	d111      	bne.n	8004528 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800450c:	d004      	beq.n	8004518 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004516:	d107      	bne.n	8004528 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004526:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004530:	d10f      	bne.n	8004552 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004550:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e017      	b.n	8004596 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	3b01      	subs	r3, #1
 8004574:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	4013      	ands	r3, r2
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	429a      	cmp	r2, r3
 8004584:	bf0c      	ite	eq
 8004586:	2301      	moveq	r3, #1
 8004588:	2300      	movne	r3, #0
 800458a:	b2db      	uxtb	r3, r3
 800458c:	461a      	mov	r2, r3
 800458e:	79fb      	ldrb	r3, [r7, #7]
 8004590:	429a      	cmp	r2, r3
 8004592:	d19b      	bne.n	80044cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3720      	adds	r7, #32
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	20000004 	.word	0x20000004

080045a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af02      	add	r7, sp, #8
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045b8:	d111      	bne.n	80045de <SPI_EndRxTransaction+0x3a>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045c2:	d004      	beq.n	80045ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045cc:	d107      	bne.n	80045de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045dc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045e6:	d12a      	bne.n	800463e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045f0:	d012      	beq.n	8004618 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2200      	movs	r2, #0
 80045fa:	2180      	movs	r1, #128	; 0x80
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f7ff ff49 	bl	8004494 <SPI_WaitFlagStateUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d02d      	beq.n	8004664 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460c:	f043 0220 	orr.w	r2, r3, #32
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e026      	b.n	8004666 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2200      	movs	r2, #0
 8004620:	2101      	movs	r1, #1
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f7ff ff36 	bl	8004494 <SPI_WaitFlagStateUntilTimeout>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d01a      	beq.n	8004664 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004632:	f043 0220 	orr.w	r2, r3, #32
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e013      	b.n	8004666 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2200      	movs	r2, #0
 8004646:	2101      	movs	r1, #1
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f7ff ff23 	bl	8004494 <SPI_WaitFlagStateUntilTimeout>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d007      	beq.n	8004664 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004658:	f043 0220 	orr.w	r2, r3, #32
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e000      	b.n	8004666 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b088      	sub	sp, #32
 8004674:	af02      	add	r7, sp, #8
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800467c:	4b1b      	ldr	r3, [pc, #108]	; (80046ec <SPI_EndRxTxTransaction+0x7c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a1b      	ldr	r2, [pc, #108]	; (80046f0 <SPI_EndRxTxTransaction+0x80>)
 8004682:	fba2 2303 	umull	r2, r3, r2, r3
 8004686:	0d5b      	lsrs	r3, r3, #21
 8004688:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800468c:	fb02 f303 	mul.w	r3, r2, r3
 8004690:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800469a:	d112      	bne.n	80046c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2200      	movs	r2, #0
 80046a4:	2180      	movs	r1, #128	; 0x80
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f7ff fef4 	bl	8004494 <SPI_WaitFlagStateUntilTimeout>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d016      	beq.n	80046e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b6:	f043 0220 	orr.w	r2, r3, #32
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e00f      	b.n	80046e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d8:	2b80      	cmp	r3, #128	; 0x80
 80046da:	d0f2      	beq.n	80046c2 <SPI_EndRxTxTransaction+0x52>
 80046dc:	e000      	b.n	80046e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80046de:	bf00      	nop
  }

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20000004 	.word	0x20000004
 80046f0:	165e9f81 	.word	0x165e9f81

080046f4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e034      	b.n	8004774 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f7fc f9ae 	bl	8000a80 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	3308      	adds	r3, #8
 800472c:	4619      	mov	r1, r3
 800472e:	4610      	mov	r0, r2
 8004730:	f000 fca6 	bl	8005080 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6818      	ldr	r0, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	461a      	mov	r2, r3
 800473e:	68b9      	ldr	r1, [r7, #8]
 8004740:	f000 fcf0 	bl	8005124 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6858      	ldr	r0, [r3, #4]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	f000 fd25 	bl	80051a0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	6892      	ldr	r2, [r2, #8]
 800475e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	6892      	ldr	r2, [r2, #8]
 800476a:	f041 0101 	orr.w	r1, r1, #1
 800476e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e041      	b.n	8004812 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7fd f9b2 	bl	8001b0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3304      	adds	r3, #4
 80047b8:	4619      	mov	r1, r3
 80047ba:	4610      	mov	r0, r2
 80047bc:	f000 fa96 	bl	8004cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b01      	cmp	r3, #1
 800482e:	d001      	beq.n	8004834 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e04e      	b.n	80048d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0201 	orr.w	r2, r2, #1
 800484a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a23      	ldr	r2, [pc, #140]	; (80048e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d022      	beq.n	800489c <HAL_TIM_Base_Start_IT+0x80>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800485e:	d01d      	beq.n	800489c <HAL_TIM_Base_Start_IT+0x80>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a1f      	ldr	r2, [pc, #124]	; (80048e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d018      	beq.n	800489c <HAL_TIM_Base_Start_IT+0x80>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a1e      	ldr	r2, [pc, #120]	; (80048e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d013      	beq.n	800489c <HAL_TIM_Base_Start_IT+0x80>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a1c      	ldr	r2, [pc, #112]	; (80048ec <HAL_TIM_Base_Start_IT+0xd0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d00e      	beq.n	800489c <HAL_TIM_Base_Start_IT+0x80>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a1b      	ldr	r2, [pc, #108]	; (80048f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d009      	beq.n	800489c <HAL_TIM_Base_Start_IT+0x80>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a19      	ldr	r2, [pc, #100]	; (80048f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d004      	beq.n	800489c <HAL_TIM_Base_Start_IT+0x80>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a18      	ldr	r2, [pc, #96]	; (80048f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d111      	bne.n	80048c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b06      	cmp	r3, #6
 80048ac:	d010      	beq.n	80048d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f042 0201 	orr.w	r2, r2, #1
 80048bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048be:	e007      	b.n	80048d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40010000 	.word	0x40010000
 80048e4:	40000400 	.word	0x40000400
 80048e8:	40000800 	.word	0x40000800
 80048ec:	40000c00 	.word	0x40000c00
 80048f0:	40010400 	.word	0x40010400
 80048f4:	40014000 	.word	0x40014000
 80048f8:	40001800 	.word	0x40001800

080048fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b02      	cmp	r3, #2
 8004910:	d122      	bne.n	8004958 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b02      	cmp	r3, #2
 800491e:	d11b      	bne.n	8004958 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0202 	mvn.w	r2, #2
 8004928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f9b5 	bl	8004cae <HAL_TIM_IC_CaptureCallback>
 8004944:	e005      	b.n	8004952 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f9a7 	bl	8004c9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f9b8 	bl	8004cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f003 0304 	and.w	r3, r3, #4
 8004962:	2b04      	cmp	r3, #4
 8004964:	d122      	bne.n	80049ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b04      	cmp	r3, #4
 8004972:	d11b      	bne.n	80049ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f06f 0204 	mvn.w	r2, #4
 800497c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2202      	movs	r2, #2
 8004982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f98b 	bl	8004cae <HAL_TIM_IC_CaptureCallback>
 8004998:	e005      	b.n	80049a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f97d 	bl	8004c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f98e 	bl	8004cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d122      	bne.n	8004a00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d11b      	bne.n	8004a00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f06f 0208 	mvn.w	r2, #8
 80049d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2204      	movs	r2, #4
 80049d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f961 	bl	8004cae <HAL_TIM_IC_CaptureCallback>
 80049ec:	e005      	b.n	80049fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f953 	bl	8004c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f964 	bl	8004cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	f003 0310 	and.w	r3, r3, #16
 8004a0a:	2b10      	cmp	r3, #16
 8004a0c:	d122      	bne.n	8004a54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f003 0310 	and.w	r3, r3, #16
 8004a18:	2b10      	cmp	r3, #16
 8004a1a:	d11b      	bne.n	8004a54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f06f 0210 	mvn.w	r2, #16
 8004a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2208      	movs	r2, #8
 8004a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f937 	bl	8004cae <HAL_TIM_IC_CaptureCallback>
 8004a40:	e005      	b.n	8004a4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f929 	bl	8004c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f93a 	bl	8004cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d10e      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d107      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f06f 0201 	mvn.w	r2, #1
 8004a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7fd f86c 	bl	8001b58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8a:	2b80      	cmp	r3, #128	; 0x80
 8004a8c:	d10e      	bne.n	8004aac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a98:	2b80      	cmp	r3, #128	; 0x80
 8004a9a:	d107      	bne.n	8004aac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fae0 	bl	800506c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab6:	2b40      	cmp	r3, #64	; 0x40
 8004ab8:	d10e      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac4:	2b40      	cmp	r3, #64	; 0x40
 8004ac6:	d107      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f8ff 	bl	8004cd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b20      	cmp	r3, #32
 8004ae4:	d10e      	bne.n	8004b04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f003 0320 	and.w	r3, r3, #32
 8004af0:	2b20      	cmp	r3, #32
 8004af2:	d107      	bne.n	8004b04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f06f 0220 	mvn.w	r2, #32
 8004afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 faaa 	bl	8005058 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b04:	bf00      	nop
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_TIM_ConfigClockSource+0x1c>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e0b4      	b.n	8004c92 <HAL_TIM_ConfigClockSource+0x186>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b60:	d03e      	beq.n	8004be0 <HAL_TIM_ConfigClockSource+0xd4>
 8004b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b66:	f200 8087 	bhi.w	8004c78 <HAL_TIM_ConfigClockSource+0x16c>
 8004b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b6e:	f000 8086 	beq.w	8004c7e <HAL_TIM_ConfigClockSource+0x172>
 8004b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b76:	d87f      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x16c>
 8004b78:	2b70      	cmp	r3, #112	; 0x70
 8004b7a:	d01a      	beq.n	8004bb2 <HAL_TIM_ConfigClockSource+0xa6>
 8004b7c:	2b70      	cmp	r3, #112	; 0x70
 8004b7e:	d87b      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x16c>
 8004b80:	2b60      	cmp	r3, #96	; 0x60
 8004b82:	d050      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x11a>
 8004b84:	2b60      	cmp	r3, #96	; 0x60
 8004b86:	d877      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x16c>
 8004b88:	2b50      	cmp	r3, #80	; 0x50
 8004b8a:	d03c      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0xfa>
 8004b8c:	2b50      	cmp	r3, #80	; 0x50
 8004b8e:	d873      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x16c>
 8004b90:	2b40      	cmp	r3, #64	; 0x40
 8004b92:	d058      	beq.n	8004c46 <HAL_TIM_ConfigClockSource+0x13a>
 8004b94:	2b40      	cmp	r3, #64	; 0x40
 8004b96:	d86f      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x16c>
 8004b98:	2b30      	cmp	r3, #48	; 0x30
 8004b9a:	d064      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0x15a>
 8004b9c:	2b30      	cmp	r3, #48	; 0x30
 8004b9e:	d86b      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	d060      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0x15a>
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d867      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d05c      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0x15a>
 8004bac:	2b10      	cmp	r3, #16
 8004bae:	d05a      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0x15a>
 8004bb0:	e062      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6818      	ldr	r0, [r3, #0]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	6899      	ldr	r1, [r3, #8]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f000 f9ad 	bl	8004f20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	609a      	str	r2, [r3, #8]
      break;
 8004bde:	e04f      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6818      	ldr	r0, [r3, #0]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	6899      	ldr	r1, [r3, #8]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f000 f996 	bl	8004f20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c02:	609a      	str	r2, [r3, #8]
      break;
 8004c04:	e03c      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6818      	ldr	r0, [r3, #0]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	6859      	ldr	r1, [r3, #4]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	461a      	mov	r2, r3
 8004c14:	f000 f90a 	bl	8004e2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2150      	movs	r1, #80	; 0x50
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 f963 	bl	8004eea <TIM_ITRx_SetConfig>
      break;
 8004c24:	e02c      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6818      	ldr	r0, [r3, #0]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	6859      	ldr	r1, [r3, #4]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	461a      	mov	r2, r3
 8004c34:	f000 f929 	bl	8004e8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2160      	movs	r1, #96	; 0x60
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 f953 	bl	8004eea <TIM_ITRx_SetConfig>
      break;
 8004c44:	e01c      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6818      	ldr	r0, [r3, #0]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	6859      	ldr	r1, [r3, #4]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	461a      	mov	r2, r3
 8004c54:	f000 f8ea 	bl	8004e2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2140      	movs	r1, #64	; 0x40
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 f943 	bl	8004eea <TIM_ITRx_SetConfig>
      break;
 8004c64:	e00c      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4619      	mov	r1, r3
 8004c70:	4610      	mov	r0, r2
 8004c72:	f000 f93a 	bl	8004eea <TIM_ITRx_SetConfig>
      break;
 8004c76:	e003      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c7c:	e000      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b083      	sub	sp, #12
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
	...

08004cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a40      	ldr	r2, [pc, #256]	; (8004e00 <TIM_Base_SetConfig+0x114>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d013      	beq.n	8004d2c <TIM_Base_SetConfig+0x40>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d0a:	d00f      	beq.n	8004d2c <TIM_Base_SetConfig+0x40>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a3d      	ldr	r2, [pc, #244]	; (8004e04 <TIM_Base_SetConfig+0x118>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00b      	beq.n	8004d2c <TIM_Base_SetConfig+0x40>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a3c      	ldr	r2, [pc, #240]	; (8004e08 <TIM_Base_SetConfig+0x11c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d007      	beq.n	8004d2c <TIM_Base_SetConfig+0x40>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a3b      	ldr	r2, [pc, #236]	; (8004e0c <TIM_Base_SetConfig+0x120>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d003      	beq.n	8004d2c <TIM_Base_SetConfig+0x40>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a3a      	ldr	r2, [pc, #232]	; (8004e10 <TIM_Base_SetConfig+0x124>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d108      	bne.n	8004d3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a2f      	ldr	r2, [pc, #188]	; (8004e00 <TIM_Base_SetConfig+0x114>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d02b      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4c:	d027      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a2c      	ldr	r2, [pc, #176]	; (8004e04 <TIM_Base_SetConfig+0x118>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d023      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a2b      	ldr	r2, [pc, #172]	; (8004e08 <TIM_Base_SetConfig+0x11c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d01f      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a2a      	ldr	r2, [pc, #168]	; (8004e0c <TIM_Base_SetConfig+0x120>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d01b      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a29      	ldr	r2, [pc, #164]	; (8004e10 <TIM_Base_SetConfig+0x124>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d017      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a28      	ldr	r2, [pc, #160]	; (8004e14 <TIM_Base_SetConfig+0x128>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d013      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a27      	ldr	r2, [pc, #156]	; (8004e18 <TIM_Base_SetConfig+0x12c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d00f      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a26      	ldr	r2, [pc, #152]	; (8004e1c <TIM_Base_SetConfig+0x130>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00b      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a25      	ldr	r2, [pc, #148]	; (8004e20 <TIM_Base_SetConfig+0x134>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d007      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a24      	ldr	r2, [pc, #144]	; (8004e24 <TIM_Base_SetConfig+0x138>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d003      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a23      	ldr	r2, [pc, #140]	; (8004e28 <TIM_Base_SetConfig+0x13c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d108      	bne.n	8004db0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a0a      	ldr	r2, [pc, #40]	; (8004e00 <TIM_Base_SetConfig+0x114>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d003      	beq.n	8004de4 <TIM_Base_SetConfig+0xf8>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a0c      	ldr	r2, [pc, #48]	; (8004e10 <TIM_Base_SetConfig+0x124>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d103      	bne.n	8004dec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	615a      	str	r2, [r3, #20]
}
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40010000 	.word	0x40010000
 8004e04:	40000400 	.word	0x40000400
 8004e08:	40000800 	.word	0x40000800
 8004e0c:	40000c00 	.word	0x40000c00
 8004e10:	40010400 	.word	0x40010400
 8004e14:	40014000 	.word	0x40014000
 8004e18:	40014400 	.word	0x40014400
 8004e1c:	40014800 	.word	0x40014800
 8004e20:	40001800 	.word	0x40001800
 8004e24:	40001c00 	.word	0x40001c00
 8004e28:	40002000 	.word	0x40002000

08004e2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	f023 0201 	bic.w	r2, r3, #1
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f023 030a 	bic.w	r3, r3, #10
 8004e68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	621a      	str	r2, [r3, #32]
}
 8004e7e:	bf00      	nop
 8004e80:	371c      	adds	r7, #28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b087      	sub	sp, #28
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	60f8      	str	r0, [r7, #12]
 8004e92:	60b9      	str	r1, [r7, #8]
 8004e94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	f023 0210 	bic.w	r2, r3, #16
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004eb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	031b      	lsls	r3, r3, #12
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ec6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	011b      	lsls	r3, r3, #4
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	621a      	str	r2, [r3, #32]
}
 8004ede:	bf00      	nop
 8004ee0:	371c      	adds	r7, #28
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b085      	sub	sp, #20
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	f043 0307 	orr.w	r3, r3, #7
 8004f0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	609a      	str	r2, [r3, #8]
}
 8004f14:	bf00      	nop
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	021a      	lsls	r2, r3, #8
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	431a      	orrs	r2, r3
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	609a      	str	r2, [r3, #8]
}
 8004f54:	bf00      	nop
 8004f56:	371c      	adds	r7, #28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d101      	bne.n	8004f78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f74:	2302      	movs	r3, #2
 8004f76:	e05a      	b.n	800502e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a21      	ldr	r2, [pc, #132]	; (800503c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d022      	beq.n	8005002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc4:	d01d      	beq.n	8005002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a1d      	ldr	r2, [pc, #116]	; (8005040 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d018      	beq.n	8005002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a1b      	ldr	r2, [pc, #108]	; (8005044 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d013      	beq.n	8005002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a1a      	ldr	r2, [pc, #104]	; (8005048 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00e      	beq.n	8005002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a18      	ldr	r2, [pc, #96]	; (800504c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d009      	beq.n	8005002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a17      	ldr	r2, [pc, #92]	; (8005050 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d004      	beq.n	8005002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a15      	ldr	r2, [pc, #84]	; (8005054 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d10c      	bne.n	800501c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005008:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	4313      	orrs	r3, r2
 8005012:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	40010000 	.word	0x40010000
 8005040:	40000400 	.word	0x40000400
 8005044:	40000800 	.word	0x40000800
 8005048:	40000c00 	.word	0x40000c00
 800504c:	40010400 	.word	0x40010400
 8005050:	40014000 	.word	0x40014000
 8005054:	40001800 	.word	0x40001800

08005058 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005098:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	4b20      	ldr	r3, [pc, #128]	; (8005120 <FSMC_NORSRAM_Init+0xa0>)
 800509e:	4013      	ands	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80050aa:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80050b0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80050b6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80050bc:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80050c2:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80050c8:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80050ce:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80050d4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80050da:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80050e0:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80050e6:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80050ec:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d103      	bne.n	8005104 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005102:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68f9      	ldr	r1, [r7, #12]
 800510c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	fff00080 	.word	0xfff00080

08005124 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800513e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005146:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005152:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800515a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8005162:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	3b01      	subs	r3, #1
 800516a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800516c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	3b02      	subs	r3, #2
 8005174:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005176:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800517c:	4313      	orrs	r3, r2
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	4313      	orrs	r3, r2
 8005182:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6979      	ldr	r1, [r7, #20]
 800518c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	371c      	adds	r7, #28
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
	...

080051a0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80051ae:	2300      	movs	r3, #0
 80051b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051b8:	d122      	bne.n	8005200 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051c2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	4b15      	ldr	r3, [pc, #84]	; (800521c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80051c8:	4013      	ands	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80051d6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80051de:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80051e6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80051ec:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6979      	ldr	r1, [r7, #20]
 80051fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80051fe:	e005      	b.n	800520c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	cff00000 	.word	0xcff00000

08005220 <__libc_init_array>:
 8005220:	b570      	push	{r4, r5, r6, lr}
 8005222:	4d0d      	ldr	r5, [pc, #52]	; (8005258 <__libc_init_array+0x38>)
 8005224:	4c0d      	ldr	r4, [pc, #52]	; (800525c <__libc_init_array+0x3c>)
 8005226:	1b64      	subs	r4, r4, r5
 8005228:	10a4      	asrs	r4, r4, #2
 800522a:	2600      	movs	r6, #0
 800522c:	42a6      	cmp	r6, r4
 800522e:	d109      	bne.n	8005244 <__libc_init_array+0x24>
 8005230:	4d0b      	ldr	r5, [pc, #44]	; (8005260 <__libc_init_array+0x40>)
 8005232:	4c0c      	ldr	r4, [pc, #48]	; (8005264 <__libc_init_array+0x44>)
 8005234:	f000 f820 	bl	8005278 <_init>
 8005238:	1b64      	subs	r4, r4, r5
 800523a:	10a4      	asrs	r4, r4, #2
 800523c:	2600      	movs	r6, #0
 800523e:	42a6      	cmp	r6, r4
 8005240:	d105      	bne.n	800524e <__libc_init_array+0x2e>
 8005242:	bd70      	pop	{r4, r5, r6, pc}
 8005244:	f855 3b04 	ldr.w	r3, [r5], #4
 8005248:	4798      	blx	r3
 800524a:	3601      	adds	r6, #1
 800524c:	e7ee      	b.n	800522c <__libc_init_array+0xc>
 800524e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005252:	4798      	blx	r3
 8005254:	3601      	adds	r6, #1
 8005256:	e7f2      	b.n	800523e <__libc_init_array+0x1e>
 8005258:	08008230 	.word	0x08008230
 800525c:	08008230 	.word	0x08008230
 8005260:	08008230 	.word	0x08008230
 8005264:	08008234 	.word	0x08008234

08005268 <memset>:
 8005268:	4402      	add	r2, r0
 800526a:	4603      	mov	r3, r0
 800526c:	4293      	cmp	r3, r2
 800526e:	d100      	bne.n	8005272 <memset+0xa>
 8005270:	4770      	bx	lr
 8005272:	f803 1b01 	strb.w	r1, [r3], #1
 8005276:	e7f9      	b.n	800526c <memset+0x4>

08005278 <_init>:
 8005278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527a:	bf00      	nop
 800527c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527e:	bc08      	pop	{r3}
 8005280:	469e      	mov	lr, r3
 8005282:	4770      	bx	lr

08005284 <_fini>:
 8005284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005286:	bf00      	nop
 8005288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800528a:	bc08      	pop	{r3}
 800528c:	469e      	mov	lr, r3
 800528e:	4770      	bx	lr
